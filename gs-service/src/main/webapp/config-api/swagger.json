{
	"openapi": "3.0.1",
	"info": {
		"title": "Configuration DAB REST API",
		"description": "DAB REST API which allow to put, edit, remove and schedule harvesting of brokered sources",
		"version": "1.0"
	},
	"tags": [
		{
			"name": "config",
			"description": "The path to execute the supported requests"
		}
	],
	"paths": {
		"/gs-service/services/config/{authenticationToken}": {
			"post": {
				"tags": [
					"config"
				],
				"description": "The path to execute the supported requests",
				"parameters": [
					{
						"name": "authenticationToken",
						"in": "path",
						"description": "Authentication token required to execute configuration requests",
						"required": true,
						"type": "string"
					}
				],
				"requestBody": {
					"required": true,
					"description": "The request to execute, in JSON format. Before to be processed, each request is validated according to its specification. In case of validation errors, the request execution fails with reponse code '405'",
					"content": {
						"application/json": {
							"schema": {
								"oneOf": [
									{
										"$ref": "#/components/schemas/PutSource"
									},
									{
										"$ref": "#/components/schemas/EditSource"
									},
									{
										"$ref": "#/components/schemas/RemoveSource"
									},
									{
										"$ref": "#/components/schemas/HarvestScheduling"
									},
									{
										"$ref": "#/components/schemas/HarvestUnscheduling"
									},
									{
										"$ref": "#/components/schemas/ListSources"
									}
								]
							},
							"examples": {
								"putSource1": {
									"summary": "'PutSource' request with explicit source identifier",
									"description": "Example of 'PutSource' request with explicit source identifier",
									"value": {
										"request": "PutSource",
										"parameters": {
											"id": "nsidcAtlasSouth",
											"label": "Atlas of the Cryosphere: Southern Hemisphere",
											"serviceType": "WCS 1.0.0",
											"endpoint": "http://nsidc.org/cgi-bin/atlas_south?"
										}
									}
								},
								"putSource2": {
									"summary": "'PutSource' request with random source identifier",
									"description": "Example of 'PutSource' request without source identifier, a random one is created and returned in the response",
									"value": {
										"request": "PutSource",
										"parameters": {
											"serviceType": "WCS 1.0.0",
											"endpoint": "http://nsidc.org/cgi-bin/atlas_south?"
										}
									}
								},
								"putSource3": {
									"summary": "'PutSource' request with harvest scheduling",
									"description": "Example of 'PutSource' request with harvest scheduled to start 'Once' now",
									"value": {
										"request": "PutSource",
										"parameters": {
											"id": "nsidcAtlasSouth",
											"label": "Atlas of the Cryosphere: Southern Hemisphere",
											"serviceType": "WCS 1.0.0",
											"endpoint": "http://localhost",
											"HarvestScheduling": {
												"repeatCount": "Once"
											}
										}
									}
								},
								"editSource": {
									"summary": "'EditSource' request which changes the source label",
									"description": "Example of 'EditSource' which changes the source label by adding '(WCS)' at the end",
									"value": {
										"request": "EditSource",
										"parameters": {
											"id": "nsidcAtlasSouth",
											"label": "Atlas of the Cryosphere: Southern Hemisphere (WCS)",
											"serviceType": "WCS 1.0.0",
											"endpoint": "http://nsidc.org/cgi-bin/atlas_south?"
										}
									}
								},
								"harvestScheduling1": {
									"summary": "'HarvestScheduling' request: run 'Once', start now",
									"description": "Example of 'HarvestScheduling' request configured to run 'Once' and to start now (as soon as possible)",
									"value": {
										"request": "HarvestScheduling",
										"parameters": {
											"id": "nsidcAtlasSouth",
											"repeatCount": "Once"
										}
									}
								},
								"harvestScheduling2": {
									"summary": "'HarvestScheduling' request: run 'Once', with defined 'startTime'",
									"description": "Example of 'HarvestScheduling' request configured to run 'Once' and to start in a specific date and time. The 'startTime' parameter it must be of type ISO8601 according to the 'Europe/Berlin' TimeZone",
									"value": {
										"request": "HarvestScheduling",
										"parameters": {
											"id": "nsidcAtlasSouth",
											"repeatCount": "Once",
											"startTime": "2025-06-09T11:00:00"
										}
									}
								},
								"harvestScheduling3": {
									"summary": "'HarvestScheduling' request: run 'Indefinitely', every week",
									"description": "Example of 'HarvestScheduling' request configured to run 'Indefinitely' with intervals of one week, starting now (as soon as possible)",
									"value": {
										"request": "HarvestScheduling",
										"parameters": {
											"id": "nsidcAtlasSouth",
											"repeatCount": "Indefinitely",
											"repeatIntervalUnit": "Weeks",
											"repeatInterval": "1"
										}
									}
								},
								"harvestUnscheduling": {
									"summary": "'HarvestUnscheduling' request",
									"description": "Example of 'HarvestUnscheduling' request",
									"value": {
										"request": "HarvestUnscheduling",
										"parameters": {
											"id": "nsidcAtlasSouth"
										}
									}
								},
								"removeSource": {
									"summary": "'RemoveSource' request",
									"description": "Example of 'RemoveSource' request",
									"value": {
										"request": "RemoveSource",
										"parameters": {
											"id": "nsidcAtlasSouth"
										}
									}
								},
								"listSources1": {
									"summary": "'ListSources' request for all the available sources",
									"description": "Example of 'ListSources' request which shows all the available sources and their harvesting phase (if available)",
									"value": {
										"request": "ListSources"
									}
								},
								"listSources2": {
									"summary": "'ListSources' request for a specific source",
									"description": "Example of 'ListSources' request which shows a specific source and its harvesting phase (if available)",
									"value": {
										"request": "ListSources",
										"parameters": {
											"id": "nsidcAtlasSouth"
										}
									}
								},
								"listSources3": {
									"summary": "'ListSources' request for two specific sources",
									"description": "Example of 'ListSources' request which shows two specific sources and their harvesting phase (if available)",
									"value": {
										"request": "ListSources",
										"parameters": {
											"id": "nsidcAtlasSouth,anotherSourceId"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Request correctly executed",
						"content": {
							"application/json": {
								"examples": {
									"randomId": {
										"summary": "'ListSources' request response",
										"value": [
											{
												"serviceType": "WCS",
												"endpoint": "http://nsidc.org/cgi-bin/atlas_south?",
												"scheduling": {
													"phase": "Running",
													"firedTime": "2025-05-10 14:49:52",
													"nextFireTime": "2025-05-17 14:49:52",
													"repeatInterval": "0007 day/s",
													"repeatCount": "Indefinitely"
												},
												"id": "nsidcAtlasSouth",
												"label": "Atlas of the Cryosphere: Southern Hemisphere (WCS)"
											}
										]
									}
								}
							}
						}
					},
					"201": {
						"description": "DAB source created",
						"content": {
							"application/json": {
								"examples": {
									"randomId": {
										"summary": "'PutSource' request response. Source created with random id",
										"value": {
											"id": "8efce19b-85e6-4b21-911c-ddfff6c67c9e"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Request not executable",
						"content": {
							"application/json": {
								"examples": {
									"sourceExists": {
										"summary": "'PutSource' request failed beacause source already exists",
										"value": {
											"error": {
												"reasonPrase": "Bad Request",
												"message": "Source with id 'nsidcAtlasSouth' already exists",
												"statusCode": 400
											}
										}
									},
									"noChanges": {
										"summary": "'EditSource' request failed beacause there are no changes to apply",
										"value": {
											"error": {
												"reasonPrase": "Bad Request",
												"message": "No changes to apply",
												"statusCode": 400
											}
										}
									},
									"harvestUnderWay": {
										"summary": "'HarvestSource' request failed to start now beacause harvesting is already underway",
										"value": {
											"error": {
												"reasonPrase": "Bad Request",
												"message": "Unable to start harvesting now since harvesting of the requested source is currently underway",
												"statusCode": 400
											}
										}
									},
									"harvestUnderWay2": {
										"summary": "'RemoveSource' request failed beacause harvesting is underway",
										"value": {
											"error": {
												"reasonPrase": "Bad Request",
												"message": "The requested source is currently being harvested and cannot be removed until harvest is complete",
												"statusCode": 400
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Unrecognized uthorization token",
						"content": {
							"application/json": {
								"example": {
									"error": {
										"reasonPrase": "Unauthorized",
										"message": "Unrecognized uthorization token",
										"statusCode": 401
									}
								}
							}
						}
					},
					"404": {
						"description": "Source with given id not found",
						"content": {
							"application/json": {
								"example": {
									"error": {
										"reasonPrase": "Not Found",
										"message": "Source with id 'unknownSourceId' not found",
										"statusCode": 404
									}
								}
							}
						}
					},
					"405": {
						"description": "Request validation failed",
						"content": {
							"application/json": {
								"examples": {
									"invalidId": {
										"summary": "'PutSource' request failed for invalid 'id' parameter",
										"value": {
											"error": {
												"reasonPrase": "Method Not Allowed",
												"message": "Unsupported value '#invalid!id?'. Parameter 'id' should match the '^(\\w+|\\w+-{1})*$' pattern",
												"statusCode": 405
											}
										}
									},
									"missingLabel": {
										"summary": "'PutSource' request failed because the mandatory parameter 'label' is missing'",
										"value": {
											"error": {
												"reasonPrase": "Method Not Allowed",
												"message": "Missing mandatory parameters: 'label'",
												"statusCode": 405
											}
										}
									},
									"invalidStartTime": {
										"summary": "'HarvestSource' request failed for invalid 'startTime'",
										"value": {
											"error": {
												"reasonPrase": "Method Not Allowed",
												"message": "Unsupported value '2025-06-09'. Parameter 'startTime' should be of type ISO8601 date time according to the 'Europe/Berlin' TimeZone: 'YYYY-MM-DDThh:mm:ss'",
												"statusCode": 405
											}
										}
									},
									"startTimeInThePast": {
										"summary": "'HarvestSource' request failed because 'startTime' is in the past",
										"value": {
											"error": {
												"reasonPrase": "Method Not Allowed",
												"message": "The provided start time '2024-06-09T11:00:00' is in the past",
												"statusCode": 405
											}
										}
									},
									"invalidRepeatCount": {
										"summary": "'HarvestSource' request failed for invalid 'repeatCount'",
										"value": {
											"error": {
												"reasonPrase": "Method Not Allowed",
												"message": "Unsupported value 'Unknown' for parameter 'repeatCount'. Supported values are: 'Once', 'Indefinitely'",
												"statusCode": 405
											}
										}
									},
									"invalidRepeatIntervalUnit": {
										"summary": "'HarvestSource' request failed for invalid 'repeatIntervalUnit'",
										"value": {
											"error": {
												"reasonPrase": "Method Not Allowed",
												"message": "Unsupported value 'Seconds' for parameter 'repeatIntervalUnit'. Supported values are: 'Minutes', 'Hours', 'Days', 'Weeks', 'Months'",
												"statusCode": 405
											}
										}
									},
									"missingHarvestParameters": {
										"summary": "'HarvestSource' request failed because mandatory parameters are missing",
										"value": {
											"error": {
												"reasonPrase": "Method Not Allowed",
												"message": "Missing parameters 'repeatInterval' and repeatIntervalUnit' which are mandatory when 'repeatCount' is 'Indefinitely'",
												"statusCode": 405
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Internal server error"
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"PutSource": {
				"description": "Creates a new DAB source. If the source creation succeeds, the response code is '201'",
				"type": "object",
				"required": [
					"request",
					"parameters"
				],
				"properties": {
					"request": {
						"type": "string",
						"description": "The request name",
						"const": "PutSource"
					},
					"parameters": {
						"type": "object",
						"required": [
							"serviceType",
							"endpoint",
							"label"
						],
						"properties": {
							"id": {
								"description": "The optional source id. If omitted, a random id is created and returned in the response. If provided, it must contains alphanumeric characters and/or '_' or '-' characters and if a source with the given id already exists, the request execution fails with reponse code '400'",
								"type": "string"
							},
							"serviceType": {
								"description": "The mandatory service type",
								"type": "string",
								"enum": [
									"CSW",
									"WCS 1.0.0",
									"WCS 1.1.0",
									"WCS 1.1.1",
									"WMS 1.1.1",
									"WMS 1.3.0",
									"WFS 1.1.0"
								]
							},
							"label": {
								"description": "The mandatory source label",
								"type": "string"
							},
							"endpoint": {
								"description": "The mandatory source endpoint",
								"type": "string"
							},
							"HarvestScheduling": {
								"description": "The harvest of the source just created can optionally be scheduled. The parameters are the same of the 'HarvestScheduling' request, except 'id'",
								"type": "object",
								"required": [
									"repeatCount"
								],
								"properties": {
									"repeatCount": {
										"$ref": "#/components/schemas/RepeatCount"
									},
									"repeatIntervalUnit": {
										"$ref": "#/components/schemas/RepeatIntervalUnit"
									},
									"repeatInterval": {
										"description": "Mandatory parameter in case 'repeatCount' is 'Indefinitely'. Defines the interval (expressed according to 'repeatIntervalUnit') between the scheduled harvests",
										"type": "integer"
									},
									"startTime": {
										"description": "Optional parameter. If omitted, the harvest is scheduled to start now (as soon as possible), immediately after the creation of the new source. If provided, it must be of type ISO8601 according to the 'Europe/Berlin' TimeZone (e.g: '2025-01-01T15:00:00')",
										"type": "string"
									}
								}
							}
						}
					}
				}
			},
			"EditSource": {
				"description": "Edits an existing DAB source. If the request content does not involve any modification to the given source, the requeste execution fails with response code '400'",
				"type": "object",
				"required": [
					"request",
					"parameters"
				],
				"properties": {
					"request": {
						"type": "string",
						"description": "The request name",
						"const": "EditSource"
					},
					"parameters": {
						"type": "object",
						"required": [
							"id"
						],
						"properties": {
							"id": {
								"description": "The mandatory source id. It must contains alphanumeric characters and/or '_' or '-' characters. If a source with the given id is not found, the request execution fails with reponse code be '404'",
								"type": "string"
							},
							"serviceType": {
								"description": "The service type",
								"type": "string",
								"enum": [
									"CSW",
									"WCS 1.0.0",
									"WCS 1.1.0",
									"WCS 1.1.1",
									"WMS 1.1.1",
									"WMS 1.3.0",
									"WFS 1.1.0"
								]
							},
							"label": {
								"description": "The source label",
								"type": "string"
							},
							"endpoint": {
								"description": "The source endpoint",
								"type": "string"
							}
						}
					}
				}
			},
			"RemoveSource": {
				"description": "Removes an existing DAB source. When a source is removed, it is also unscheduled. If the harvesting of the provided source is underway, the request execution fails with reponse code '400'",
				"type": "object",
				"required": [
					"request",
					"parameters"
				],
				"properties": {
					"request": {
						"type": "string",
						"description": "The request name",
						"const": "RemoveSource"
					},
					"parameters": {
						"type": "object",
						"required": [
							"id"
						],
						"properties": {
							"id": {
								"description": "The mandatory source id. It must contains alphanumeric characters and/or '_' or '-' characters. If a source with the given id is not found, the request execution fails with reponse code be '404'",
								"type": "string"
							}
						}
					}
				}
			},
			"HarvestScheduling": {
				"description": "Schedules the harvest of a DAB source",
				"type": "object",
				"required": [
					"request",
					"parameters"
				],
				"properties": {
					"request": {
						"type": "string",
						"description": "The request name",
						"const": "HarvestScheduling"
					},
					"parameters": {
						"type": "object",
						"required": [
							"id",
							"repeatCount"
						],
						"properties": {
							"id": {
								"description": "The mandatory source id. It must contains alphanumeric characters and/or '_' or '-' characters. If a source with the given id is not found, the request execution fails with reponse code be '404'",
								"type": "string"
							},
							"repeatCount": {
								"$ref": "#/components/schemas/RepeatCount"
							},
							"repeatIntervalUnit": {
								"$ref": "#/components/schemas/RepeatIntervalUnit"
							},
							"repeatInterval": {
								"description": "Mandatory parameter in case 'repeatCount' is 'Indefinitely'. Defines the interval (expressed according to 'repeatIntervalUnit') between the scheduled harvests",
								"type": "integer"
							},
							"startTime": {
								"description": "Optional parameter. If omitted, the harvest is scheduled to start now (as soon as possible). If provided, it must be of type ISO8601 according to the 'Europe/Berlin' TimeZone (e.g: '2025-01-01T15:00:00')",
								"type": "string"
							}
						}
					}
				}
			},
			"HarvestUnscheduling": {
				"description": "Unschedules the harvest of a DAB source. If the harvesting of the provided source is underway, it is canceled and it will terminate as soon as possible",
				"type": "object",
				"required": [
					"request",
					"parameters"
				],
				"properties": {
					"request": {
						"type": "string",
						"description": "The request name",
						"const": "HarvestUnscheduling"
					},
					"parameters": {
						"type": "object",
						"required": [
							"id"
						],
						"properties": {
							"id": {
								"description": "The mandatory source id. It must contains alphanumeric characters and/or '_' or '-' characters. If a source with the given id is not found, the request execution fails with reponse code be '404'",
								"type": "string"
							}
						}
					}
				}
			},
			"ListSources": {
				"description": "Lists all or a subset of the DAB sources. All the sources properties as listed, harvest scheduling included",
				"type": "object",
				"required": [
					"request",
					"parameters"
				],
				"properties": {
					"request": {
						"type": "string",
						"description": "The request name",
						"const": "ListSources"
					},
					"parameters": {
						"type": "object",
						"properties": {
							"id": {
								"description": "Optional comma separated list of source ids. If one or more of the provided sources are not found, the request execution fails with reponse code '404'",
								"type": "string"
							}
						}
					}
				}
			},
			"HarvestingPhase": {
				"description": "The possible phases of DAB source harvesting",
				"type": "string",
				"enum": [
					"Running",
					"Rescheduled",
					"Completed",
					"Canceled",
					"Error"
				]
			},
			"RepeatIntervalUnit": {
				"description": "Mandatory parameter in case 'repeatCount' is 'Indefinitely'. Defines the interval unit between the scheduled harvests",
				"type": "string",
				"enum": [
					"Minutes",
					"Hours",
					"Days",
					"Weeks",
					"Months"
				]
			},
			"RepeatCount": {
				"description": "This mandatory parameter defines the scheduling to be performed just once or indefinitely. In the first case ('Once'), the only additional supported parameter is 'startTime'; if omitted, the harvest is scheduled to start now (as soon as possible), immediately after the creation of the new source. In the second case ('Indefinitely'), the parameters 'repeatIntervalUnit' and 'repeatInterval' are mandatory, while 'startTime' can be omitted, as previously described",
				"type": "string",
				"enum": [
					"Once",
					"Indefinitely"
				]
			}
		}
	}
}