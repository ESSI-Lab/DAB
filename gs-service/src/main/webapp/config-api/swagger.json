{
	"openapi": "3.0.1",
	"info": {
		"title": "DAB REST Configuration API",
		"description": "DAB REST API to create, edit and remove the DAB brokered sources. It also allows to manage the harvesting scheduling of the DAB brokered sources",
		"version": "1.0"
	},
	"tags": [
		{
			"name": "/config-api",
			"description": "The path to execute the API requests"
		}
	],
	"paths": {
		"/gs-service/services/config-api/{authenticationToken}": {
			"post": {
				"tags": [
					"/config-api"
				],
				"description": "The path to execute the API requests",
				"parameters": [
					{
						"name": "authenticationToken",
						"in": "path",
						"description": "Authentication token required to execute the API requests",
						"required": true,
						"type": "string"
					}
				],
				"requestBody": {
					"required": true,
					"description": "The request to execute, in JSON format. Before to be processed, each request is validated according to its specification. In case of validation errors, the request fails with reponse code '405'",
					"content": {
						"application/json": {
							"schema": {
								"oneOf": [
									{
										"$ref": "#/components/schemas/PutSource"
									},
									{
										"$ref": "#/components/schemas/EditSource"
									},
									{
										"$ref": "#/components/schemas/RemoveSource"
									},
									{
										"$ref": "#/components/schemas/HarvestScheduling"
									},
									{
										"$ref": "#/components/schemas/HarvestUnscheduling"
									},
									{
										"$ref": "#/components/schemas/ListSources"
									}
								]
							},
							"examples": {
								"putSource1": {
									"summary": "'PutSource' request with explicit source identifier",
									"description": "Example of 'PutSource' request with explicit source identifier",
									"value": {
										"request": "PutSource",
										"parameters": {
											"id": "nsidcAtlasSouth",
											"label": "Atlas of the Cryosphere: Southern Hemisphere",
											"serviceType": "WCS 1.0.0",
											"endpoint": "http://nsidc.org/cgi-bin/atlas_south?"
										}
									}
								},
								"putSource2": {
									"summary": "'PutSource' request with random source identifier",
									"description": "Example of 'PutSource' request without source identifier; a random one is created and returned in the response",
									"value": {
										"request": "PutSource",
										"parameters": {
											"serviceType": "WCS 1.0.0",
											"endpoint": "http://nsidc.org/cgi-bin/atlas_south?"
										}
									}
								},
								"putSource3": {
									"summary": "'PutSource' request with harvesting scheduling",
									"description": "Example of 'PutSource' request with harvesting scheduled to start 'Once' now (as soon as possible)",
									"value": {
										"request": "PutSource",
										"parameters": {
											"id": "nsidcAtlasSouth",
											"label": "Atlas of the Cryosphere: Southern Hemisphere",
											"serviceType": "WCS 1.0.0",
											"endpoint": "http://nsidc.org/cgi-bin/atlas_south?",
											"HarvestScheduling": {
												"repeatCount": "Once"
											}
										}
									}
								},
								"editSource": {
									"summary": "'EditSource' request which changes the source label",
									"description": "Example of 'EditSource' which changes the source label by adding '(WCS)' at the end",
									"value": {
										"request": "EditSource",
										"parameters": {
											"id": "nsidcAtlasSouth",
											"label": "Atlas of the Cryosphere: Southern Hemisphere (WCS)",
											"serviceType": "WCS 1.0.0",
											"endpoint": "http://nsidc.org/cgi-bin/atlas_south?"
										}
									}
								},
								"harvestScheduling1": {
									"summary": "'HarvestScheduling' request to run 'Once' starting now",
									"description": "Example of 'HarvestScheduling' request configured to run 'Once' and to start now (as soon as possible)",
									"value": {
										"request": "HarvestScheduling",
										"parameters": {
											"id": "nsidcAtlasSouth",
											"repeatCount": "Once"
										}
									}
								},
								"harvestScheduling2": {
									"summary": "'HarvestScheduling' request to run 'Once', with defined 'startTime'",
									"description": "Example of 'HarvestScheduling' request configured to run 'Once' and to start in a specific date and time. The 'startTime' parameter must be of type ISO8601 according to the 'Europe/Berlin' TimeZone",
									"value": {
										"request": "HarvestScheduling",
										"parameters": {
											"id": "nsidcAtlasSouth",
											"repeatCount": "Once",
											"startTime": "2025-06-09T11:00:00"
										}
									}
								},
								"harvestScheduling3": {
									"summary": "'HarvestScheduling' request to run 'Indefinitely' every week",
									"description": "Example of 'HarvestScheduling' request configured to run 'Indefinitely' with intervals of one week, starting now (as soon as possible)",
									"value": {
										"request": "HarvestScheduling",
										"parameters": {
											"id": "nsidcAtlasSouth",
											"repeatCount": "Indefinitely",
											"repeatIntervalUnit": "Weeks",
											"repeatInterval": "1"
										}
									}
								},
								"harvestUnscheduling": {
									"summary": "'HarvestUnscheduling' request",
									"description": "Example of 'HarvestUnscheduling' request",
									"value": {
										"request": "HarvestUnscheduling",
										"parameters": {
											"id": "nsidcAtlasSouth"
										}
									}
								},
								"removeSource": {
									"summary": "'RemoveSource' request",
									"description": "Example of 'RemoveSource' request",
									"value": {
										"request": "RemoveSource",
										"parameters": {
											"id": "nsidcAtlasSouth"
										}
									}
								},
								"removeSourceData": {
									"summary": "'RemoveSourceData' request",
									"description": "Example of 'RemoveSourceData' request",
									"value": {
										"request": "RemoveSourceData",
										"parameters": {
											"id": "nsidcAtlasSouth"
										}
									}
								},
								"listSources1": {
									"summary": "'ListSources' request for all the brokered sources",
									"description": "Example of 'ListSources' request which shows all the brokered sources",
									"value": {
										"request": "ListSources"
									}
								},
								"listSources2": {
									"summary": "'ListSources' request for a specific source",
									"description": "Example of 'ListSources' request limited to a specific source",
									"value": {
										"request": "ListSources",
										"parameters": {
											"id": "nsidcAtlasSouth"
										}
									}
								},
								"listSources3": {
									"summary": "'ListSources' request for two specific sources",
									"description": "Example of 'ListSources' request limited to two specific sources. The second source id must be modified with the id of an existing source",
									"value": {
										"request": "ListSources",
										"parameters": {
											"id": "nsidcAtlasSouth,anotherSourceId"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Request correctly executed",
						"content": {
							"application/json": {
								"examples": {
									"listSources1": {
										"summary": "'ListSources' request response of a running harvesting",
										"value": [
											{
												"serviceType": "WCS",
												"endpoint": "http://nsidc.org/cgi-bin/atlas_south?",
												"scheduling": {
													"phase": "Running",
													"firedTime": "2025-05-10 14:49:52",
													"nextFireTime": "2025-05-17 14:49:52",
													"repeatInterval": "0007 day/s",
													"repeatCount": "Indefinitely"
												},
												"id": "nsidcAtlasSouth",
												"label": "Atlas of the Cryosphere: Southern Hemisphere (WCS)"
											}
										]
									},
									"listSources2": {
										"summary": "'ListSources' request response of a completed harvesting",
										"value": [
											{
												"serviceType": "WCS",
												"endpoint": "http://nsidc.org/cgi-bin/atlas_south?",
												"scheduling": {
													"phase": "Completed",
													"firedTime": "2025-05-10 14:54:57",
													"size": "29",
													"nextFireTime": "2025-05-17 14:54:57",
													"repeatInterval": "0007 day/s",
													"endTime": "2025-05-10 14:56:58",
													"elapsedTime": "00:02:01",
													"repeatCount": "Indefinitely"
												},
												"id": "nsidcAtlasSouth",
												"label": "Atlas of the Cryosphere: Southern Hemisphere"
											}
										]
									}
								}
							}
						}
					},
					"201": {
						"description": "DAB source created",
						"content": {
							"application/json": {
								"examples": {
									"randomId": {
										"summary": "'PutSource' request response. Source created with random id",
										"value": {
											"id": "8efce19b-85e6-4b21-911c-ddfff6c67c9e"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Request not executable",
						"content": {
							"application/json": {
								"examples": {
									"sourceExists": {
										"summary": "'PutSource' request failed due to already existing source",
										"value": {
											"error": {
												"reasonPrase": "Bad Request",
												"message": "Source with id 'nsidcAtlasSouth' already exists",
												"statusCode": 400
											}
										}
									},
									"noChanges": {
										"summary": "'EditSource' request failed due to no changes to apply",
										"value": {
											"error": {
												"reasonPrase": "Bad Request",
												"message": "No changes to apply",
												"statusCode": 400
											}
										}
									},
									"harvestUnderWay": {
										"summary": "'HarvestScheduling' request failed to start now due to an underway harvesting",
										"value": {
											"error": {
												"reasonPrase": "Bad Request",
												"message": "Unable to start harvesting now since harvesting of the requested source is currently underway",
												"statusCode": 400
											}
										}
									},
									"harvestUnderWay2": {
										"summary": "'RemoveSource' request failed due to an underway harvesting",
										"value": {
											"error": {
												"reasonPrase": "Bad Request",
												"message": "The requested source is currently being harvested and cannot be removed until harvesting is complete",
												"statusCode": 400
											}
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Unrecognized authentication token",
						"content": {
							"application/json": {
								"example": {
									"error": {
										"reasonPrase": "Unauthorized",
										"message": "Unrecognized authenticationtoken",
										"statusCode": 401
									}
								}
							}
						}
					},
					"404": {
						"description": "Source with given id not found",
						"content": {
							"application/json": {
								"example": {
									"error": {
										"reasonPrase": "Not Found",
										"message": "Source with id 'unknownSourceId' not found",
										"statusCode": 404
									}
								}
							}
						}
					},
					"405": {
						"description": "Request validation failed",
						"content": {
							"application/json": {
								"examples": {
									"invalidId": {
										"summary": "'PutSource' request failed due to invalid 'id' parameter",
										"value": {
											"error": {
												"reasonPrase": "Method Not Allowed",
												"message": "Unsupported value '#invalid!id?'. Parameter 'id' should match the '^(\\w+|\\w+-{1})*$' pattern",
												"statusCode": 405
											}
										}
									},
									"missingLabel": {
										"summary": "'PutSource' request failed due to missing of mandatory parameter 'label'",
										"value": {
											"error": {
												"reasonPrase": "Method Not Allowed",
												"message": "Missing mandatory parameters: 'label'",
												"statusCode": 405
											}
										}
									},
									"unsupportedParameter": {
										"summary": "'PutSource' request failed due to unsupported parameter 'foo'",
										"value": {
											"error": {
												"reasonPrase": "Method Not Allowed",
												"message": "Unknown parameters: 'foo'. Supported parameters: 'id', 'label', 'endpoint', 'serviceType', 'startTime', 'repeatCount', 'repeatInterval', 'repeatIntervalUnit'",
												"statusCode": 405
											}
										}
									},
									"unsupportedNestedParameter": {
										"summary": "'PutSource' request failed due to unsupported nested parameter 'id' in the composite 'HarvestScheduling' parameter",
										"value": {
											"error": {
												"reasonPrase": "Method Not Allowed",
												"message": "Unsupported nested parameters: 'id'. Supported nested parameters: 'HarvestScheduling.startTime', 'HarvestScheduling.repeatCount', 'HarvestScheduling.repeatInterval', 'HarvestScheduling.repeatIntervalUnit'",
												"statusCode": 405
											}
										}
									},
									"unsupportedStartTime": {
										"summary": "'HarvestScheduling' request failed due to unsupported 'startTime'",
										"value": {
											"error": {
												"reasonPrase": "Method Not Allowed",
												"message": "Unsupported value '2025-06-09'. Parameter 'startTime' must be of type ISO8601 date time according to the 'Europe/Berlin' TimeZone: 'YYYY-MM-DDThh:mm:ss'",
												"statusCode": 405
											}
										}
									},
									"startTimeInThePast": {
										"summary": "'HarvestScheduling' request failed since 'startTime' is in the past",
										"value": {
											"error": {
												"reasonPrase": "Method Not Allowed",
												"message": "The provided start time '2024-06-09T11:00:00' is in the past",
												"statusCode": 405
											}
										}
									},
									"unsupportedRepeatCount": {
										"summary": "'HarvestScheduling' request failed due to unsupported 'repeatCount'",
										"value": {
											"error": {
												"reasonPrase": "Method Not Allowed",
												"message": "Unsupported value 'Unknown' for parameter 'repeatCount'. Supported values are: 'Once', 'Indefinitely'",
												"statusCode": 405
											}
										}
									},
									"unsupportedRepeatInterval": {
										"summary": "'HarvestScheduling' request failed due to unsupported 'repeatInterval' value",
										"value": {
											"error": {
												"reasonPrase": "Method Not Allowed",
												"message": "Value of 'repeatInterval' parameter must be >= 1",
												"statusCode": 405
											}
										}
									},
									"unsupportedRepeatIntervalUnit": {
										"summary": "'HarvestScheduling' request failed due to unsupported 'repeatIntervalUnit'",
										"value": {
											"error": {
												"reasonPrase": "Method Not Allowed",
												"message": "Unsupported value 'Seconds' for parameter 'repeatIntervalUnit'. Supported values are: 'Minutes', 'Hours', 'Days', 'Weeks', 'Months'",
												"statusCode": 405
											}
										}
									},
									"missingHarvestParameters": {
										"summary": "'HarvestScheduling' request failed due to missing of mandatory parameters",
										"value": {
											"error": {
												"reasonPrase": "Method Not Allowed",
												"message": "Missing parameters 'repeatInterval' and repeatIntervalUnit' which are mandatory when 'repeatCount' is 'Indefinitely'",
												"statusCode": 405
											}
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Internal server error"
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"PutSource": {
				"description": "Creates a new DAB source. If the source creation succeeds, the response code is '201'",
				"type": "object",
				"required": [
					"request",
					"parameters"
				],
				"properties": {
					"request": {
						"type": "string",
						"description": "The request name",
						"const": "PutSource"
					},
					"parameters": {
						"type": "object",
						"required": [
							"serviceType",
							"endpoint",
							"label"
						],
						"properties": {
							"id": {
								"description": "The optional source id. If omitted, a random id is created and returned in the response. If provided, it must contains alphanumeric characters and/or '_' or '-' characters and if a source with the given id already exists, the request fails with reponse code '400'",
								"type": "string"
							},
							"serviceType": {
								"$ref": "#/components/schemas/ServiceType"
							},
							"label": {
								"description": "The mandatory source label",
								"type": "string"
							},
							"endpoint": {
								"description": "The mandatory source endpoint",
								"type": "string"
							},
							"HarvestScheduling": {
								"description": "The harvesting of the source just created can optionally be scheduled. The parameters are the same of the 'HarvestScheduling' request, except 'id' that must be omitted",
								"type": "object",
								"required": [
									"repeatCount"
								],
								"properties": {
									"repeatCount": {
										"$ref": "#/components/schemas/RepeatCount"
									},
									"repeatIntervalUnit": {
										"$ref": "#/components/schemas/RepeatIntervalUnit"
									},
									"repeatInterval": {
										"description": "Mandatory parameter in case 'repeatCount' is 'Indefinitely'. Defines the interval (expressed according to 'repeatIntervalUnit') between the scheduled harvesting. It must be an integer value >= 1",
										"type": "integer"
									},
									"startTime": {
										"description": "Optional parameter. If omitted, the harvesting is scheduled to start now (as soon as possible), immediately after the creation of the new source. If provided, it must be of type ISO8601 according to the 'Europe/Berlin' TimeZone (e.g: '2025-01-01T15:00:00')",
										"type": "string"
									}
								}
							}
						}
					}
				}
			},
			"EditSource": {
				"description": "Edits an existing DAB source. If the request content does not involve any modification to the given source, the requeste execution fails with response code '400'",
				"type": "object",
				"required": [
					"request",
					"parameters"
				],
				"properties": {
					"request": {
						"type": "string",
						"description": "The request name",
						"const": "EditSource"
					},
					"parameters": {
						"type": "object",
						"required": [
							"id"
						],
						"properties": {
							"id": {
								"description": "The mandatory source id. It must contains alphanumeric characters and/or '_' or '-' characters. If a source with the given id is not found, the request fails with reponse code be '404'",
								"type": "string"
							},
							"serviceType": {
								"$ref": "#/components/schemas/ServiceType"
							},
							"label": {
								"description": "The source label",
								"type": "string"
							},
							"endpoint": {
								"description": "The source endpoint",
								"type": "string"
							}
						}
					}
				}
			},
			"RemoveSource": {
				"description": "Removes an existing DAB source from the configuration along with its harvested data. If source harvesting is scheduled, it is unscheduled. If the harvesting of the provided source is underway, the request fails with reponse code '400'",
				"type": "object",
				"required": [
					"request",
					"parameters"
				],
				"properties": {
					"request": {
						"type": "string",
						"description": "The request name",
						"const": "RemoveSource"
					},
					"parameters": {
						"type": "object",
						"required": [
							"id"
						],
						"properties": {
							"id": {
								"description": "The mandatory source id. It must contains alphanumeric characters and/or '_' or '-' characters. If a source with the given id is not found, the request fails with reponse code be '404'",
								"type": "string"
							}
						}
					}
				}
			},
			"RemoveSourceData": {
				"description": "Removes the harvested data of an existing DAB source. If the harvesting of the provided source is underway, the request fails with reponse code '400'",
				"type": "object",
				"required": [
					"request",
					"parameters"
				],
				"properties": {
					"request": {
						"type": "string",
						"description": "The request name",
						"const": "RemoveSourceData"
					},
					"parameters": {
						"type": "object",
						"required": [
							"id"
						],
						"properties": {
							"id": {
								"description": "The mandatory source id. It must contains alphanumeric characters and/or '_' or '-' characters. If a source with the given id is not found, the request fails with reponse code be '404'",
								"type": "string"
							}
						}
					}
				}
			},
			"HarvestScheduling": {
				"description": "Schedules the harvesting of a DAB source",
				"type": "object",
				"required": [
					"request",
					"parameters"
				],
				"properties": {
					"request": {
						"type": "string",
						"description": "The request name",
						"const": "HarvestScheduling"
					},
					"parameters": {
						"type": "object",
						"required": [
							"id",
							"repeatCount"
						],
						"properties": {
							"id": {
								"description": "The mandatory source id. It must contains alphanumeric characters and/or '_' or '-' characters. If a source with the given id is not found, the request fails with reponse code be '404'",
								"type": "string"
							},
							"repeatCount": {
								"$ref": "#/components/schemas/RepeatCount"
							},
							"repeatIntervalUnit": {
								"$ref": "#/components/schemas/RepeatIntervalUnit"
							},
							"repeatInterval": {
								"description": "Mandatory parameter in case 'repeatCount' is 'Indefinitely'. Defines the interval (expressed according to 'repeatIntervalUnit') between the scheduled harvesting. It must be an integer value >= 1",
								"type": "integer"
							},
							"startTime": {
								"description": "Optional parameter. If omitted, the harvesting is scheduled to start now (as soon as possible). If provided, it must be of type ISO8601 according to the 'Europe/Berlin' TimeZone (e.g: '2025-01-01T15:00:00')",
								"type": "string"
							}
						}
					}
				}
			},
			"HarvestUnscheduling": {
				"description": "Unschedules the harvesting of a DAB source. If the harvesting of the provided source is underway, it is canceled and it will terminate as soon as possible",
				"type": "object",
				"required": [
					"request",
					"parameters"
				],
				"properties": {
					"request": {
						"type": "string",
						"description": "The request name",
						"const": "HarvestUnscheduling"
					},
					"parameters": {
						"type": "object",
						"required": [
							"id"
						],
						"properties": {
							"id": {
								"description": "The mandatory source id. It must contains alphanumeric characters and/or '_' or '-' characters. If a source with the given id is not found, the request fails with reponse code be '404'",
								"type": "string"
							}
						}
					}
				}
			},
			"ListSources": {
				"description": "Lists all or a subset of the DAB sources. All the sources properties as listed, as well as the harvesting scheduling (when available)",
				"type": "object",
				"required": [
					"request",
					"parameters"
				],
				"properties": {
					"request": {
						"type": "string",
						"description": "The request name",
						"const": "ListSources"
					},
					"parameters": {
						"type": "object",
						"properties": {
							"id": {
								"description": "Optional comma separated list of source ids. If one or more of the provided sources are not found, the request fails with reponse code '404'",
								"type": "string"
							}
						}
					}
				}
			},
			"ServiceType": {
				"description": "The supported service types",
				"type": "string",
				"enum": [
					"CSW",
					"WCS 1.0.0",
					"WCS 1.1.0",
					"WCS 1.1.1",
					"WMS 1.1.1",
					"WMS 1.3.0",
					"WFS 1.1.0"
				]
			},
			"RepeatIntervalUnit": {
				"description": "Mandatory parameter in case 'repeatCount' is 'Indefinitely'. Defines defines the unit of measurement between harvesting intervals",
				"type": "string",
				"enum": [
					"Minutes",
					"Hours",
					"Days",
					"Weeks",
					"Months"
				]
			},
			"RepeatCount": {
				"description": "Defines the scheduling to be performed just once or indefinitely. In the first case ('Once'), the only additional supported parameter is 'startTime'; if omitted, the harvesting is scheduled to start now (as soon as possible). In the second case ('Indefinitely'), the parameters 'repeatIntervalUnit' and 'repeatInterval' are mandatory, while 'startTime' can be omitted, as previously described",
				"type": "string",
				"enum": [
					"Once",
					"Indefinitely"
				]
			},
			"SchedulingPhase": {
				"description": "The possible phases of a scheduled harvesting. The harvesting phase of the DAB sources can be consulted with the 'ListSources' request",
				"type": "string",
				"enum": [
					"Running",
					"Rescheduled",
					"Completed",
					"Canceled",
					"Error"
				]
			},
			"SchedulingInfo": {
				"description": "Provides information about the scheduling of an harvested source. This information can be consulted with the 'ListSources' request",
				"type": "object",
				"properties": {
					"phase": {
						"$ref": "#/components/schemas/SchedulingPhase"
					},
					"size": {
						"type": "integer",
						"description": "The number of records of the brokered source. This value is available only if the harvesting is scheduled to tun 'Indefinitely'"
					},
					"firedTime": {
						"type": "string",
						"description": "The date and time of the last started harvesting"
					},
					"nextFiredTime": {
						"type": "string",
						"description": "The date and time of the next scheduled start"
					},
					"endTime": {
						"type": "string",
						"description": "The date and time of the last completed harvesting"
					},
					"elapsedTime": {
						"type": "string",
						"description": "The elapsed time of the last completed harvesting "
					},
					"repeatInterval": {
						"type": "string",
						"description": "A composition of 'repeatatIntervalUnit' and 'repeatatInterval' (e.g.: '0007 day/s')"
					},
					"repeatCount": {
						"$ref": "#/components/schemas/RepeatCount"
					}
				}
			}
		}
	}
}