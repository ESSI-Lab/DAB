{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "ESSI Lab AWS CloudFormation template to create a new VPC or use an existing VPC for ECS deployment in Create Cluster Wizard\n",
    "Parameters": {
        "GSTestServiceTaskContainerName": {
            "Type": "String",
            "Description": "Specifies the name of the container of the gs-service image",
            "Default": "GSServiceContainer"
        },
        "GSTestServiceTaskBatchContainerName": {
            "Type": "String",
            "Description": "Specifies the name of the container of the gs-service image",
            "Default": "GSServiceBatchContainer"
        },
        "GSServiceImage": {
            "Type": "String",
            "Description": "Specifies the image for the gs-service",
            "Default": ""
        },
        "DefaultTaskImage": {
            "Type": "String",
            "Description": "Specifies the image for the default sefrviservicece used by application load balancer",
            "Default": "672812193635.dkr.ecr.us-east-1.amazonaws.com/redirect:geodab-org-4"
        },
        "DefaultTaskContainerName": {
            "Type": "String",
            "Description": "Specifies the image for the default sefrviservicece used by application load balancer",
            "Default": "Nginx"
        },
        "EnvironmentHost": {
            "Type": "String",
            "Description": "Specifies the host for the test environment",
            "Default": ""
        },
        "JavaOpts": {
            "Type": "String",
            "Description": "Specifies the JVM arguments",
            "Default": ""
        },
        "HostedZoneId": {
            "Type": "String",
            "Description": "Specifies the hosted zone id where to create the record set for public dns",
            "Default": ""
        },
        "EcsClusterName": {
            "Type": "String",
            "Description": "Specifies the ECS Cluster Name with which the resources would be associated\n",
            "Default": ""
        },
        "EcsAmiId": {
            "Type": "String",
            "Description": "Specifies the AMI ID for your container instances.",
            "Default": "ami-275ffe31"
        },
        "EcsInstanceType": {
            "Type": "String",
            "Description": "Specifies the EC2 instance type for your container instances. Defaults to m4.large\n",
            "Default": "c5.large",
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "KeyName": {
            "Type": "String",
            "Description": "Optional - Specifies the name of an existing Amazon EC2 key pair to enable SSH access to the EC2 instances in your cluster.\n",
            "Default": "large-key"
        },
        "VpcId": {
            "Type": "String",
            "Description": "Optional - Specifies the ID of an existing VPC in which to launch your container instances. If you specify a VPC ID, you must specify a list of existing subnets in that VPC. If you do not specify a VPC ID, a new VPC is created with atleast 1 subnet.\n",
            "Default": "vpc-6bc22212",
            "AllowedPattern": "^(?:vpc-[0-9a-f]{8}|)$",
            "ConstraintDescription": "VPC Id must begin with 'vpc-' or leave blank to have a new VPC created\n"
        },
        "SubnetIds": {
            "Type": "CommaDelimitedList",
            "Description": "Optional - Specifies the Comma separated list of existing VPC Subnet Ids where ECS instances will run\n",
            "Default": "subnet-22ee1b78"
        },
        "SecurityGroupId": {
            "Type": "String",
            "Description": "Optional - Specifies the Security Group Id of an existing Security Group. Leave blank to have a new Security Group created\n",
            "Default": "sg-c6a878b8"
        },
        "VpcCidr": {
            "Type": "String",
            "Description": "Optional - Specifies the CIDR Block of VPC",
            "Default": "10.0.0.0/16"
        },
        "SubnetCidr1": {
            "Type": "String",
            "Description": "Specifies the CIDR Block of Subnet 1",
            "Default": "10.0.0.0/24"
        },
        "SubnetCidr2": {
            "Type": "String",
            "Description": "Specifies the CIDR Block of Subnet 2",
            "Default": "10.0.1.0/24"
        },
        "SubnetCidr3": {
            "Type": "String",
            "Description": "Specifies the CIDR Block of Subnet 3",
            "Default": ""
        },
        "AsgSize": {
            "Type": "Number",
            "Description": "Specifies the number of instances to launch and register to the cluster. Defaults to 1.\n",
            "Default": "1"
        },
        "IamRoleInstanceProfile": {
            "Type": "String",
            "Description": "Specifies the Name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance\n",
            "Default": "ecsInstanceRole"
        },
        "SecurityIngressFromPort": {
            "Type": "Number",
            "Description": "Optional - Specifies the Start of Security Group port to open on ECS instances - defaults to port 0\n",
            "Default": "80"
        },
        "SecurityIngressToPort": {
            "Type": "Number",
            "Description": "Optional - Specifies the End of Security Group port to open on ECS instances - defaults to port 65535\n",
            "Default": "80"
        },
        "SecurityIngressCidrIp": {
            "Type": "String",
            "Description": "Optional - Specifies the CIDR/IP range for Security Ports - defaults to 0.0.0.0/0\n",
            "Default": "0.0.0.0/0"
        },
        "VpcAvailabilityZones": {
            "Type": "CommaDelimitedList",
            "Description": "Specifies a comma-separated list of 3 VPC Availability Zones for the creation of new subnets. These zones must have the available status.\n",
            "Default": "us-east-1b,us-east-1c,us-east-1a,us-east-1d,us-east-1e"
        },
        "EbsVolumeSize": {
            "Type": "Number",
            "Description": "Optional - Specifies the Size in GBs, of the newly created Amazon Elastic Block Store (Amazon EBS) volume\n",
            "Default": "22"
        },
        "EbsVolumeType": {
            "Type": "String",
            "Description": "Optional - Specifies the Type of (Amazon EBS) volume",
            "Default": "gp2",
            "AllowedValues": [
                "",
                "standard",
                "io1",
                "gp2",
                "sc1",
                "st1"
            ],
            "ConstraintDescription": "Must be a valid EC2 volume type."
        },
        "DeviceName": {
            "Type": "String",
            "Description": "Optional - Specifies the device mapping for the Volume",
            "Default": "/dev/xvdcz"
        }
    },
    "Conditions": {
        "CreateEC2LCWithKeyPair": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {"Ref": "KeyName"},
                        ""
                    ]
                }
            ]
        },
        "CreateNewSecurityGroup": {
            "Fn::Equals": [
                {"Ref": "SecurityGroupId"},
                ""
            ]
        },
        "CreateNewVpc": {
            "Fn::Equals": [
                {"Ref": "VpcId"},
                ""
            ]
        },
        "CreateSubnet1": {
            "Fn::And": [
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {"Ref": "SubnetCidr1"},
                                ""
                            ]
                        }
                    ]
                },
                {"Condition": "CreateNewVpc"}
            ]
        },
        "CreateSubnet2": {
            "Fn::And": [
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {"Ref": "SubnetCidr2"},
                                ""
                            ]
                        }
                    ]
                },
                {"Condition": "CreateSubnet1"}
            ]
        },
        "CreateSubnet3": {
            "Fn::And": [
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {"Ref": "SubnetCidr3"},
                                ""
                            ]
                        }
                    ]
                },
                {"Condition": "CreateSubnet2"}
            ]
        },
        "CreateEbsVolume": {
            "Fn::And": [
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {"Ref": "EbsVolumeSize"},
                                "0"
                            ]
                        }
                    ]
                },
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {"Ref": "EbsVolumeType"},
                                ""
                            ]
                        }
                    ]
                },
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {"Ref": "DeviceName"},
                                ""
                            ]
                        }
                    ]
                }
            ]
        }
    },
    "Resources": {
        "RecordSet": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "AliasTarget": {
                    "DNSName": {
                        "Fn::GetAtt": [
                            "ALB",
                            "DNSName"
                        ]
                    },
                    "HostedZoneId": {
                        "Fn::GetAtt": [
                            "ALB",
                            "CanonicalHostedZoneID"
                        ]
                    }
                },
                "HostedZoneId": {"Ref": "HostedZoneId"},
                "Name": {"Ref": "EnvironmentHost"},
                "Type": "A"
            }
        },
        "ALB": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Name": "GSServiceALB",
                "Scheme": "internet-facing",
                "SecurityGroups": ["sg-c6a878b8"],
                "Subnets": [
                    "subnet-22ee1b78",
                    "subnet-849cb0e1"
                ],
                "Type": "application",
                "IpAddressType": "ipv4"
            }
        },
        "DefaultTaskDefinition": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Volumes": [],
                "Family": "GSServDefaultTaskDefinition",
                "NetworkMode": "bridge",
                "ContainerDefinitions": [
                    {
                        "Command": ["/start.sh"],
                        "Cpu": 0,
                        "EntryPoint": ["/bin/bash"],
                        "Environment": [],
                        "Image": {"Ref": "DefaultTaskImage"},
                        "MemoryReservation": 64,
                        "Name": {"Ref": "DefaultTaskContainerName"},
                        "PortMappings": [
                            {
                                "ContainerPort": 80,
                                "HostPort": 0,
                                "Protocol": "tcp"
                            }
                        ]
                    }
                ]
            }
        },
        "GSTestServiceTaskDefinition": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Volumes": [],
                "Family": "GSTestServiceTaskDefinition",
                "NetworkMode": "bridge",
                "ContainerDefinitions": [
                    {
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": "gstestcluster",
                                "awslogs-region": "us-east-1",
                                "awslogs-stream-prefix": "gs-service-test"
                            }
                        },
                        "Command": ["catalina.sh run"],
                        "Cpu": 1024,
                        "EntryPoint": [
                            "/bin/bash",
                            "-c"
                        ],
                        "WorkingDirectory": "/usr/share/tomcat9/bin",
                        "Environment": [
                            {
                                "Name": "EU_FLORA_ESSI_GI_PROJECT_EXECUTION",
                                "Value": "mixed"
                            },
                            {
                                "Name": "JAVA_OPTS",
                                "Value": {"Ref": "JavaOpts"}
                            }
                        ],
                        "Image": {"Ref": "GSServiceImage"},
                        "MemoryReservation": 1024,
                        "Name": {"Ref": "GSTestServiceTaskContainerName"},
                        "PortMappings": [
                            {
                                "ContainerPort": 8080,
                                "HostPort": 0,
                                "Protocol": "tcp"
                            }
                        ]
                    }
                ]
            }
        },
        "GSTestService": {
            "Type": "AWS::ECS::Service",
            "DependsOn": [
                "ALBListener80",
                "GSTestServiceTaskDefinition"
            ],
            "Properties": {
                "Cluster": {"Ref": "ECSCluster"},
                "DeploymentConfiguration": {
                    "MaximumPercent": 200,
                    "MinimumHealthyPercent": 50
                },
                "DesiredCount": 1,
                "HealthCheckGracePeriodSeconds": 300,
                "LaunchType": "EC2",
                "LoadBalancers": [
                    {
                        "ContainerName": {"Ref": "GSTestServiceTaskContainerName"},
                        "ContainerPort": 8080,
                        "TargetGroupArn": {"Ref": "ALBGSServiceTestTargetGroup"}
                    }
                ],
                "PlacementConstraints": [],
                "Role": "arn:aws:iam::672812193635:role/ecsServiceRole",
                "PlacementStrategies": [
                    {
                        "Type": "spread",
                        "Field": "attribute:ecs.availability-zone"
                    },
                    {
                        "Field": "instanceId",
                        "Type": "spread"
                    }
                ],
                "ServiceName": "GSTestService",
                "TaskDefinition": {"Ref": "GSTestServiceTaskDefinition"}
            }
        },
        "DefaultService": {
            "Type": "AWS::ECS::Service",
            "DependsOn": [
                "ALBListener80",
                "DefaultTaskDefinition"
            ],
            "Properties": {
                "Cluster": {"Ref": "ECSCluster"},
                "DeploymentConfiguration": {
                    "MaximumPercent": 200,
                    "MinimumHealthyPercent": 50
                },
                "DesiredCount": 0,
                "HealthCheckGracePeriodSeconds": 30,
                "LaunchType": "EC2",
                "LoadBalancers": [
                    {
                        "ContainerName": {"Ref": "DefaultTaskContainerName"},
                        "ContainerPort": 80,
                        "TargetGroupArn": {"Ref": "ALBListenerDefaultTargetGroup"}
                    }
                ],
                "PlacementConstraints": [],
                "Role": "arn:aws:iam::672812193635:role/ecsServiceRole",
                "PlacementStrategies": [
                    {
                        "Type": "spread",
                        "Field": "attribute:ecs.availability-zone"
                    },
                    {
                        "Field": "instanceId",
                        "Type": "spread"
                    }
                ],
                "ServiceName": "DefaultGSService",
                "TaskDefinition": {"Ref": "DefaultTaskDefinition"}
            }
        },
        "ALBListenerDefaultTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "DependsOn": ["ALB"],
            "Properties": {
                "HealthCheckIntervalSeconds": 10,
                "HealthCheckPort": "traffic-port",
                "HealthCheckProtocol": "HTTP",
                "HealthCheckPath": "/",
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 2,
                "Matcher": {"HttpCode": "200"},
                "Name": "DefaultGSServiceTG",
                "Port": 80,
                "Protocol": "HTTP",
                "TargetType": "instance",
                "UnhealthyThresholdCount": 2,
                "VpcId": {"Ref": "VpcId"}
            }
        },
        "ALBGSServiceTestTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "DependsOn": ["ALB"],
            "Properties": {
                "HealthCheckIntervalSeconds": 30,
                "HealthCheckPort": "traffic-port",
                "HealthCheckProtocol": "HTTP",
                "HealthCheckPath": "/gs-service/services/health/check",
                "HealthCheckTimeoutSeconds": 5,
                "HealthyThresholdCount": 2,
                "Matcher": {"HttpCode": "200"},
                "Name": "GSServiceTestTargetGroup",
                "Port": 80,
                "Protocol": "HTTP",
                "TargetType": "instance",
                "UnhealthyThresholdCount": 2,
                "VpcId": {"Ref": "VpcId"}
            }
        },
        "GSServiceRule80": {
            "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
            "DependsOn": [
                "ALBListener80",
                "ALBGSServiceTestTargetGroup"
            ],
            "Properties": {
                "Actions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {"Ref": "ALBGSServiceTestTargetGroup"}
                    }
                ],
                "Conditions": [
                    {
                        "Field": "host-header",
                        "Values": [
                            {"Ref": "EnvironmentHost"}
                        ]
                    }
                ],
                "ListenerArn": {"Ref": "ALBListener80"},
                "Priority": 1
            }
        },
        "GSServiceRule443": {
            "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
            "DependsOn": [
                "ALBListener443",
                "ALBGSServiceTestTargetGroup"
            ],
            "Properties": {
                "Actions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {"Ref": "ALBGSServiceTestTargetGroup"}
                    }
                ],
                "Conditions": [
                    {
                        "Field": "host-header",
                        "Values": [
                            {"Ref": "EnvironmentHost"}
                        ]
                    }
                ],
                "ListenerArn": {"Ref": "ALBListener443"},
                "Priority": 1
            }
        },
        "ALBListener80": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "DependsOn": ["ALBListenerDefaultTargetGroup"],
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {"Ref": "ALBListenerDefaultTargetGroup"}
                    }
                ],
                "LoadBalancerArn": {"Ref": "ALB"},
                "Port": "80",
                "Protocol": "HTTP"
            }
        },
        "ALBListener443": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "DependsOn": ["ALBListenerDefaultTargetGroup"],
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {"Ref": "ALBListenerDefaultTargetGroup"}
                    }
                ],
                "LoadBalancerArn": {"Ref": "ALB"},
                "Certificates": [
                    {"CertificateArn": "arn:aws:acm:us-east-1:672812193635:certificate/86c6aa1e-8bf2-4967-99dd-84e18d9cb7af"}
                ],
                "Port": "443",
                "Protocol": "HTTPS",
                "SslPolicy": "ELBSecurityPolicy-2016-08"
            }
        },
        "ECSCluster": {
            "Type": "AWS::ECS::Cluster",
            "Properties": {
                "ClusterName": {"Ref": "EcsClusterName"}
            }
        },
        "Vpc": {
            "Condition": "CreateSubnet1",
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {"Ref": "VpcCidr"},
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true"
            }
        },
        "PubSubnetAz1": {
            "Condition": "CreateSubnet1",
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {"Ref": "Vpc"},
                "CidrBlock": {"Ref": "SubnetCidr1"},
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {"Ref": "VpcAvailabilityZones"}
                    ]
                }
            }
        },
        "PubSubnetAz2": {
            "Condition": "CreateSubnet2",
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {"Ref": "Vpc"},
                "CidrBlock": {"Ref": "SubnetCidr2"},
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {"Ref": "VpcAvailabilityZones"}
                    ]
                }
            }
        },
        "PubSubnetAz3": {
            "Condition": "CreateSubnet3",
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {"Ref": "Vpc"},
                "CidrBlock": {"Ref": "SubnetCidr3"},
                "AvailabilityZone": {
                    "Fn::Select": [
                        2,
                        {"Ref": "VpcAvailabilityZones"}
                    ]
                }
            }
        },
        "InternetGateway": {
            "Condition": "CreateSubnet1",
            "Type": "AWS::EC2::InternetGateway"
        },
        "AttachGateway": {
            "Condition": "CreateSubnet1",
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {"Ref": "Vpc"},
                "InternetGatewayId": {"Ref": "InternetGateway"}
            }
        },
        "RouteViaIgw": {
            "Condition": "CreateSubnet1",
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {"Ref": "Vpc"}
            }
        },
        "PublicRouteViaIgw": {
            "Condition": "CreateSubnet1",
            "Type": "AWS::EC2::Route",
            "DependsOn": "AttachGateway",
            "Properties": {
                "RouteTableId": {"Ref": "RouteViaIgw"},
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {"Ref": "InternetGateway"}
            }
        },
        "PubSubnet1RouteTableAssociation": {
            "Condition": "CreateSubnet1",
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {"Ref": "PubSubnetAz1"},
                "RouteTableId": {"Ref": "RouteViaIgw"}
            }
        },
        "PubSubnet2RouteTableAssociation": {
            "Condition": "CreateSubnet2",
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {"Ref": "PubSubnetAz2"},
                "RouteTableId": {"Ref": "RouteViaIgw"}
            }
        },
        "PubSubnet3RouteTableAssociation": {
            "Condition": "CreateSubnet3",
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {"Ref": "PubSubnetAz3"},
                "RouteTableId": {"Ref": "RouteViaIgw"}
            }
        },
        "EcsSecurityGroup": {
            "Condition": "CreateNewSecurityGroup",
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "ECS Allowed Ports",
                "VpcId": {
                    "Fn::If": [
                        "CreateSubnet1",
                        {"Ref": "Vpc"},
                        {"Ref": "VpcId"}
                    ]
                },
                "SecurityGroupIngress": {
                    "IpProtocol": "tcp",
                    "FromPort": {"Ref": "SecurityIngressFromPort"},
                    "ToPort": {"Ref": "SecurityIngressToPort"},
                    "CidrIp": {"Ref": "SecurityIngressCidrIp"}
                }
            }
        },
        "EcsInstanceLc": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": {"Ref": "EcsAmiId"},
                "InstanceType": {"Ref": "EcsInstanceType"},
                "AssociatePublicIpAddress": true,
                "IamInstanceProfile": {"Ref": "IamRoleInstanceProfile"},
                "KeyName": {
                    "Fn::If": [
                        "CreateEC2LCWithKeyPair",
                        {"Ref": "KeyName"},
                        {"Ref": "AWS::NoValue"}
                    ]
                },
                "SecurityGroups": [
                    {
                        "Fn::If": [
                            "CreateNewSecurityGroup",
                            {"Ref": "EcsSecurityGroup"},
                            {"Ref": "SecurityGroupId"}
                        ]
                    }
                ],
                "BlockDeviceMappings": {
                    "Fn::If": [
                        "CreateEbsVolume",
                        [
                            {
                                "DeviceName": {"Ref": "DeviceName"},
                                "Ebs": {
                                    "VolumeSize": {"Ref": "EbsVolumeSize"},
                                    "VolumeType": {"Ref": "EbsVolumeType"}
                                }
                            }
                        ],
                        {"Ref": "AWS::NoValue"}
                    ]
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",
                            [
                                "#!/bin/bash",
                                {"Fn::Sub": "echo ECS_CLUSTER=${EcsClusterName} >> /etc/ecs/ecs.config"},
                                "\necho \"*/1 * * * * docker rm \\$(docker ps -aq --filter status=exited)\" >> mycron\n",
                                "\ncrontab mycron\n",
                                "\nrm mycron\n"
                            ]
                        ]
                    }
                },
                "SpotPrice": "0.04"
            }
        },
        "EcsInstanceAsg": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": {
                    "Fn::If": [
                        "CreateSubnet1",
                        {
                            "Fn::If": [
                                "CreateSubnet2",
                                {
                                    "Fn::If": [
                                        "CreateSubnet3",
                                        [
                                            {"Fn::Sub": "${PubSubnetAz1}, ${PubSubnetAz2}, ${PubSubnetAz3}"}
                                        ],
                                        [
                                            {"Fn::Sub": "${PubSubnetAz1}, ${PubSubnetAz2}"}
                                        ]
                                    ]
                                },
                                [
                                    {"Fn::Sub": "${PubSubnetAz1}"}
                                ]
                            ]
                        },
                        {"Ref": "SubnetIds"}
                    ]
                },
                "LaunchConfigurationName": {"Ref": "EcsInstanceLc"},
                "MinSize": {"Ref": "AsgSize"},
                "MaxSize": {"Ref": "AsgSize"},
                "DesiredCapacity": {"Ref": "AsgSize"},
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {"Fn::Sub": "ECS Instance - ${AWS::StackName}"},
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Description",
                        "Value": "This instance is the part of the Auto Scaling group which was created through ECS Console",
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        }
    },
    "Outputs": {
        "ClusterName": {
            "Description": "Created ECS Cluster Name",
            "Value": {"Ref": "EcsClusterName"}
        },
        "EcsInstanceAsgName": {
            "Description": "Auto Scaling Group Name for ECS Instances",
            "Value": {"Ref": "EcsInstanceAsg"}
        },
        "UsedByECSCreateCluster": {
            "Description": "Flag used by EC2 Container Service Create Cluster Wizard",
            "Value": "true"
        },
        "GSServiceAppLB": {
            "Description": "The application load balancer of all GSService environments",
            "Value": {"Ref": "ALB"},
            "Export": {
                "Name": {"Fn::Sub": "${AWS::StackName}-GSServiceAppLB"}
            }
        },
        "GSServiceAppLBListener80": {
            "Description": "The listener of port 80 of application load balancer of all GSService environments",
            "Value": {"Ref": "ALBListener80"},
            "Export": {
                "Name": {"Fn::Sub": "${AWS::StackName}-GSServiceAppLBListener80"}
            }
        },
        "GSServiceAppLBListener443": {
            "Description": "The listener of port 443 of application load balancer of all GSService environments",
            "Value": {"Ref": "ALBListener443"},
            "Export": {
                "Name": {"Fn::Sub": "${AWS::StackName}-GSServiceAppLBListener443"}
            }
        },
        "GSServiceAppLBDNSName": {
            "Description": "The dns name of application load balancer of all GSService environments",
            "Value": {
                "Fn::GetAtt": [
                    "ALB",
                    "DNSName"
                ]
            },
            "Export": {
                "Name": {"Fn::Sub": "${AWS::StackName}-GSServiceAppLBDNSName"}
            }
        },
        "GSServiceAppLBCanonicalHostedZoneID": {
            "Description": "The GSServiceAppLBCanonicalHostedZoneID of application load balancer of all GSService environments",
            "Value": {
                "Fn::GetAtt": [
                    "ALB",
                    "CanonicalHostedZoneID"
                ]
            },
            "Export": {
                "Name": {"Fn::Sub": "${AWS::StackName}-GSServiceAppLBCanonicalHostedZoneID"}
            }
        }
    }
}