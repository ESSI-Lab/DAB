//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.02.26 at 04:55:57 PM AST 
//


package eu.essi_lab.jaxb.iso19139_2.gmi.v_1_0;

/*-
 * #%L
 * Discovery and Access Broker (DAB) Community Edition (CE)
 * %%
 * Copyright (C) 2021 - 2024 National Research Council of Italy (CNR)/Institute of Atmospheric Pollution Research (IIA)/ESSI-Lab
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import net.opengis.iso19139.gco.v_20060504.AbstractObjectType;
import net.opengis.iso19139.gco.v_20060504.CharacterStringPropertyType;
import net.opengis.iso19139.gmd.v_20060504.EXExtentPropertyType;
import net.opengis.iso19139.gmd.v_20060504.MDIdentifierPropertyType;


/**
 * Description: Describes the characteristics, spatial and temporal extent of the intended object to be observed  - shortName: TargetId
 * 
 * <p>Java class for MI_Objective_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MI_Objective_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="identifier" type="{http://www.isotc211.org/2005/gmd}MD_Identifier_PropertyType" maxOccurs="unbounded"/&gt;
 *         &lt;element name="priority" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="type" type="{http://www.isotc211.org/2005/gmi}MI_ObjectiveTypeCode_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="function" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="extent" type="{http://www.isotc211.org/2005/gmd}EX_Extent_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="pass" type="{http://www.isotc211.org/2005/gmi}MI_PlatformPass_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="sensingInstrument" type="{http://www.isotc211.org/2005/gmi}MI_Instrument_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="objectiveOccurrence" type="{http://www.isotc211.org/2005/gmi}MI_Event_PropertyType" maxOccurs="unbounded"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MI_Objective_Type", propOrder = {
    "identifier",
    "priority",
    "type",
    "function",
    "extent",
    "pass",
    "sensingInstrument",
    "objectiveOccurrence"
})
public class MIObjectiveType
    extends AbstractObjectType
    implements Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    @XmlElement(required = true)
    protected List<MDIdentifierPropertyType> identifier;
    protected CharacterStringPropertyType priority;
    protected List<MIObjectiveTypeCodePropertyType> type;
    protected List<CharacterStringPropertyType> function;
    protected List<EXExtentPropertyType> extent;
    protected List<MIPlatformPassPropertyType> pass;
    protected List<MIInstrumentPropertyType> sensingInstrument;
    @XmlElement(required = true)
    protected List<MIEventPropertyType> objectiveOccurrence;

    /**
     * Gets the value of the identifier property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the identifier property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getIdentifier().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MDIdentifierPropertyType }
     * 
     * 
     */
    public List<MDIdentifierPropertyType> getIdentifier() {
        if (identifier == null) {
            identifier = new ArrayList<MDIdentifierPropertyType>();
        }
        return this.identifier;
    }

    public boolean isSetIdentifier() {
        return ((this.identifier!= null)&&(!this.identifier.isEmpty()));
    }

    public void unsetIdentifier() {
        this.identifier = null;
    }

    /**
     * Gets the value of the priority property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getPriority() {
        return priority;
    }

    /**
     * Sets the value of the priority property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setPriority(CharacterStringPropertyType value) {
        this.priority = value;
    }

    public boolean isSetPriority() {
        return (this.priority!= null);
    }

    /**
     * Gets the value of the type property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the type property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getType().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MIObjectiveTypeCodePropertyType }
     * 
     * 
     */
    public List<MIObjectiveTypeCodePropertyType> getType() {
        if (type == null) {
            type = new ArrayList<MIObjectiveTypeCodePropertyType>();
        }
        return this.type;
    }

    public boolean isSetType() {
        return ((this.type!= null)&&(!this.type.isEmpty()));
    }

    public void unsetType() {
        this.type = null;
    }

    /**
     * Gets the value of the function property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the function property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFunction().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CharacterStringPropertyType }
     * 
     * 
     */
    public List<CharacterStringPropertyType> getFunction() {
        if (function == null) {
            function = new ArrayList<CharacterStringPropertyType>();
        }
        return this.function;
    }

    public boolean isSetFunction() {
        return ((this.function!= null)&&(!this.function.isEmpty()));
    }

    public void unsetFunction() {
        this.function = null;
    }

    /**
     * Gets the value of the extent property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the extent property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getExtent().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link EXExtentPropertyType }
     * 
     * 
     */
    public List<EXExtentPropertyType> getExtent() {
        if (extent == null) {
            extent = new ArrayList<EXExtentPropertyType>();
        }
        return this.extent;
    }

    public boolean isSetExtent() {
        return ((this.extent!= null)&&(!this.extent.isEmpty()));
    }

    public void unsetExtent() {
        this.extent = null;
    }

    /**
     * Gets the value of the pass property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the pass property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPass().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MIPlatformPassPropertyType }
     * 
     * 
     */
    public List<MIPlatformPassPropertyType> getPass() {
        if (pass == null) {
            pass = new ArrayList<MIPlatformPassPropertyType>();
        }
        return this.pass;
    }

    public boolean isSetPass() {
        return ((this.pass!= null)&&(!this.pass.isEmpty()));
    }

    public void unsetPass() {
        this.pass = null;
    }

    /**
     * Gets the value of the sensingInstrument property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the sensingInstrument property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSensingInstrument().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MIInstrumentPropertyType }
     * 
     * 
     */
    public List<MIInstrumentPropertyType> getSensingInstrument() {
        if (sensingInstrument == null) {
            sensingInstrument = new ArrayList<MIInstrumentPropertyType>();
        }
        return this.sensingInstrument;
    }

    public boolean isSetSensingInstrument() {
        return ((this.sensingInstrument!= null)&&(!this.sensingInstrument.isEmpty()));
    }

    public void unsetSensingInstrument() {
        this.sensingInstrument = null;
    }

    /**
     * Gets the value of the objectiveOccurrence property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the objectiveOccurrence property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getObjectiveOccurrence().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MIEventPropertyType }
     * 
     * 
     */
    public List<MIEventPropertyType> getObjectiveOccurrence() {
        if (objectiveOccurrence == null) {
            objectiveOccurrence = new ArrayList<MIEventPropertyType>();
        }
        return this.objectiveOccurrence;
    }

    public boolean isSetObjectiveOccurrence() {
        return ((this.objectiveOccurrence!= null)&&(!this.objectiveOccurrence.isEmpty()));
    }

    public void unsetObjectiveOccurrence() {
        this.objectiveOccurrence = null;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<MDIdentifierPropertyType> theIdentifier;
            theIdentifier = (this.isSetIdentifier()?this.getIdentifier():null);
            strategy.appendField(locator, this, "identifier", buffer, theIdentifier, this.isSetIdentifier());
        }
        {
            CharacterStringPropertyType thePriority;
            thePriority = this.getPriority();
            strategy.appendField(locator, this, "priority", buffer, thePriority, this.isSetPriority());
        }
        {
            List<MIObjectiveTypeCodePropertyType> theType;
            theType = (this.isSetType()?this.getType():null);
            strategy.appendField(locator, this, "type", buffer, theType, this.isSetType());
        }
        {
            List<CharacterStringPropertyType> theFunction;
            theFunction = (this.isSetFunction()?this.getFunction():null);
            strategy.appendField(locator, this, "function", buffer, theFunction, this.isSetFunction());
        }
        {
            List<EXExtentPropertyType> theExtent;
            theExtent = (this.isSetExtent()?this.getExtent():null);
            strategy.appendField(locator, this, "extent", buffer, theExtent, this.isSetExtent());
        }
        {
            List<MIPlatformPassPropertyType> thePass;
            thePass = (this.isSetPass()?this.getPass():null);
            strategy.appendField(locator, this, "pass", buffer, thePass, this.isSetPass());
        }
        {
            List<MIInstrumentPropertyType> theSensingInstrument;
            theSensingInstrument = (this.isSetSensingInstrument()?this.getSensingInstrument():null);
            strategy.appendField(locator, this, "sensingInstrument", buffer, theSensingInstrument, this.isSetSensingInstrument());
        }
        {
            List<MIEventPropertyType> theObjectiveOccurrence;
            theObjectiveOccurrence = (this.isSetObjectiveOccurrence()?this.getObjectiveOccurrence():null);
            strategy.appendField(locator, this, "objectiveOccurrence", buffer, theObjectiveOccurrence, this.isSetObjectiveOccurrence());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MIObjectiveType that = ((MIObjectiveType) object);
        {
            List<MDIdentifierPropertyType> lhsIdentifier;
            lhsIdentifier = (this.isSetIdentifier()?this.getIdentifier():null);
            List<MDIdentifierPropertyType> rhsIdentifier;
            rhsIdentifier = (that.isSetIdentifier()?that.getIdentifier():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier, this.isSetIdentifier(), that.isSetIdentifier())) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsPriority;
            lhsPriority = this.getPriority();
            CharacterStringPropertyType rhsPriority;
            rhsPriority = that.getPriority();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "priority", lhsPriority), LocatorUtils.property(thatLocator, "priority", rhsPriority), lhsPriority, rhsPriority, this.isSetPriority(), that.isSetPriority())) {
                return false;
            }
        }
        {
            List<MIObjectiveTypeCodePropertyType> lhsType;
            lhsType = (this.isSetType()?this.getType():null);
            List<MIObjectiveTypeCodePropertyType> rhsType;
            rhsType = (that.isSetType()?that.getType():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType, this.isSetType(), that.isSetType())) {
                return false;
            }
        }
        {
            List<CharacterStringPropertyType> lhsFunction;
            lhsFunction = (this.isSetFunction()?this.getFunction():null);
            List<CharacterStringPropertyType> rhsFunction;
            rhsFunction = (that.isSetFunction()?that.getFunction():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "function", lhsFunction), LocatorUtils.property(thatLocator, "function", rhsFunction), lhsFunction, rhsFunction, this.isSetFunction(), that.isSetFunction())) {
                return false;
            }
        }
        {
            List<EXExtentPropertyType> lhsExtent;
            lhsExtent = (this.isSetExtent()?this.getExtent():null);
            List<EXExtentPropertyType> rhsExtent;
            rhsExtent = (that.isSetExtent()?that.getExtent():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "extent", lhsExtent), LocatorUtils.property(thatLocator, "extent", rhsExtent), lhsExtent, rhsExtent, this.isSetExtent(), that.isSetExtent())) {
                return false;
            }
        }
        {
            List<MIPlatformPassPropertyType> lhsPass;
            lhsPass = (this.isSetPass()?this.getPass():null);
            List<MIPlatformPassPropertyType> rhsPass;
            rhsPass = (that.isSetPass()?that.getPass():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "pass", lhsPass), LocatorUtils.property(thatLocator, "pass", rhsPass), lhsPass, rhsPass, this.isSetPass(), that.isSetPass())) {
                return false;
            }
        }
        {
            List<MIInstrumentPropertyType> lhsSensingInstrument;
            lhsSensingInstrument = (this.isSetSensingInstrument()?this.getSensingInstrument():null);
            List<MIInstrumentPropertyType> rhsSensingInstrument;
            rhsSensingInstrument = (that.isSetSensingInstrument()?that.getSensingInstrument():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sensingInstrument", lhsSensingInstrument), LocatorUtils.property(thatLocator, "sensingInstrument", rhsSensingInstrument), lhsSensingInstrument, rhsSensingInstrument, this.isSetSensingInstrument(), that.isSetSensingInstrument())) {
                return false;
            }
        }
        {
            List<MIEventPropertyType> lhsObjectiveOccurrence;
            lhsObjectiveOccurrence = (this.isSetObjectiveOccurrence()?this.getObjectiveOccurrence():null);
            List<MIEventPropertyType> rhsObjectiveOccurrence;
            rhsObjectiveOccurrence = (that.isSetObjectiveOccurrence()?that.getObjectiveOccurrence():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "objectiveOccurrence", lhsObjectiveOccurrence), LocatorUtils.property(thatLocator, "objectiveOccurrence", rhsObjectiveOccurrence), lhsObjectiveOccurrence, rhsObjectiveOccurrence, this.isSetObjectiveOccurrence(), that.isSetObjectiveOccurrence())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<MDIdentifierPropertyType> theIdentifier;
            theIdentifier = (this.isSetIdentifier()?this.getIdentifier():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier, this.isSetIdentifier());
        }
        {
            CharacterStringPropertyType thePriority;
            thePriority = this.getPriority();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "priority", thePriority), currentHashCode, thePriority, this.isSetPriority());
        }
        {
            List<MIObjectiveTypeCodePropertyType> theType;
            theType = (this.isSetType()?this.getType():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType, this.isSetType());
        }
        {
            List<CharacterStringPropertyType> theFunction;
            theFunction = (this.isSetFunction()?this.getFunction():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "function", theFunction), currentHashCode, theFunction, this.isSetFunction());
        }
        {
            List<EXExtentPropertyType> theExtent;
            theExtent = (this.isSetExtent()?this.getExtent():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "extent", theExtent), currentHashCode, theExtent, this.isSetExtent());
        }
        {
            List<MIPlatformPassPropertyType> thePass;
            thePass = (this.isSetPass()?this.getPass():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "pass", thePass), currentHashCode, thePass, this.isSetPass());
        }
        {
            List<MIInstrumentPropertyType> theSensingInstrument;
            theSensingInstrument = (this.isSetSensingInstrument()?this.getSensingInstrument():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sensingInstrument", theSensingInstrument), currentHashCode, theSensingInstrument, this.isSetSensingInstrument());
        }
        {
            List<MIEventPropertyType> theObjectiveOccurrence;
            theObjectiveOccurrence = (this.isSetObjectiveOccurrence()?this.getObjectiveOccurrence():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "objectiveOccurrence", theObjectiveOccurrence), currentHashCode, theObjectiveOccurrence, this.isSetObjectiveOccurrence());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MIObjectiveType) {
            final MIObjectiveType copy = ((MIObjectiveType) draftCopy);
            {
                Boolean identifierShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetIdentifier());
                if (identifierShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MDIdentifierPropertyType> sourceIdentifier;
                    sourceIdentifier = (this.isSetIdentifier()?this.getIdentifier():null);
                    @SuppressWarnings("unchecked")
                    List<MDIdentifierPropertyType> copyIdentifier = ((List<MDIdentifierPropertyType> ) strategy.copy(LocatorUtils.property(locator, "identifier", sourceIdentifier), sourceIdentifier, this.isSetIdentifier()));
                    copy.unsetIdentifier();
                    if (copyIdentifier!= null) {
                        List<MDIdentifierPropertyType> uniqueIdentifierl = copy.getIdentifier();
                        uniqueIdentifierl.addAll(copyIdentifier);
                    }
                } else {
                    if (identifierShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetIdentifier();
                    }
                }
            }
            {
                Boolean priorityShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetPriority());
                if (priorityShouldBeCopiedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType sourcePriority;
                    sourcePriority = this.getPriority();
                    CharacterStringPropertyType copyPriority = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "priority", sourcePriority), sourcePriority, this.isSetPriority()));
                    copy.setPriority(copyPriority);
                } else {
                    if (priorityShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.priority = null;
                    }
                }
            }
            {
                Boolean typeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetType());
                if (typeShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MIObjectiveTypeCodePropertyType> sourceType;
                    sourceType = (this.isSetType()?this.getType():null);
                    @SuppressWarnings("unchecked")
                    List<MIObjectiveTypeCodePropertyType> copyType = ((List<MIObjectiveTypeCodePropertyType> ) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType, this.isSetType()));
                    copy.unsetType();
                    if (copyType!= null) {
                        List<MIObjectiveTypeCodePropertyType> uniqueTypel = copy.getType();
                        uniqueTypel.addAll(copyType);
                    }
                } else {
                    if (typeShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetType();
                    }
                }
            }
            {
                Boolean functionShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetFunction());
                if (functionShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<CharacterStringPropertyType> sourceFunction;
                    sourceFunction = (this.isSetFunction()?this.getFunction():null);
                    @SuppressWarnings("unchecked")
                    List<CharacterStringPropertyType> copyFunction = ((List<CharacterStringPropertyType> ) strategy.copy(LocatorUtils.property(locator, "function", sourceFunction), sourceFunction, this.isSetFunction()));
                    copy.unsetFunction();
                    if (copyFunction!= null) {
                        List<CharacterStringPropertyType> uniqueFunctionl = copy.getFunction();
                        uniqueFunctionl.addAll(copyFunction);
                    }
                } else {
                    if (functionShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetFunction();
                    }
                }
            }
            {
                Boolean extentShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetExtent());
                if (extentShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<EXExtentPropertyType> sourceExtent;
                    sourceExtent = (this.isSetExtent()?this.getExtent():null);
                    @SuppressWarnings("unchecked")
                    List<EXExtentPropertyType> copyExtent = ((List<EXExtentPropertyType> ) strategy.copy(LocatorUtils.property(locator, "extent", sourceExtent), sourceExtent, this.isSetExtent()));
                    copy.unsetExtent();
                    if (copyExtent!= null) {
                        List<EXExtentPropertyType> uniqueExtentl = copy.getExtent();
                        uniqueExtentl.addAll(copyExtent);
                    }
                } else {
                    if (extentShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetExtent();
                    }
                }
            }
            {
                Boolean passShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetPass());
                if (passShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MIPlatformPassPropertyType> sourcePass;
                    sourcePass = (this.isSetPass()?this.getPass():null);
                    @SuppressWarnings("unchecked")
                    List<MIPlatformPassPropertyType> copyPass = ((List<MIPlatformPassPropertyType> ) strategy.copy(LocatorUtils.property(locator, "pass", sourcePass), sourcePass, this.isSetPass()));
                    copy.unsetPass();
                    if (copyPass!= null) {
                        List<MIPlatformPassPropertyType> uniquePassl = copy.getPass();
                        uniquePassl.addAll(copyPass);
                    }
                } else {
                    if (passShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetPass();
                    }
                }
            }
            {
                Boolean sensingInstrumentShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetSensingInstrument());
                if (sensingInstrumentShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MIInstrumentPropertyType> sourceSensingInstrument;
                    sourceSensingInstrument = (this.isSetSensingInstrument()?this.getSensingInstrument():null);
                    @SuppressWarnings("unchecked")
                    List<MIInstrumentPropertyType> copySensingInstrument = ((List<MIInstrumentPropertyType> ) strategy.copy(LocatorUtils.property(locator, "sensingInstrument", sourceSensingInstrument), sourceSensingInstrument, this.isSetSensingInstrument()));
                    copy.unsetSensingInstrument();
                    if (copySensingInstrument!= null) {
                        List<MIInstrumentPropertyType> uniqueSensingInstrumentl = copy.getSensingInstrument();
                        uniqueSensingInstrumentl.addAll(copySensingInstrument);
                    }
                } else {
                    if (sensingInstrumentShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetSensingInstrument();
                    }
                }
            }
            {
                Boolean objectiveOccurrenceShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetObjectiveOccurrence());
                if (objectiveOccurrenceShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MIEventPropertyType> sourceObjectiveOccurrence;
                    sourceObjectiveOccurrence = (this.isSetObjectiveOccurrence()?this.getObjectiveOccurrence():null);
                    @SuppressWarnings("unchecked")
                    List<MIEventPropertyType> copyObjectiveOccurrence = ((List<MIEventPropertyType> ) strategy.copy(LocatorUtils.property(locator, "objectiveOccurrence", sourceObjectiveOccurrence), sourceObjectiveOccurrence, this.isSetObjectiveOccurrence()));
                    copy.unsetObjectiveOccurrence();
                    if (copyObjectiveOccurrence!= null) {
                        List<MIEventPropertyType> uniqueObjectiveOccurrencel = copy.getObjectiveOccurrence();
                        uniqueObjectiveOccurrencel.addAll(copyObjectiveOccurrence);
                    }
                } else {
                    if (objectiveOccurrenceShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetObjectiveOccurrence();
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MIObjectiveType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof MIObjectiveType) {
            final MIObjectiveType target = this;
            final MIObjectiveType leftObject = ((MIObjectiveType) left);
            final MIObjectiveType rightObject = ((MIObjectiveType) right);
            {
                Boolean identifierShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetIdentifier(), rightObject.isSetIdentifier());
                if (identifierShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MDIdentifierPropertyType> lhsIdentifier;
                    lhsIdentifier = (leftObject.isSetIdentifier()?leftObject.getIdentifier():null);
                    List<MDIdentifierPropertyType> rhsIdentifier;
                    rhsIdentifier = (rightObject.isSetIdentifier()?rightObject.getIdentifier():null);
                    List<MDIdentifierPropertyType> mergedIdentifier = ((List<MDIdentifierPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "identifier", lhsIdentifier), LocatorUtils.property(rightLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier, leftObject.isSetIdentifier(), rightObject.isSetIdentifier()));
                    target.unsetIdentifier();
                    if (mergedIdentifier!= null) {
                        List<MDIdentifierPropertyType> uniqueIdentifierl = target.getIdentifier();
                        uniqueIdentifierl.addAll(mergedIdentifier);
                    }
                } else {
                    if (identifierShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetIdentifier();
                    }
                }
            }
            {
                Boolean priorityShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetPriority(), rightObject.isSetPriority());
                if (priorityShouldBeMergedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType lhsPriority;
                    lhsPriority = leftObject.getPriority();
                    CharacterStringPropertyType rhsPriority;
                    rhsPriority = rightObject.getPriority();
                    CharacterStringPropertyType mergedPriority = ((CharacterStringPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "priority", lhsPriority), LocatorUtils.property(rightLocator, "priority", rhsPriority), lhsPriority, rhsPriority, leftObject.isSetPriority(), rightObject.isSetPriority()));
                    target.setPriority(mergedPriority);
                } else {
                    if (priorityShouldBeMergedAndSet == Boolean.FALSE) {
                        target.priority = null;
                    }
                }
            }
            {
                Boolean typeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetType(), rightObject.isSetType());
                if (typeShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MIObjectiveTypeCodePropertyType> lhsType;
                    lhsType = (leftObject.isSetType()?leftObject.getType():null);
                    List<MIObjectiveTypeCodePropertyType> rhsType;
                    rhsType = (rightObject.isSetType()?rightObject.getType():null);
                    List<MIObjectiveTypeCodePropertyType> mergedType = ((List<MIObjectiveTypeCodePropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "type", lhsType), LocatorUtils.property(rightLocator, "type", rhsType), lhsType, rhsType, leftObject.isSetType(), rightObject.isSetType()));
                    target.unsetType();
                    if (mergedType!= null) {
                        List<MIObjectiveTypeCodePropertyType> uniqueTypel = target.getType();
                        uniqueTypel.addAll(mergedType);
                    }
                } else {
                    if (typeShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetType();
                    }
                }
            }
            {
                Boolean functionShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetFunction(), rightObject.isSetFunction());
                if (functionShouldBeMergedAndSet == Boolean.TRUE) {
                    List<CharacterStringPropertyType> lhsFunction;
                    lhsFunction = (leftObject.isSetFunction()?leftObject.getFunction():null);
                    List<CharacterStringPropertyType> rhsFunction;
                    rhsFunction = (rightObject.isSetFunction()?rightObject.getFunction():null);
                    List<CharacterStringPropertyType> mergedFunction = ((List<CharacterStringPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "function", lhsFunction), LocatorUtils.property(rightLocator, "function", rhsFunction), lhsFunction, rhsFunction, leftObject.isSetFunction(), rightObject.isSetFunction()));
                    target.unsetFunction();
                    if (mergedFunction!= null) {
                        List<CharacterStringPropertyType> uniqueFunctionl = target.getFunction();
                        uniqueFunctionl.addAll(mergedFunction);
                    }
                } else {
                    if (functionShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetFunction();
                    }
                }
            }
            {
                Boolean extentShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetExtent(), rightObject.isSetExtent());
                if (extentShouldBeMergedAndSet == Boolean.TRUE) {
                    List<EXExtentPropertyType> lhsExtent;
                    lhsExtent = (leftObject.isSetExtent()?leftObject.getExtent():null);
                    List<EXExtentPropertyType> rhsExtent;
                    rhsExtent = (rightObject.isSetExtent()?rightObject.getExtent():null);
                    List<EXExtentPropertyType> mergedExtent = ((List<EXExtentPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "extent", lhsExtent), LocatorUtils.property(rightLocator, "extent", rhsExtent), lhsExtent, rhsExtent, leftObject.isSetExtent(), rightObject.isSetExtent()));
                    target.unsetExtent();
                    if (mergedExtent!= null) {
                        List<EXExtentPropertyType> uniqueExtentl = target.getExtent();
                        uniqueExtentl.addAll(mergedExtent);
                    }
                } else {
                    if (extentShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetExtent();
                    }
                }
            }
            {
                Boolean passShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetPass(), rightObject.isSetPass());
                if (passShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MIPlatformPassPropertyType> lhsPass;
                    lhsPass = (leftObject.isSetPass()?leftObject.getPass():null);
                    List<MIPlatformPassPropertyType> rhsPass;
                    rhsPass = (rightObject.isSetPass()?rightObject.getPass():null);
                    List<MIPlatformPassPropertyType> mergedPass = ((List<MIPlatformPassPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "pass", lhsPass), LocatorUtils.property(rightLocator, "pass", rhsPass), lhsPass, rhsPass, leftObject.isSetPass(), rightObject.isSetPass()));
                    target.unsetPass();
                    if (mergedPass!= null) {
                        List<MIPlatformPassPropertyType> uniquePassl = target.getPass();
                        uniquePassl.addAll(mergedPass);
                    }
                } else {
                    if (passShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetPass();
                    }
                }
            }
            {
                Boolean sensingInstrumentShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetSensingInstrument(), rightObject.isSetSensingInstrument());
                if (sensingInstrumentShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MIInstrumentPropertyType> lhsSensingInstrument;
                    lhsSensingInstrument = (leftObject.isSetSensingInstrument()?leftObject.getSensingInstrument():null);
                    List<MIInstrumentPropertyType> rhsSensingInstrument;
                    rhsSensingInstrument = (rightObject.isSetSensingInstrument()?rightObject.getSensingInstrument():null);
                    List<MIInstrumentPropertyType> mergedSensingInstrument = ((List<MIInstrumentPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "sensingInstrument", lhsSensingInstrument), LocatorUtils.property(rightLocator, "sensingInstrument", rhsSensingInstrument), lhsSensingInstrument, rhsSensingInstrument, leftObject.isSetSensingInstrument(), rightObject.isSetSensingInstrument()));
                    target.unsetSensingInstrument();
                    if (mergedSensingInstrument!= null) {
                        List<MIInstrumentPropertyType> uniqueSensingInstrumentl = target.getSensingInstrument();
                        uniqueSensingInstrumentl.addAll(mergedSensingInstrument);
                    }
                } else {
                    if (sensingInstrumentShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetSensingInstrument();
                    }
                }
            }
            {
                Boolean objectiveOccurrenceShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetObjectiveOccurrence(), rightObject.isSetObjectiveOccurrence());
                if (objectiveOccurrenceShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MIEventPropertyType> lhsObjectiveOccurrence;
                    lhsObjectiveOccurrence = (leftObject.isSetObjectiveOccurrence()?leftObject.getObjectiveOccurrence():null);
                    List<MIEventPropertyType> rhsObjectiveOccurrence;
                    rhsObjectiveOccurrence = (rightObject.isSetObjectiveOccurrence()?rightObject.getObjectiveOccurrence():null);
                    List<MIEventPropertyType> mergedObjectiveOccurrence = ((List<MIEventPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "objectiveOccurrence", lhsObjectiveOccurrence), LocatorUtils.property(rightLocator, "objectiveOccurrence", rhsObjectiveOccurrence), lhsObjectiveOccurrence, rhsObjectiveOccurrence, leftObject.isSetObjectiveOccurrence(), rightObject.isSetObjectiveOccurrence()));
                    target.unsetObjectiveOccurrence();
                    if (mergedObjectiveOccurrence!= null) {
                        List<MIEventPropertyType> uniqueObjectiveOccurrencel = target.getObjectiveOccurrence();
                        uniqueObjectiveOccurrencel.addAll(mergedObjectiveOccurrence);
                    }
                } else {
                    if (objectiveOccurrenceShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetObjectiveOccurrence();
                    }
                }
            }
        }
    }

    public void setIdentifier(List<MDIdentifierPropertyType> value) {
        this.identifier = null;
        if (value!= null) {
            List<MDIdentifierPropertyType> draftl = this.getIdentifier();
            draftl.addAll(value);
        }
    }

    public void setType(List<MIObjectiveTypeCodePropertyType> value) {
        this.type = null;
        if (value!= null) {
            List<MIObjectiveTypeCodePropertyType> draftl = this.getType();
            draftl.addAll(value);
        }
    }

    public void setFunction(List<CharacterStringPropertyType> value) {
        this.function = null;
        if (value!= null) {
            List<CharacterStringPropertyType> draftl = this.getFunction();
            draftl.addAll(value);
        }
    }

    public void setExtent(List<EXExtentPropertyType> value) {
        this.extent = null;
        if (value!= null) {
            List<EXExtentPropertyType> draftl = this.getExtent();
            draftl.addAll(value);
        }
    }

    public void setPass(List<MIPlatformPassPropertyType> value) {
        this.pass = null;
        if (value!= null) {
            List<MIPlatformPassPropertyType> draftl = this.getPass();
            draftl.addAll(value);
        }
    }

    public void setSensingInstrument(List<MIInstrumentPropertyType> value) {
        this.sensingInstrument = null;
        if (value!= null) {
            List<MIInstrumentPropertyType> draftl = this.getSensingInstrument();
            draftl.addAll(value);
        }
    }

    public void setObjectiveOccurrence(List<MIEventPropertyType> value) {
        this.objectiveOccurrence = null;
        if (value!= null) {
            List<MIEventPropertyType> draftl = this.getObjectiveOccurrence();
            draftl.addAll(value);
        }
    }

    public MIObjectiveType withIdentifier(MDIdentifierPropertyType... values) {
        if (values!= null) {
            for (MDIdentifierPropertyType value: values) {
                getIdentifier().add(value);
            }
        }
        return this;
    }

    public MIObjectiveType withIdentifier(Collection<MDIdentifierPropertyType> values) {
        if (values!= null) {
            getIdentifier().addAll(values);
        }
        return this;
    }

    public MIObjectiveType withPriority(CharacterStringPropertyType value) {
        setPriority(value);
        return this;
    }

    public MIObjectiveType withType(MIObjectiveTypeCodePropertyType... values) {
        if (values!= null) {
            for (MIObjectiveTypeCodePropertyType value: values) {
                getType().add(value);
            }
        }
        return this;
    }

    public MIObjectiveType withType(Collection<MIObjectiveTypeCodePropertyType> values) {
        if (values!= null) {
            getType().addAll(values);
        }
        return this;
    }

    public MIObjectiveType withFunction(CharacterStringPropertyType... values) {
        if (values!= null) {
            for (CharacterStringPropertyType value: values) {
                getFunction().add(value);
            }
        }
        return this;
    }

    public MIObjectiveType withFunction(Collection<CharacterStringPropertyType> values) {
        if (values!= null) {
            getFunction().addAll(values);
        }
        return this;
    }

    public MIObjectiveType withExtent(EXExtentPropertyType... values) {
        if (values!= null) {
            for (EXExtentPropertyType value: values) {
                getExtent().add(value);
            }
        }
        return this;
    }

    public MIObjectiveType withExtent(Collection<EXExtentPropertyType> values) {
        if (values!= null) {
            getExtent().addAll(values);
        }
        return this;
    }

    public MIObjectiveType withPass(MIPlatformPassPropertyType... values) {
        if (values!= null) {
            for (MIPlatformPassPropertyType value: values) {
                getPass().add(value);
            }
        }
        return this;
    }

    public MIObjectiveType withPass(Collection<MIPlatformPassPropertyType> values) {
        if (values!= null) {
            getPass().addAll(values);
        }
        return this;
    }

    public MIObjectiveType withSensingInstrument(MIInstrumentPropertyType... values) {
        if (values!= null) {
            for (MIInstrumentPropertyType value: values) {
                getSensingInstrument().add(value);
            }
        }
        return this;
    }

    public MIObjectiveType withSensingInstrument(Collection<MIInstrumentPropertyType> values) {
        if (values!= null) {
            getSensingInstrument().addAll(values);
        }
        return this;
    }

    public MIObjectiveType withObjectiveOccurrence(MIEventPropertyType... values) {
        if (values!= null) {
            for (MIEventPropertyType value: values) {
                getObjectiveOccurrence().add(value);
            }
        }
        return this;
    }

    public MIObjectiveType withObjectiveOccurrence(Collection<MIEventPropertyType> values) {
        if (values!= null) {
            getObjectiveOccurrence().addAll(values);
        }
        return this;
    }

    public MIObjectiveType withIdentifier(List<MDIdentifierPropertyType> value) {
        setIdentifier(value);
        return this;
    }

    public MIObjectiveType withType(List<MIObjectiveTypeCodePropertyType> value) {
        setType(value);
        return this;
    }

    public MIObjectiveType withFunction(List<CharacterStringPropertyType> value) {
        setFunction(value);
        return this;
    }

    public MIObjectiveType withExtent(List<EXExtentPropertyType> value) {
        setExtent(value);
        return this;
    }

    public MIObjectiveType withPass(List<MIPlatformPassPropertyType> value) {
        setPass(value);
        return this;
    }

    public MIObjectiveType withSensingInstrument(List<MIInstrumentPropertyType> value) {
        setSensingInstrument(value);
        return this;
    }

    public MIObjectiveType withObjectiveOccurrence(List<MIEventPropertyType> value) {
        setObjectiveOccurrence(value);
        return this;
    }

}
