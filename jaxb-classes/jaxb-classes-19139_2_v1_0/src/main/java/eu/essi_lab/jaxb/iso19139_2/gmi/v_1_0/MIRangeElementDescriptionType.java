//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.02.26 at 04:55:57 PM AST 
//


package eu.essi_lab.jaxb.iso19139_2.gmi.v_1_0;

/*-
 * #%L
 * Discovery and Access Broker (DAB) Community Edition (CE)
 * %%
 * Copyright (C) 2021 - 2022 National Research Council of Italy (CNR)/Institute of Atmospheric Pollution Research (IIA)/ESSI-Lab
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import net.opengis.iso19139.gco.v_20060504.AbstractObjectType;
import net.opengis.iso19139.gco.v_20060504.CharacterStringPropertyType;
import net.opengis.iso19139.gco.v_20060504.RecordPropertyType;


/**
 * Description: description of specific range elements - shortName: RgEltDesc
 * 
 * <p>Java class for MI_RangeElementDescription_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MI_RangeElementDescription_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="name" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType"/&gt;
 *         &lt;element name="definition" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType"/&gt;
 *         &lt;element name="rangeElement" type="{http://www.isotc211.org/2005/gco}Record_PropertyType" maxOccurs="unbounded"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MI_RangeElementDescription_Type", propOrder = {
    "name",
    "definition",
    "rangeElement"
})
public class MIRangeElementDescriptionType
    extends AbstractObjectType
    implements Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    @XmlElement(required = true)
    protected CharacterStringPropertyType name;
    @XmlElement(required = true)
    protected CharacterStringPropertyType definition;
    @XmlElement(required = true)
    protected List<RecordPropertyType> rangeElement;

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setName(CharacterStringPropertyType value) {
        this.name = value;
    }

    public boolean isSetName() {
        return (this.name!= null);
    }

    /**
     * Gets the value of the definition property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getDefinition() {
        return definition;
    }

    /**
     * Sets the value of the definition property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setDefinition(CharacterStringPropertyType value) {
        this.definition = value;
    }

    public boolean isSetDefinition() {
        return (this.definition!= null);
    }

    /**
     * Gets the value of the rangeElement property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the rangeElement property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRangeElement().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link RecordPropertyType }
     * 
     * 
     */
    public List<RecordPropertyType> getRangeElement() {
        if (rangeElement == null) {
            rangeElement = new ArrayList<RecordPropertyType>();
        }
        return this.rangeElement;
    }

    public boolean isSetRangeElement() {
        return ((this.rangeElement!= null)&&(!this.rangeElement.isEmpty()));
    }

    public void unsetRangeElement() {
        this.rangeElement = null;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            CharacterStringPropertyType theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName, this.isSetName());
        }
        {
            CharacterStringPropertyType theDefinition;
            theDefinition = this.getDefinition();
            strategy.appendField(locator, this, "definition", buffer, theDefinition, this.isSetDefinition());
        }
        {
            List<RecordPropertyType> theRangeElement;
            theRangeElement = (this.isSetRangeElement()?this.getRangeElement():null);
            strategy.appendField(locator, this, "rangeElement", buffer, theRangeElement, this.isSetRangeElement());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MIRangeElementDescriptionType that = ((MIRangeElementDescriptionType) object);
        {
            CharacterStringPropertyType lhsName;
            lhsName = this.getName();
            CharacterStringPropertyType rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName, this.isSetName(), that.isSetName())) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsDefinition;
            lhsDefinition = this.getDefinition();
            CharacterStringPropertyType rhsDefinition;
            rhsDefinition = that.getDefinition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "definition", lhsDefinition), LocatorUtils.property(thatLocator, "definition", rhsDefinition), lhsDefinition, rhsDefinition, this.isSetDefinition(), that.isSetDefinition())) {
                return false;
            }
        }
        {
            List<RecordPropertyType> lhsRangeElement;
            lhsRangeElement = (this.isSetRangeElement()?this.getRangeElement():null);
            List<RecordPropertyType> rhsRangeElement;
            rhsRangeElement = (that.isSetRangeElement()?that.getRangeElement():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "rangeElement", lhsRangeElement), LocatorUtils.property(thatLocator, "rangeElement", rhsRangeElement), lhsRangeElement, rhsRangeElement, this.isSetRangeElement(), that.isSetRangeElement())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CharacterStringPropertyType theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName, this.isSetName());
        }
        {
            CharacterStringPropertyType theDefinition;
            theDefinition = this.getDefinition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "definition", theDefinition), currentHashCode, theDefinition, this.isSetDefinition());
        }
        {
            List<RecordPropertyType> theRangeElement;
            theRangeElement = (this.isSetRangeElement()?this.getRangeElement():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rangeElement", theRangeElement), currentHashCode, theRangeElement, this.isSetRangeElement());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MIRangeElementDescriptionType) {
            final MIRangeElementDescriptionType copy = ((MIRangeElementDescriptionType) draftCopy);
            {
                Boolean nameShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetName());
                if (nameShouldBeCopiedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType sourceName;
                    sourceName = this.getName();
                    CharacterStringPropertyType copyName = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName, this.isSetName()));
                    copy.setName(copyName);
                } else {
                    if (nameShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.name = null;
                    }
                }
            }
            {
                Boolean definitionShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetDefinition());
                if (definitionShouldBeCopiedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType sourceDefinition;
                    sourceDefinition = this.getDefinition();
                    CharacterStringPropertyType copyDefinition = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "definition", sourceDefinition), sourceDefinition, this.isSetDefinition()));
                    copy.setDefinition(copyDefinition);
                } else {
                    if (definitionShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.definition = null;
                    }
                }
            }
            {
                Boolean rangeElementShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetRangeElement());
                if (rangeElementShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<RecordPropertyType> sourceRangeElement;
                    sourceRangeElement = (this.isSetRangeElement()?this.getRangeElement():null);
                    @SuppressWarnings("unchecked")
                    List<RecordPropertyType> copyRangeElement = ((List<RecordPropertyType> ) strategy.copy(LocatorUtils.property(locator, "rangeElement", sourceRangeElement), sourceRangeElement, this.isSetRangeElement()));
                    copy.unsetRangeElement();
                    if (copyRangeElement!= null) {
                        List<RecordPropertyType> uniqueRangeElementl = copy.getRangeElement();
                        uniqueRangeElementl.addAll(copyRangeElement);
                    }
                } else {
                    if (rangeElementShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetRangeElement();
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MIRangeElementDescriptionType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof MIRangeElementDescriptionType) {
            final MIRangeElementDescriptionType target = this;
            final MIRangeElementDescriptionType leftObject = ((MIRangeElementDescriptionType) left);
            final MIRangeElementDescriptionType rightObject = ((MIRangeElementDescriptionType) right);
            {
                Boolean nameShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetName(), rightObject.isSetName());
                if (nameShouldBeMergedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType lhsName;
                    lhsName = leftObject.getName();
                    CharacterStringPropertyType rhsName;
                    rhsName = rightObject.getName();
                    CharacterStringPropertyType mergedName = ((CharacterStringPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "name", lhsName), LocatorUtils.property(rightLocator, "name", rhsName), lhsName, rhsName, leftObject.isSetName(), rightObject.isSetName()));
                    target.setName(mergedName);
                } else {
                    if (nameShouldBeMergedAndSet == Boolean.FALSE) {
                        target.name = null;
                    }
                }
            }
            {
                Boolean definitionShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetDefinition(), rightObject.isSetDefinition());
                if (definitionShouldBeMergedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType lhsDefinition;
                    lhsDefinition = leftObject.getDefinition();
                    CharacterStringPropertyType rhsDefinition;
                    rhsDefinition = rightObject.getDefinition();
                    CharacterStringPropertyType mergedDefinition = ((CharacterStringPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "definition", lhsDefinition), LocatorUtils.property(rightLocator, "definition", rhsDefinition), lhsDefinition, rhsDefinition, leftObject.isSetDefinition(), rightObject.isSetDefinition()));
                    target.setDefinition(mergedDefinition);
                } else {
                    if (definitionShouldBeMergedAndSet == Boolean.FALSE) {
                        target.definition = null;
                    }
                }
            }
            {
                Boolean rangeElementShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetRangeElement(), rightObject.isSetRangeElement());
                if (rangeElementShouldBeMergedAndSet == Boolean.TRUE) {
                    List<RecordPropertyType> lhsRangeElement;
                    lhsRangeElement = (leftObject.isSetRangeElement()?leftObject.getRangeElement():null);
                    List<RecordPropertyType> rhsRangeElement;
                    rhsRangeElement = (rightObject.isSetRangeElement()?rightObject.getRangeElement():null);
                    List<RecordPropertyType> mergedRangeElement = ((List<RecordPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "rangeElement", lhsRangeElement), LocatorUtils.property(rightLocator, "rangeElement", rhsRangeElement), lhsRangeElement, rhsRangeElement, leftObject.isSetRangeElement(), rightObject.isSetRangeElement()));
                    target.unsetRangeElement();
                    if (mergedRangeElement!= null) {
                        List<RecordPropertyType> uniqueRangeElementl = target.getRangeElement();
                        uniqueRangeElementl.addAll(mergedRangeElement);
                    }
                } else {
                    if (rangeElementShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetRangeElement();
                    }
                }
            }
        }
    }

    public void setRangeElement(List<RecordPropertyType> value) {
        this.rangeElement = null;
        if (value!= null) {
            List<RecordPropertyType> draftl = this.getRangeElement();
            draftl.addAll(value);
        }
    }

    public MIRangeElementDescriptionType withName(CharacterStringPropertyType value) {
        setName(value);
        return this;
    }

    public MIRangeElementDescriptionType withDefinition(CharacterStringPropertyType value) {
        setDefinition(value);
        return this;
    }

    public MIRangeElementDescriptionType withRangeElement(RecordPropertyType... values) {
        if (values!= null) {
            for (RecordPropertyType value: values) {
                getRangeElement().add(value);
            }
        }
        return this;
    }

    public MIRangeElementDescriptionType withRangeElement(Collection<RecordPropertyType> values) {
        if (values!= null) {
            getRangeElement().addAll(values);
        }
        return this;
    }

    public MIRangeElementDescriptionType withRangeElement(List<RecordPropertyType> value) {
        setRangeElement(value);
        return this;
    }

}
