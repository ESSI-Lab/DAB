//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.02.26 at 04:55:57 PM AST 
//


package eu.essi_lab.jaxb.iso19139_2.gmi.v_1_0;

/*-
 * #%L
 * Discovery and Access Broker (DAB) Community Edition (CE)
 * %%
 * Copyright (C) 2021 National Research Council of Italy (CNR)/Institute of Atmospheric Pollution Research (IIA)/ESSI-Lab
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import net.opengis.iso19139.gmd.v_20060504.LISourceType;
import net.opengis.iso19139.gmd.v_20060504.MDIdentifierPropertyType;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "LE_Source_Type", propOrder = {
    "processedLevel",
    "resolution"
})
public class LESourceType
    extends LISourceType
    implements Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    protected MDIdentifierPropertyType processedLevel;
    protected LENominalResolutionPropertyType resolution;

    /**
     * Gets the value of the processedLevel property.
     * 
     * @return
     *     possible object is
     *     {@link MDIdentifierPropertyType }
     *     
     */
    public MDIdentifierPropertyType getProcessedLevel() {
        return processedLevel;
    }

    /**
     * Sets the value of the processedLevel property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDIdentifierPropertyType }
     *     
     */
    public void setProcessedLevel(MDIdentifierPropertyType value) {
        this.processedLevel = value;
    }

    public boolean isSetProcessedLevel() {
        return (this.processedLevel!= null);
    }

    /**
     * Gets the value of the resolution property.
     * 
     * @return
     *     possible object is
     *     {@link LENominalResolutionPropertyType }
     *     
     */
    public LENominalResolutionPropertyType getResolution() {
        return resolution;
    }

    /**
     * Sets the value of the resolution property.
     * 
     * @param value
     *     allowed object is
     *     {@link LENominalResolutionPropertyType }
     *     
     */
    public void setResolution(LENominalResolutionPropertyType value) {
        this.resolution = value;
    }

    public boolean isSetResolution() {
        return (this.resolution!= null);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            MDIdentifierPropertyType theProcessedLevel;
            theProcessedLevel = this.getProcessedLevel();
            strategy.appendField(locator, this, "processedLevel", buffer, theProcessedLevel, this.isSetProcessedLevel());
        }
        {
            LENominalResolutionPropertyType theResolution;
            theResolution = this.getResolution();
            strategy.appendField(locator, this, "resolution", buffer, theResolution, this.isSetResolution());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final LESourceType that = ((LESourceType) object);
        {
            MDIdentifierPropertyType lhsProcessedLevel;
            lhsProcessedLevel = this.getProcessedLevel();
            MDIdentifierPropertyType rhsProcessedLevel;
            rhsProcessedLevel = that.getProcessedLevel();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "processedLevel", lhsProcessedLevel), LocatorUtils.property(thatLocator, "processedLevel", rhsProcessedLevel), lhsProcessedLevel, rhsProcessedLevel, this.isSetProcessedLevel(), that.isSetProcessedLevel())) {
                return false;
            }
        }
        {
            LENominalResolutionPropertyType lhsResolution;
            lhsResolution = this.getResolution();
            LENominalResolutionPropertyType rhsResolution;
            rhsResolution = that.getResolution();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resolution", lhsResolution), LocatorUtils.property(thatLocator, "resolution", rhsResolution), lhsResolution, rhsResolution, this.isSetResolution(), that.isSetResolution())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            MDIdentifierPropertyType theProcessedLevel;
            theProcessedLevel = this.getProcessedLevel();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "processedLevel", theProcessedLevel), currentHashCode, theProcessedLevel, this.isSetProcessedLevel());
        }
        {
            LENominalResolutionPropertyType theResolution;
            theResolution = this.getResolution();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resolution", theResolution), currentHashCode, theResolution, this.isSetResolution());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof LESourceType) {
            final LESourceType copy = ((LESourceType) draftCopy);
            {
                Boolean processedLevelShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetProcessedLevel());
                if (processedLevelShouldBeCopiedAndSet == Boolean.TRUE) {
                    MDIdentifierPropertyType sourceProcessedLevel;
                    sourceProcessedLevel = this.getProcessedLevel();
                    MDIdentifierPropertyType copyProcessedLevel = ((MDIdentifierPropertyType) strategy.copy(LocatorUtils.property(locator, "processedLevel", sourceProcessedLevel), sourceProcessedLevel, this.isSetProcessedLevel()));
                    copy.setProcessedLevel(copyProcessedLevel);
                } else {
                    if (processedLevelShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.processedLevel = null;
                    }
                }
            }
            {
                Boolean resolutionShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetResolution());
                if (resolutionShouldBeCopiedAndSet == Boolean.TRUE) {
                    LENominalResolutionPropertyType sourceResolution;
                    sourceResolution = this.getResolution();
                    LENominalResolutionPropertyType copyResolution = ((LENominalResolutionPropertyType) strategy.copy(LocatorUtils.property(locator, "resolution", sourceResolution), sourceResolution, this.isSetResolution()));
                    copy.setResolution(copyResolution);
                } else {
                    if (resolutionShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.resolution = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new LESourceType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof LESourceType) {
            final LESourceType target = this;
            final LESourceType leftObject = ((LESourceType) left);
            final LESourceType rightObject = ((LESourceType) right);
            {
                Boolean processedLevelShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetProcessedLevel(), rightObject.isSetProcessedLevel());
                if (processedLevelShouldBeMergedAndSet == Boolean.TRUE) {
                    MDIdentifierPropertyType lhsProcessedLevel;
                    lhsProcessedLevel = leftObject.getProcessedLevel();
                    MDIdentifierPropertyType rhsProcessedLevel;
                    rhsProcessedLevel = rightObject.getProcessedLevel();
                    MDIdentifierPropertyType mergedProcessedLevel = ((MDIdentifierPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "processedLevel", lhsProcessedLevel), LocatorUtils.property(rightLocator, "processedLevel", rhsProcessedLevel), lhsProcessedLevel, rhsProcessedLevel, leftObject.isSetProcessedLevel(), rightObject.isSetProcessedLevel()));
                    target.setProcessedLevel(mergedProcessedLevel);
                } else {
                    if (processedLevelShouldBeMergedAndSet == Boolean.FALSE) {
                        target.processedLevel = null;
                    }
                }
            }
            {
                Boolean resolutionShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetResolution(), rightObject.isSetResolution());
                if (resolutionShouldBeMergedAndSet == Boolean.TRUE) {
                    LENominalResolutionPropertyType lhsResolution;
                    lhsResolution = leftObject.getResolution();
                    LENominalResolutionPropertyType rhsResolution;
                    rhsResolution = rightObject.getResolution();
                    LENominalResolutionPropertyType mergedResolution = ((LENominalResolutionPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "resolution", lhsResolution), LocatorUtils.property(rightLocator, "resolution", rhsResolution), lhsResolution, rhsResolution, leftObject.isSetResolution(), rightObject.isSetResolution()));
                    target.setResolution(mergedResolution);
                } else {
                    if (resolutionShouldBeMergedAndSet == Boolean.FALSE) {
                        target.resolution = null;
                    }
                }
            }
        }
    }

    public LESourceType withProcessedLevel(MDIdentifierPropertyType value) {
        setProcessedLevel(value);
        return this;
    }

    public LESourceType withResolution(LENominalResolutionPropertyType value) {
        setResolution(value);
        return this;
    }

}
