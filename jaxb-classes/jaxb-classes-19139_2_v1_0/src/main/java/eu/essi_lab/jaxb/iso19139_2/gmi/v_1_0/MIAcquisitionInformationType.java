//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.02.26 at 04:55:57 PM AST 
//


package eu.essi_lab.jaxb.iso19139_2.gmi.v_1_0;

/*-
 * #%L
 * Discovery and Access Broker (DAB) Community Edition (CE)
 * %%
 * Copyright (C) 2021 National Research Council of Italy (CNR)/Institute of Atmospheric Pollution Research (IIA)/ESSI-Lab
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import net.opengis.iso19139.gco.v_20060504.AbstractObjectType;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MI_AcquisitionInformation_Type", propOrder = {
    "acquisitionRequirement",
    "objective",
    "instrument",
    "acquisitionPlan",
    "operation",
    "platform",
    "environmentalConditions"
})
public class MIAcquisitionInformationType
    extends AbstractObjectType
    implements Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    protected List<MIRequirementPropertyType> acquisitionRequirement;
    protected List<MIObjectivePropertyType> objective;
    protected List<MIInstrumentPropertyType> instrument;
    protected List<MIPlanPropertyType> acquisitionPlan;
    protected List<MIOperationPropertyType> operation;
    protected List<MIPlatformPropertyType> platform;
    protected MIEnvironmentalRecordPropertyType environmentalConditions;

    /**
     * Gets the value of the acquisitionRequirement property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the acquisitionRequirement property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAcquisitionRequirement().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MIRequirementPropertyType }
     * 
     * 
     */
    public List<MIRequirementPropertyType> getAcquisitionRequirement() {
        if (acquisitionRequirement == null) {
            acquisitionRequirement = new ArrayList<MIRequirementPropertyType>();
        }
        return this.acquisitionRequirement;
    }

    public boolean isSetAcquisitionRequirement() {
        return ((this.acquisitionRequirement!= null)&&(!this.acquisitionRequirement.isEmpty()));
    }

    public void unsetAcquisitionRequirement() {
        this.acquisitionRequirement = null;
    }

    /**
     * Gets the value of the objective property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the objective property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getObjective().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MIObjectivePropertyType }
     * 
     * 
     */
    public List<MIObjectivePropertyType> getObjective() {
        if (objective == null) {
            objective = new ArrayList<MIObjectivePropertyType>();
        }
        return this.objective;
    }

    public boolean isSetObjective() {
        return ((this.objective!= null)&&(!this.objective.isEmpty()));
    }

    public void unsetObjective() {
        this.objective = null;
    }

    /**
     * Gets the value of the instrument property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the instrument property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getInstrument().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MIInstrumentPropertyType }
     * 
     * 
     */
    public List<MIInstrumentPropertyType> getInstrument() {
        if (instrument == null) {
            instrument = new ArrayList<MIInstrumentPropertyType>();
        }
        return this.instrument;
    }

    public boolean isSetInstrument() {
        return ((this.instrument!= null)&&(!this.instrument.isEmpty()));
    }

    public void unsetInstrument() {
        this.instrument = null;
    }

    /**
     * Gets the value of the acquisitionPlan property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the acquisitionPlan property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAcquisitionPlan().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MIPlanPropertyType }
     * 
     * 
     */
    public List<MIPlanPropertyType> getAcquisitionPlan() {
        if (acquisitionPlan == null) {
            acquisitionPlan = new ArrayList<MIPlanPropertyType>();
        }
        return this.acquisitionPlan;
    }

    public boolean isSetAcquisitionPlan() {
        return ((this.acquisitionPlan!= null)&&(!this.acquisitionPlan.isEmpty()));
    }

    public void unsetAcquisitionPlan() {
        this.acquisitionPlan = null;
    }

    /**
     * Gets the value of the operation property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the operation property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getOperation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MIOperationPropertyType }
     * 
     * 
     */
    public List<MIOperationPropertyType> getOperation() {
        if (operation == null) {
            operation = new ArrayList<MIOperationPropertyType>();
        }
        return this.operation;
    }

    public boolean isSetOperation() {
        return ((this.operation!= null)&&(!this.operation.isEmpty()));
    }

    public void unsetOperation() {
        this.operation = null;
    }

    /**
     * Gets the value of the platform property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the platform property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPlatform().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MIPlatformPropertyType }
     * 
     * 
     */
    public List<MIPlatformPropertyType> getPlatform() {
        if (platform == null) {
            platform = new ArrayList<MIPlatformPropertyType>();
        }
        return this.platform;
    }

    public boolean isSetPlatform() {
        return ((this.platform!= null)&&(!this.platform.isEmpty()));
    }

    public void unsetPlatform() {
        this.platform = null;
    }

    /**
     * Gets the value of the environmentalConditions property.
     * 
     * @return
     *     possible object is
     *     {@link MIEnvironmentalRecordPropertyType }
     *     
     */
    public MIEnvironmentalRecordPropertyType getEnvironmentalConditions() {
        return environmentalConditions;
    }

    /**
     * Sets the value of the environmentalConditions property.
     * 
     * @param value
     *     allowed object is
     *     {@link MIEnvironmentalRecordPropertyType }
     *     
     */
    public void setEnvironmentalConditions(MIEnvironmentalRecordPropertyType value) {
        this.environmentalConditions = value;
    }

    public boolean isSetEnvironmentalConditions() {
        return (this.environmentalConditions!= null);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<MIRequirementPropertyType> theAcquisitionRequirement;
            theAcquisitionRequirement = (this.isSetAcquisitionRequirement()?this.getAcquisitionRequirement():null);
            strategy.appendField(locator, this, "acquisitionRequirement", buffer, theAcquisitionRequirement, this.isSetAcquisitionRequirement());
        }
        {
            List<MIObjectivePropertyType> theObjective;
            theObjective = (this.isSetObjective()?this.getObjective():null);
            strategy.appendField(locator, this, "objective", buffer, theObjective, this.isSetObjective());
        }
        {
            List<MIInstrumentPropertyType> theInstrument;
            theInstrument = (this.isSetInstrument()?this.getInstrument():null);
            strategy.appendField(locator, this, "instrument", buffer, theInstrument, this.isSetInstrument());
        }
        {
            List<MIPlanPropertyType> theAcquisitionPlan;
            theAcquisitionPlan = (this.isSetAcquisitionPlan()?this.getAcquisitionPlan():null);
            strategy.appendField(locator, this, "acquisitionPlan", buffer, theAcquisitionPlan, this.isSetAcquisitionPlan());
        }
        {
            List<MIOperationPropertyType> theOperation;
            theOperation = (this.isSetOperation()?this.getOperation():null);
            strategy.appendField(locator, this, "operation", buffer, theOperation, this.isSetOperation());
        }
        {
            List<MIPlatformPropertyType> thePlatform;
            thePlatform = (this.isSetPlatform()?this.getPlatform():null);
            strategy.appendField(locator, this, "platform", buffer, thePlatform, this.isSetPlatform());
        }
        {
            MIEnvironmentalRecordPropertyType theEnvironmentalConditions;
            theEnvironmentalConditions = this.getEnvironmentalConditions();
            strategy.appendField(locator, this, "environmentalConditions", buffer, theEnvironmentalConditions, this.isSetEnvironmentalConditions());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MIAcquisitionInformationType that = ((MIAcquisitionInformationType) object);
        {
            List<MIRequirementPropertyType> lhsAcquisitionRequirement;
            lhsAcquisitionRequirement = (this.isSetAcquisitionRequirement()?this.getAcquisitionRequirement():null);
            List<MIRequirementPropertyType> rhsAcquisitionRequirement;
            rhsAcquisitionRequirement = (that.isSetAcquisitionRequirement()?that.getAcquisitionRequirement():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "acquisitionRequirement", lhsAcquisitionRequirement), LocatorUtils.property(thatLocator, "acquisitionRequirement", rhsAcquisitionRequirement), lhsAcquisitionRequirement, rhsAcquisitionRequirement, this.isSetAcquisitionRequirement(), that.isSetAcquisitionRequirement())) {
                return false;
            }
        }
        {
            List<MIObjectivePropertyType> lhsObjective;
            lhsObjective = (this.isSetObjective()?this.getObjective():null);
            List<MIObjectivePropertyType> rhsObjective;
            rhsObjective = (that.isSetObjective()?that.getObjective():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "objective", lhsObjective), LocatorUtils.property(thatLocator, "objective", rhsObjective), lhsObjective, rhsObjective, this.isSetObjective(), that.isSetObjective())) {
                return false;
            }
        }
        {
            List<MIInstrumentPropertyType> lhsInstrument;
            lhsInstrument = (this.isSetInstrument()?this.getInstrument():null);
            List<MIInstrumentPropertyType> rhsInstrument;
            rhsInstrument = (that.isSetInstrument()?that.getInstrument():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "instrument", lhsInstrument), LocatorUtils.property(thatLocator, "instrument", rhsInstrument), lhsInstrument, rhsInstrument, this.isSetInstrument(), that.isSetInstrument())) {
                return false;
            }
        }
        {
            List<MIPlanPropertyType> lhsAcquisitionPlan;
            lhsAcquisitionPlan = (this.isSetAcquisitionPlan()?this.getAcquisitionPlan():null);
            List<MIPlanPropertyType> rhsAcquisitionPlan;
            rhsAcquisitionPlan = (that.isSetAcquisitionPlan()?that.getAcquisitionPlan():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "acquisitionPlan", lhsAcquisitionPlan), LocatorUtils.property(thatLocator, "acquisitionPlan", rhsAcquisitionPlan), lhsAcquisitionPlan, rhsAcquisitionPlan, this.isSetAcquisitionPlan(), that.isSetAcquisitionPlan())) {
                return false;
            }
        }
        {
            List<MIOperationPropertyType> lhsOperation;
            lhsOperation = (this.isSetOperation()?this.getOperation():null);
            List<MIOperationPropertyType> rhsOperation;
            rhsOperation = (that.isSetOperation()?that.getOperation():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "operation", lhsOperation), LocatorUtils.property(thatLocator, "operation", rhsOperation), lhsOperation, rhsOperation, this.isSetOperation(), that.isSetOperation())) {
                return false;
            }
        }
        {
            List<MIPlatformPropertyType> lhsPlatform;
            lhsPlatform = (this.isSetPlatform()?this.getPlatform():null);
            List<MIPlatformPropertyType> rhsPlatform;
            rhsPlatform = (that.isSetPlatform()?that.getPlatform():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "platform", lhsPlatform), LocatorUtils.property(thatLocator, "platform", rhsPlatform), lhsPlatform, rhsPlatform, this.isSetPlatform(), that.isSetPlatform())) {
                return false;
            }
        }
        {
            MIEnvironmentalRecordPropertyType lhsEnvironmentalConditions;
            lhsEnvironmentalConditions = this.getEnvironmentalConditions();
            MIEnvironmentalRecordPropertyType rhsEnvironmentalConditions;
            rhsEnvironmentalConditions = that.getEnvironmentalConditions();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "environmentalConditions", lhsEnvironmentalConditions), LocatorUtils.property(thatLocator, "environmentalConditions", rhsEnvironmentalConditions), lhsEnvironmentalConditions, rhsEnvironmentalConditions, this.isSetEnvironmentalConditions(), that.isSetEnvironmentalConditions())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<MIRequirementPropertyType> theAcquisitionRequirement;
            theAcquisitionRequirement = (this.isSetAcquisitionRequirement()?this.getAcquisitionRequirement():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "acquisitionRequirement", theAcquisitionRequirement), currentHashCode, theAcquisitionRequirement, this.isSetAcquisitionRequirement());
        }
        {
            List<MIObjectivePropertyType> theObjective;
            theObjective = (this.isSetObjective()?this.getObjective():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "objective", theObjective), currentHashCode, theObjective, this.isSetObjective());
        }
        {
            List<MIInstrumentPropertyType> theInstrument;
            theInstrument = (this.isSetInstrument()?this.getInstrument():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "instrument", theInstrument), currentHashCode, theInstrument, this.isSetInstrument());
        }
        {
            List<MIPlanPropertyType> theAcquisitionPlan;
            theAcquisitionPlan = (this.isSetAcquisitionPlan()?this.getAcquisitionPlan():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "acquisitionPlan", theAcquisitionPlan), currentHashCode, theAcquisitionPlan, this.isSetAcquisitionPlan());
        }
        {
            List<MIOperationPropertyType> theOperation;
            theOperation = (this.isSetOperation()?this.getOperation():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "operation", theOperation), currentHashCode, theOperation, this.isSetOperation());
        }
        {
            List<MIPlatformPropertyType> thePlatform;
            thePlatform = (this.isSetPlatform()?this.getPlatform():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "platform", thePlatform), currentHashCode, thePlatform, this.isSetPlatform());
        }
        {
            MIEnvironmentalRecordPropertyType theEnvironmentalConditions;
            theEnvironmentalConditions = this.getEnvironmentalConditions();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "environmentalConditions", theEnvironmentalConditions), currentHashCode, theEnvironmentalConditions, this.isSetEnvironmentalConditions());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MIAcquisitionInformationType) {
            final MIAcquisitionInformationType copy = ((MIAcquisitionInformationType) draftCopy);
            {
                Boolean acquisitionRequirementShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetAcquisitionRequirement());
                if (acquisitionRequirementShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MIRequirementPropertyType> sourceAcquisitionRequirement;
                    sourceAcquisitionRequirement = (this.isSetAcquisitionRequirement()?this.getAcquisitionRequirement():null);
                    @SuppressWarnings("unchecked")
                    List<MIRequirementPropertyType> copyAcquisitionRequirement = ((List<MIRequirementPropertyType> ) strategy.copy(LocatorUtils.property(locator, "acquisitionRequirement", sourceAcquisitionRequirement), sourceAcquisitionRequirement, this.isSetAcquisitionRequirement()));
                    copy.unsetAcquisitionRequirement();
                    if (copyAcquisitionRequirement!= null) {
                        List<MIRequirementPropertyType> uniqueAcquisitionRequirementl = copy.getAcquisitionRequirement();
                        uniqueAcquisitionRequirementl.addAll(copyAcquisitionRequirement);
                    }
                } else {
                    if (acquisitionRequirementShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetAcquisitionRequirement();
                    }
                }
            }
            {
                Boolean objectiveShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetObjective());
                if (objectiveShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MIObjectivePropertyType> sourceObjective;
                    sourceObjective = (this.isSetObjective()?this.getObjective():null);
                    @SuppressWarnings("unchecked")
                    List<MIObjectivePropertyType> copyObjective = ((List<MIObjectivePropertyType> ) strategy.copy(LocatorUtils.property(locator, "objective", sourceObjective), sourceObjective, this.isSetObjective()));
                    copy.unsetObjective();
                    if (copyObjective!= null) {
                        List<MIObjectivePropertyType> uniqueObjectivel = copy.getObjective();
                        uniqueObjectivel.addAll(copyObjective);
                    }
                } else {
                    if (objectiveShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetObjective();
                    }
                }
            }
            {
                Boolean instrumentShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetInstrument());
                if (instrumentShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MIInstrumentPropertyType> sourceInstrument;
                    sourceInstrument = (this.isSetInstrument()?this.getInstrument():null);
                    @SuppressWarnings("unchecked")
                    List<MIInstrumentPropertyType> copyInstrument = ((List<MIInstrumentPropertyType> ) strategy.copy(LocatorUtils.property(locator, "instrument", sourceInstrument), sourceInstrument, this.isSetInstrument()));
                    copy.unsetInstrument();
                    if (copyInstrument!= null) {
                        List<MIInstrumentPropertyType> uniqueInstrumentl = copy.getInstrument();
                        uniqueInstrumentl.addAll(copyInstrument);
                    }
                } else {
                    if (instrumentShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetInstrument();
                    }
                }
            }
            {
                Boolean acquisitionPlanShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetAcquisitionPlan());
                if (acquisitionPlanShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MIPlanPropertyType> sourceAcquisitionPlan;
                    sourceAcquisitionPlan = (this.isSetAcquisitionPlan()?this.getAcquisitionPlan():null);
                    @SuppressWarnings("unchecked")
                    List<MIPlanPropertyType> copyAcquisitionPlan = ((List<MIPlanPropertyType> ) strategy.copy(LocatorUtils.property(locator, "acquisitionPlan", sourceAcquisitionPlan), sourceAcquisitionPlan, this.isSetAcquisitionPlan()));
                    copy.unsetAcquisitionPlan();
                    if (copyAcquisitionPlan!= null) {
                        List<MIPlanPropertyType> uniqueAcquisitionPlanl = copy.getAcquisitionPlan();
                        uniqueAcquisitionPlanl.addAll(copyAcquisitionPlan);
                    }
                } else {
                    if (acquisitionPlanShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetAcquisitionPlan();
                    }
                }
            }
            {
                Boolean operationShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetOperation());
                if (operationShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MIOperationPropertyType> sourceOperation;
                    sourceOperation = (this.isSetOperation()?this.getOperation():null);
                    @SuppressWarnings("unchecked")
                    List<MIOperationPropertyType> copyOperation = ((List<MIOperationPropertyType> ) strategy.copy(LocatorUtils.property(locator, "operation", sourceOperation), sourceOperation, this.isSetOperation()));
                    copy.unsetOperation();
                    if (copyOperation!= null) {
                        List<MIOperationPropertyType> uniqueOperationl = copy.getOperation();
                        uniqueOperationl.addAll(copyOperation);
                    }
                } else {
                    if (operationShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetOperation();
                    }
                }
            }
            {
                Boolean platformShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetPlatform());
                if (platformShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MIPlatformPropertyType> sourcePlatform;
                    sourcePlatform = (this.isSetPlatform()?this.getPlatform():null);
                    @SuppressWarnings("unchecked")
                    List<MIPlatformPropertyType> copyPlatform = ((List<MIPlatformPropertyType> ) strategy.copy(LocatorUtils.property(locator, "platform", sourcePlatform), sourcePlatform, this.isSetPlatform()));
                    copy.unsetPlatform();
                    if (copyPlatform!= null) {
                        List<MIPlatformPropertyType> uniquePlatforml = copy.getPlatform();
                        uniquePlatforml.addAll(copyPlatform);
                    }
                } else {
                    if (platformShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetPlatform();
                    }
                }
            }
            {
                Boolean environmentalConditionsShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetEnvironmentalConditions());
                if (environmentalConditionsShouldBeCopiedAndSet == Boolean.TRUE) {
                    MIEnvironmentalRecordPropertyType sourceEnvironmentalConditions;
                    sourceEnvironmentalConditions = this.getEnvironmentalConditions();
                    MIEnvironmentalRecordPropertyType copyEnvironmentalConditions = ((MIEnvironmentalRecordPropertyType) strategy.copy(LocatorUtils.property(locator, "environmentalConditions", sourceEnvironmentalConditions), sourceEnvironmentalConditions, this.isSetEnvironmentalConditions()));
                    copy.setEnvironmentalConditions(copyEnvironmentalConditions);
                } else {
                    if (environmentalConditionsShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.environmentalConditions = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MIAcquisitionInformationType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof MIAcquisitionInformationType) {
            final MIAcquisitionInformationType target = this;
            final MIAcquisitionInformationType leftObject = ((MIAcquisitionInformationType) left);
            final MIAcquisitionInformationType rightObject = ((MIAcquisitionInformationType) right);
            {
                Boolean acquisitionRequirementShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetAcquisitionRequirement(), rightObject.isSetAcquisitionRequirement());
                if (acquisitionRequirementShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MIRequirementPropertyType> lhsAcquisitionRequirement;
                    lhsAcquisitionRequirement = (leftObject.isSetAcquisitionRequirement()?leftObject.getAcquisitionRequirement():null);
                    List<MIRequirementPropertyType> rhsAcquisitionRequirement;
                    rhsAcquisitionRequirement = (rightObject.isSetAcquisitionRequirement()?rightObject.getAcquisitionRequirement():null);
                    List<MIRequirementPropertyType> mergedAcquisitionRequirement = ((List<MIRequirementPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "acquisitionRequirement", lhsAcquisitionRequirement), LocatorUtils.property(rightLocator, "acquisitionRequirement", rhsAcquisitionRequirement), lhsAcquisitionRequirement, rhsAcquisitionRequirement, leftObject.isSetAcquisitionRequirement(), rightObject.isSetAcquisitionRequirement()));
                    target.unsetAcquisitionRequirement();
                    if (mergedAcquisitionRequirement!= null) {
                        List<MIRequirementPropertyType> uniqueAcquisitionRequirementl = target.getAcquisitionRequirement();
                        uniqueAcquisitionRequirementl.addAll(mergedAcquisitionRequirement);
                    }
                } else {
                    if (acquisitionRequirementShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetAcquisitionRequirement();
                    }
                }
            }
            {
                Boolean objectiveShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetObjective(), rightObject.isSetObjective());
                if (objectiveShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MIObjectivePropertyType> lhsObjective;
                    lhsObjective = (leftObject.isSetObjective()?leftObject.getObjective():null);
                    List<MIObjectivePropertyType> rhsObjective;
                    rhsObjective = (rightObject.isSetObjective()?rightObject.getObjective():null);
                    List<MIObjectivePropertyType> mergedObjective = ((List<MIObjectivePropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "objective", lhsObjective), LocatorUtils.property(rightLocator, "objective", rhsObjective), lhsObjective, rhsObjective, leftObject.isSetObjective(), rightObject.isSetObjective()));
                    target.unsetObjective();
                    if (mergedObjective!= null) {
                        List<MIObjectivePropertyType> uniqueObjectivel = target.getObjective();
                        uniqueObjectivel.addAll(mergedObjective);
                    }
                } else {
                    if (objectiveShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetObjective();
                    }
                }
            }
            {
                Boolean instrumentShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetInstrument(), rightObject.isSetInstrument());
                if (instrumentShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MIInstrumentPropertyType> lhsInstrument;
                    lhsInstrument = (leftObject.isSetInstrument()?leftObject.getInstrument():null);
                    List<MIInstrumentPropertyType> rhsInstrument;
                    rhsInstrument = (rightObject.isSetInstrument()?rightObject.getInstrument():null);
                    List<MIInstrumentPropertyType> mergedInstrument = ((List<MIInstrumentPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "instrument", lhsInstrument), LocatorUtils.property(rightLocator, "instrument", rhsInstrument), lhsInstrument, rhsInstrument, leftObject.isSetInstrument(), rightObject.isSetInstrument()));
                    target.unsetInstrument();
                    if (mergedInstrument!= null) {
                        List<MIInstrumentPropertyType> uniqueInstrumentl = target.getInstrument();
                        uniqueInstrumentl.addAll(mergedInstrument);
                    }
                } else {
                    if (instrumentShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetInstrument();
                    }
                }
            }
            {
                Boolean acquisitionPlanShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetAcquisitionPlan(), rightObject.isSetAcquisitionPlan());
                if (acquisitionPlanShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MIPlanPropertyType> lhsAcquisitionPlan;
                    lhsAcquisitionPlan = (leftObject.isSetAcquisitionPlan()?leftObject.getAcquisitionPlan():null);
                    List<MIPlanPropertyType> rhsAcquisitionPlan;
                    rhsAcquisitionPlan = (rightObject.isSetAcquisitionPlan()?rightObject.getAcquisitionPlan():null);
                    List<MIPlanPropertyType> mergedAcquisitionPlan = ((List<MIPlanPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "acquisitionPlan", lhsAcquisitionPlan), LocatorUtils.property(rightLocator, "acquisitionPlan", rhsAcquisitionPlan), lhsAcquisitionPlan, rhsAcquisitionPlan, leftObject.isSetAcquisitionPlan(), rightObject.isSetAcquisitionPlan()));
                    target.unsetAcquisitionPlan();
                    if (mergedAcquisitionPlan!= null) {
                        List<MIPlanPropertyType> uniqueAcquisitionPlanl = target.getAcquisitionPlan();
                        uniqueAcquisitionPlanl.addAll(mergedAcquisitionPlan);
                    }
                } else {
                    if (acquisitionPlanShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetAcquisitionPlan();
                    }
                }
            }
            {
                Boolean operationShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetOperation(), rightObject.isSetOperation());
                if (operationShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MIOperationPropertyType> lhsOperation;
                    lhsOperation = (leftObject.isSetOperation()?leftObject.getOperation():null);
                    List<MIOperationPropertyType> rhsOperation;
                    rhsOperation = (rightObject.isSetOperation()?rightObject.getOperation():null);
                    List<MIOperationPropertyType> mergedOperation = ((List<MIOperationPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "operation", lhsOperation), LocatorUtils.property(rightLocator, "operation", rhsOperation), lhsOperation, rhsOperation, leftObject.isSetOperation(), rightObject.isSetOperation()));
                    target.unsetOperation();
                    if (mergedOperation!= null) {
                        List<MIOperationPropertyType> uniqueOperationl = target.getOperation();
                        uniqueOperationl.addAll(mergedOperation);
                    }
                } else {
                    if (operationShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetOperation();
                    }
                }
            }
            {
                Boolean platformShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetPlatform(), rightObject.isSetPlatform());
                if (platformShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MIPlatformPropertyType> lhsPlatform;
                    lhsPlatform = (leftObject.isSetPlatform()?leftObject.getPlatform():null);
                    List<MIPlatformPropertyType> rhsPlatform;
                    rhsPlatform = (rightObject.isSetPlatform()?rightObject.getPlatform():null);
                    List<MIPlatformPropertyType> mergedPlatform = ((List<MIPlatformPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "platform", lhsPlatform), LocatorUtils.property(rightLocator, "platform", rhsPlatform), lhsPlatform, rhsPlatform, leftObject.isSetPlatform(), rightObject.isSetPlatform()));
                    target.unsetPlatform();
                    if (mergedPlatform!= null) {
                        List<MIPlatformPropertyType> uniquePlatforml = target.getPlatform();
                        uniquePlatforml.addAll(mergedPlatform);
                    }
                } else {
                    if (platformShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetPlatform();
                    }
                }
            }
            {
                Boolean environmentalConditionsShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetEnvironmentalConditions(), rightObject.isSetEnvironmentalConditions());
                if (environmentalConditionsShouldBeMergedAndSet == Boolean.TRUE) {
                    MIEnvironmentalRecordPropertyType lhsEnvironmentalConditions;
                    lhsEnvironmentalConditions = leftObject.getEnvironmentalConditions();
                    MIEnvironmentalRecordPropertyType rhsEnvironmentalConditions;
                    rhsEnvironmentalConditions = rightObject.getEnvironmentalConditions();
                    MIEnvironmentalRecordPropertyType mergedEnvironmentalConditions = ((MIEnvironmentalRecordPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "environmentalConditions", lhsEnvironmentalConditions), LocatorUtils.property(rightLocator, "environmentalConditions", rhsEnvironmentalConditions), lhsEnvironmentalConditions, rhsEnvironmentalConditions, leftObject.isSetEnvironmentalConditions(), rightObject.isSetEnvironmentalConditions()));
                    target.setEnvironmentalConditions(mergedEnvironmentalConditions);
                } else {
                    if (environmentalConditionsShouldBeMergedAndSet == Boolean.FALSE) {
                        target.environmentalConditions = null;
                    }
                }
            }
        }
    }

    public void setAcquisitionRequirement(List<MIRequirementPropertyType> value) {
        this.acquisitionRequirement = null;
        if (value!= null) {
            List<MIRequirementPropertyType> draftl = this.getAcquisitionRequirement();
            draftl.addAll(value);
        }
    }

    public void setObjective(List<MIObjectivePropertyType> value) {
        this.objective = null;
        if (value!= null) {
            List<MIObjectivePropertyType> draftl = this.getObjective();
            draftl.addAll(value);
        }
    }

    public void setInstrument(List<MIInstrumentPropertyType> value) {
        this.instrument = null;
        if (value!= null) {
            List<MIInstrumentPropertyType> draftl = this.getInstrument();
            draftl.addAll(value);
        }
    }

    public void setAcquisitionPlan(List<MIPlanPropertyType> value) {
        this.acquisitionPlan = null;
        if (value!= null) {
            List<MIPlanPropertyType> draftl = this.getAcquisitionPlan();
            draftl.addAll(value);
        }
    }

    public void setOperation(List<MIOperationPropertyType> value) {
        this.operation = null;
        if (value!= null) {
            List<MIOperationPropertyType> draftl = this.getOperation();
            draftl.addAll(value);
        }
    }

    public void setPlatform(List<MIPlatformPropertyType> value) {
        this.platform = null;
        if (value!= null) {
            List<MIPlatformPropertyType> draftl = this.getPlatform();
            draftl.addAll(value);
        }
    }

    public MIAcquisitionInformationType withAcquisitionRequirement(MIRequirementPropertyType... values) {
        if (values!= null) {
            for (MIRequirementPropertyType value: values) {
                getAcquisitionRequirement().add(value);
            }
        }
        return this;
    }

    public MIAcquisitionInformationType withAcquisitionRequirement(Collection<MIRequirementPropertyType> values) {
        if (values!= null) {
            getAcquisitionRequirement().addAll(values);
        }
        return this;
    }

    public MIAcquisitionInformationType withObjective(MIObjectivePropertyType... values) {
        if (values!= null) {
            for (MIObjectivePropertyType value: values) {
                getObjective().add(value);
            }
        }
        return this;
    }

    public MIAcquisitionInformationType withObjective(Collection<MIObjectivePropertyType> values) {
        if (values!= null) {
            getObjective().addAll(values);
        }
        return this;
    }

    public MIAcquisitionInformationType withInstrument(MIInstrumentPropertyType... values) {
        if (values!= null) {
            for (MIInstrumentPropertyType value: values) {
                getInstrument().add(value);
            }
        }
        return this;
    }

    public MIAcquisitionInformationType withInstrument(Collection<MIInstrumentPropertyType> values) {
        if (values!= null) {
            getInstrument().addAll(values);
        }
        return this;
    }

    public MIAcquisitionInformationType withAcquisitionPlan(MIPlanPropertyType... values) {
        if (values!= null) {
            for (MIPlanPropertyType value: values) {
                getAcquisitionPlan().add(value);
            }
        }
        return this;
    }

    public MIAcquisitionInformationType withAcquisitionPlan(Collection<MIPlanPropertyType> values) {
        if (values!= null) {
            getAcquisitionPlan().addAll(values);
        }
        return this;
    }

    public MIAcquisitionInformationType withOperation(MIOperationPropertyType... values) {
        if (values!= null) {
            for (MIOperationPropertyType value: values) {
                getOperation().add(value);
            }
        }
        return this;
    }

    public MIAcquisitionInformationType withOperation(Collection<MIOperationPropertyType> values) {
        if (values!= null) {
            getOperation().addAll(values);
        }
        return this;
    }

    public MIAcquisitionInformationType withPlatform(MIPlatformPropertyType... values) {
        if (values!= null) {
            for (MIPlatformPropertyType value: values) {
                getPlatform().add(value);
            }
        }
        return this;
    }

    public MIAcquisitionInformationType withPlatform(Collection<MIPlatformPropertyType> values) {
        if (values!= null) {
            getPlatform().addAll(values);
        }
        return this;
    }

    public MIAcquisitionInformationType withEnvironmentalConditions(MIEnvironmentalRecordPropertyType value) {
        setEnvironmentalConditions(value);
        return this;
    }

    public MIAcquisitionInformationType withAcquisitionRequirement(List<MIRequirementPropertyType> value) {
        setAcquisitionRequirement(value);
        return this;
    }

    public MIAcquisitionInformationType withObjective(List<MIObjectivePropertyType> value) {
        setObjective(value);
        return this;
    }

    public MIAcquisitionInformationType withInstrument(List<MIInstrumentPropertyType> value) {
        setInstrument(value);
        return this;
    }

    public MIAcquisitionInformationType withAcquisitionPlan(List<MIPlanPropertyType> value) {
        setAcquisitionPlan(value);
        return this;
    }

    public MIAcquisitionInformationType withOperation(List<MIOperationPropertyType> value) {
        setOperation(value);
        return this;
    }

    public MIAcquisitionInformationType withPlatform(List<MIPlatformPropertyType> value) {
        setPlatform(value);
        return this;
    }

}
