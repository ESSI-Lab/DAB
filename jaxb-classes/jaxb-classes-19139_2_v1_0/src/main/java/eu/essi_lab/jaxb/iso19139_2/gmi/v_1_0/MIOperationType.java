//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.02.26 at 04:55:57 PM AST 
//


package eu.essi_lab.jaxb.iso19139_2.gmi.v_1_0;

/*-
 * #%L
 * Discovery and Access Broker (DAB) Community Edition (CE)
 * %%
 * Copyright (C) 2021 - 2024 National Research Council of Italy (CNR)/Institute of Atmospheric Pollution Research (IIA)/ESSI-Lab
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import net.opengis.iso19139.gco.v_20060504.AbstractObjectType;
import net.opengis.iso19139.gco.v_20060504.CharacterStringPropertyType;
import net.opengis.iso19139.gmd.v_20060504.CICitationPropertyType;
import net.opengis.iso19139.gmd.v_20060504.MDIdentifierPropertyType;
import net.opengis.iso19139.gmd.v_20060504.MDProgressCodePropertyType;


/**
 * Description: Designations for the operation used to acquire the dataset - shortName: MssnId
 * 
 * <p>Java class for MI_Operation_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MI_Operation_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="description" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="citation" type="{http://www.isotc211.org/2005/gmd}CI_Citation_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="identifier" type="{http://www.isotc211.org/2005/gmd}MD_Identifier_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="status" type="{http://www.isotc211.org/2005/gmd}MD_ProgressCode_PropertyType"/&gt;
 *         &lt;element name="type" type="{http://www.isotc211.org/2005/gmi}MI_OperationTypeCode_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="objective" type="{http://www.isotc211.org/2005/gmi}MI_Objective_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="plan" type="{http://www.isotc211.org/2005/gmi}MI_Plan_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="childOperation" type="{http://www.isotc211.org/2005/gmi}MI_Operation_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="significantEvent" type="{http://www.isotc211.org/2005/gmi}MI_Event_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="platform" type="{http://www.isotc211.org/2005/gmi}MI_Platform_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MI_Operation_Type", propOrder = {
    "description",
    "citation",
    "identifier",
    "status",
    "type",
    "objective",
    "plan",
    "childOperation",
    "significantEvent",
    "platform"
})
public class MIOperationType
    extends AbstractObjectType
    implements Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    protected CharacterStringPropertyType description;
    protected CICitationPropertyType citation;
    protected MDIdentifierPropertyType identifier;
    @XmlElement(required = true)
    protected MDProgressCodePropertyType status;
    protected MIOperationTypeCodePropertyType type;
    protected List<MIObjectivePropertyType> objective;
    protected MIPlanPropertyType plan;
    protected List<MIOperationPropertyType> childOperation;
    protected List<MIEventPropertyType> significantEvent;
    protected List<MIPlatformPropertyType> platform;

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setDescription(CharacterStringPropertyType value) {
        this.description = value;
    }

    public boolean isSetDescription() {
        return (this.description!= null);
    }

    /**
     * Gets the value of the citation property.
     * 
     * @return
     *     possible object is
     *     {@link CICitationPropertyType }
     *     
     */
    public CICitationPropertyType getCitation() {
        return citation;
    }

    /**
     * Sets the value of the citation property.
     * 
     * @param value
     *     allowed object is
     *     {@link CICitationPropertyType }
     *     
     */
    public void setCitation(CICitationPropertyType value) {
        this.citation = value;
    }

    public boolean isSetCitation() {
        return (this.citation!= null);
    }

    /**
     * Gets the value of the identifier property.
     * 
     * @return
     *     possible object is
     *     {@link MDIdentifierPropertyType }
     *     
     */
    public MDIdentifierPropertyType getIdentifier() {
        return identifier;
    }

    /**
     * Sets the value of the identifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDIdentifierPropertyType }
     *     
     */
    public void setIdentifier(MDIdentifierPropertyType value) {
        this.identifier = value;
    }

    public boolean isSetIdentifier() {
        return (this.identifier!= null);
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link MDProgressCodePropertyType }
     *     
     */
    public MDProgressCodePropertyType getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDProgressCodePropertyType }
     *     
     */
    public void setStatus(MDProgressCodePropertyType value) {
        this.status = value;
    }

    public boolean isSetStatus() {
        return (this.status!= null);
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link MIOperationTypeCodePropertyType }
     *     
     */
    public MIOperationTypeCodePropertyType getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link MIOperationTypeCodePropertyType }
     *     
     */
    public void setType(MIOperationTypeCodePropertyType value) {
        this.type = value;
    }

    public boolean isSetType() {
        return (this.type!= null);
    }

    /**
     * Gets the value of the objective property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the objective property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getObjective().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MIObjectivePropertyType }
     * 
     * 
     */
    public List<MIObjectivePropertyType> getObjective() {
        if (objective == null) {
            objective = new ArrayList<MIObjectivePropertyType>();
        }
        return this.objective;
    }

    public boolean isSetObjective() {
        return ((this.objective!= null)&&(!this.objective.isEmpty()));
    }

    public void unsetObjective() {
        this.objective = null;
    }

    /**
     * Gets the value of the plan property.
     * 
     * @return
     *     possible object is
     *     {@link MIPlanPropertyType }
     *     
     */
    public MIPlanPropertyType getPlan() {
        return plan;
    }

    /**
     * Sets the value of the plan property.
     * 
     * @param value
     *     allowed object is
     *     {@link MIPlanPropertyType }
     *     
     */
    public void setPlan(MIPlanPropertyType value) {
        this.plan = value;
    }

    public boolean isSetPlan() {
        return (this.plan!= null);
    }

    /**
     * Gets the value of the childOperation property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the childOperation property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getChildOperation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MIOperationPropertyType }
     * 
     * 
     */
    public List<MIOperationPropertyType> getChildOperation() {
        if (childOperation == null) {
            childOperation = new ArrayList<MIOperationPropertyType>();
        }
        return this.childOperation;
    }

    public boolean isSetChildOperation() {
        return ((this.childOperation!= null)&&(!this.childOperation.isEmpty()));
    }

    public void unsetChildOperation() {
        this.childOperation = null;
    }

    /**
     * Gets the value of the significantEvent property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the significantEvent property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSignificantEvent().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MIEventPropertyType }
     * 
     * 
     */
    public List<MIEventPropertyType> getSignificantEvent() {
        if (significantEvent == null) {
            significantEvent = new ArrayList<MIEventPropertyType>();
        }
        return this.significantEvent;
    }

    public boolean isSetSignificantEvent() {
        return ((this.significantEvent!= null)&&(!this.significantEvent.isEmpty()));
    }

    public void unsetSignificantEvent() {
        this.significantEvent = null;
    }

    /**
     * Gets the value of the platform property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the platform property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPlatform().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MIPlatformPropertyType }
     * 
     * 
     */
    public List<MIPlatformPropertyType> getPlatform() {
        if (platform == null) {
            platform = new ArrayList<MIPlatformPropertyType>();
        }
        return this.platform;
    }

    public boolean isSetPlatform() {
        return ((this.platform!= null)&&(!this.platform.isEmpty()));
    }

    public void unsetPlatform() {
        this.platform = null;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            CharacterStringPropertyType theDescription;
            theDescription = this.getDescription();
            strategy.appendField(locator, this, "description", buffer, theDescription, this.isSetDescription());
        }
        {
            CICitationPropertyType theCitation;
            theCitation = this.getCitation();
            strategy.appendField(locator, this, "citation", buffer, theCitation, this.isSetCitation());
        }
        {
            MDIdentifierPropertyType theIdentifier;
            theIdentifier = this.getIdentifier();
            strategy.appendField(locator, this, "identifier", buffer, theIdentifier, this.isSetIdentifier());
        }
        {
            MDProgressCodePropertyType theStatus;
            theStatus = this.getStatus();
            strategy.appendField(locator, this, "status", buffer, theStatus, this.isSetStatus());
        }
        {
            MIOperationTypeCodePropertyType theType;
            theType = this.getType();
            strategy.appendField(locator, this, "type", buffer, theType, this.isSetType());
        }
        {
            List<MIObjectivePropertyType> theObjective;
            theObjective = (this.isSetObjective()?this.getObjective():null);
            strategy.appendField(locator, this, "objective", buffer, theObjective, this.isSetObjective());
        }
        {
            MIPlanPropertyType thePlan;
            thePlan = this.getPlan();
            strategy.appendField(locator, this, "plan", buffer, thePlan, this.isSetPlan());
        }
        {
            List<MIOperationPropertyType> theChildOperation;
            theChildOperation = (this.isSetChildOperation()?this.getChildOperation():null);
            strategy.appendField(locator, this, "childOperation", buffer, theChildOperation, this.isSetChildOperation());
        }
        {
            List<MIEventPropertyType> theSignificantEvent;
            theSignificantEvent = (this.isSetSignificantEvent()?this.getSignificantEvent():null);
            strategy.appendField(locator, this, "significantEvent", buffer, theSignificantEvent, this.isSetSignificantEvent());
        }
        {
            List<MIPlatformPropertyType> thePlatform;
            thePlatform = (this.isSetPlatform()?this.getPlatform():null);
            strategy.appendField(locator, this, "platform", buffer, thePlatform, this.isSetPlatform());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MIOperationType that = ((MIOperationType) object);
        {
            CharacterStringPropertyType lhsDescription;
            lhsDescription = this.getDescription();
            CharacterStringPropertyType rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription, this.isSetDescription(), that.isSetDescription())) {
                return false;
            }
        }
        {
            CICitationPropertyType lhsCitation;
            lhsCitation = this.getCitation();
            CICitationPropertyType rhsCitation;
            rhsCitation = that.getCitation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "citation", lhsCitation), LocatorUtils.property(thatLocator, "citation", rhsCitation), lhsCitation, rhsCitation, this.isSetCitation(), that.isSetCitation())) {
                return false;
            }
        }
        {
            MDIdentifierPropertyType lhsIdentifier;
            lhsIdentifier = this.getIdentifier();
            MDIdentifierPropertyType rhsIdentifier;
            rhsIdentifier = that.getIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier, this.isSetIdentifier(), that.isSetIdentifier())) {
                return false;
            }
        }
        {
            MDProgressCodePropertyType lhsStatus;
            lhsStatus = this.getStatus();
            MDProgressCodePropertyType rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus, this.isSetStatus(), that.isSetStatus())) {
                return false;
            }
        }
        {
            MIOperationTypeCodePropertyType lhsType;
            lhsType = this.getType();
            MIOperationTypeCodePropertyType rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType, this.isSetType(), that.isSetType())) {
                return false;
            }
        }
        {
            List<MIObjectivePropertyType> lhsObjective;
            lhsObjective = (this.isSetObjective()?this.getObjective():null);
            List<MIObjectivePropertyType> rhsObjective;
            rhsObjective = (that.isSetObjective()?that.getObjective():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "objective", lhsObjective), LocatorUtils.property(thatLocator, "objective", rhsObjective), lhsObjective, rhsObjective, this.isSetObjective(), that.isSetObjective())) {
                return false;
            }
        }
        {
            MIPlanPropertyType lhsPlan;
            lhsPlan = this.getPlan();
            MIPlanPropertyType rhsPlan;
            rhsPlan = that.getPlan();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "plan", lhsPlan), LocatorUtils.property(thatLocator, "plan", rhsPlan), lhsPlan, rhsPlan, this.isSetPlan(), that.isSetPlan())) {
                return false;
            }
        }
        {
            List<MIOperationPropertyType> lhsChildOperation;
            lhsChildOperation = (this.isSetChildOperation()?this.getChildOperation():null);
            List<MIOperationPropertyType> rhsChildOperation;
            rhsChildOperation = (that.isSetChildOperation()?that.getChildOperation():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "childOperation", lhsChildOperation), LocatorUtils.property(thatLocator, "childOperation", rhsChildOperation), lhsChildOperation, rhsChildOperation, this.isSetChildOperation(), that.isSetChildOperation())) {
                return false;
            }
        }
        {
            List<MIEventPropertyType> lhsSignificantEvent;
            lhsSignificantEvent = (this.isSetSignificantEvent()?this.getSignificantEvent():null);
            List<MIEventPropertyType> rhsSignificantEvent;
            rhsSignificantEvent = (that.isSetSignificantEvent()?that.getSignificantEvent():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "significantEvent", lhsSignificantEvent), LocatorUtils.property(thatLocator, "significantEvent", rhsSignificantEvent), lhsSignificantEvent, rhsSignificantEvent, this.isSetSignificantEvent(), that.isSetSignificantEvent())) {
                return false;
            }
        }
        {
            List<MIPlatformPropertyType> lhsPlatform;
            lhsPlatform = (this.isSetPlatform()?this.getPlatform():null);
            List<MIPlatformPropertyType> rhsPlatform;
            rhsPlatform = (that.isSetPlatform()?that.getPlatform():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "platform", lhsPlatform), LocatorUtils.property(thatLocator, "platform", rhsPlatform), lhsPlatform, rhsPlatform, this.isSetPlatform(), that.isSetPlatform())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CharacterStringPropertyType theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription, this.isSetDescription());
        }
        {
            CICitationPropertyType theCitation;
            theCitation = this.getCitation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "citation", theCitation), currentHashCode, theCitation, this.isSetCitation());
        }
        {
            MDIdentifierPropertyType theIdentifier;
            theIdentifier = this.getIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier, this.isSetIdentifier());
        }
        {
            MDProgressCodePropertyType theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus, this.isSetStatus());
        }
        {
            MIOperationTypeCodePropertyType theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType, this.isSetType());
        }
        {
            List<MIObjectivePropertyType> theObjective;
            theObjective = (this.isSetObjective()?this.getObjective():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "objective", theObjective), currentHashCode, theObjective, this.isSetObjective());
        }
        {
            MIPlanPropertyType thePlan;
            thePlan = this.getPlan();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "plan", thePlan), currentHashCode, thePlan, this.isSetPlan());
        }
        {
            List<MIOperationPropertyType> theChildOperation;
            theChildOperation = (this.isSetChildOperation()?this.getChildOperation():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "childOperation", theChildOperation), currentHashCode, theChildOperation, this.isSetChildOperation());
        }
        {
            List<MIEventPropertyType> theSignificantEvent;
            theSignificantEvent = (this.isSetSignificantEvent()?this.getSignificantEvent():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "significantEvent", theSignificantEvent), currentHashCode, theSignificantEvent, this.isSetSignificantEvent());
        }
        {
            List<MIPlatformPropertyType> thePlatform;
            thePlatform = (this.isSetPlatform()?this.getPlatform():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "platform", thePlatform), currentHashCode, thePlatform, this.isSetPlatform());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MIOperationType) {
            final MIOperationType copy = ((MIOperationType) draftCopy);
            {
                Boolean descriptionShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetDescription());
                if (descriptionShouldBeCopiedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType sourceDescription;
                    sourceDescription = this.getDescription();
                    CharacterStringPropertyType copyDescription = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "description", sourceDescription), sourceDescription, this.isSetDescription()));
                    copy.setDescription(copyDescription);
                } else {
                    if (descriptionShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.description = null;
                    }
                }
            }
            {
                Boolean citationShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetCitation());
                if (citationShouldBeCopiedAndSet == Boolean.TRUE) {
                    CICitationPropertyType sourceCitation;
                    sourceCitation = this.getCitation();
                    CICitationPropertyType copyCitation = ((CICitationPropertyType) strategy.copy(LocatorUtils.property(locator, "citation", sourceCitation), sourceCitation, this.isSetCitation()));
                    copy.setCitation(copyCitation);
                } else {
                    if (citationShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.citation = null;
                    }
                }
            }
            {
                Boolean identifierShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetIdentifier());
                if (identifierShouldBeCopiedAndSet == Boolean.TRUE) {
                    MDIdentifierPropertyType sourceIdentifier;
                    sourceIdentifier = this.getIdentifier();
                    MDIdentifierPropertyType copyIdentifier = ((MDIdentifierPropertyType) strategy.copy(LocatorUtils.property(locator, "identifier", sourceIdentifier), sourceIdentifier, this.isSetIdentifier()));
                    copy.setIdentifier(copyIdentifier);
                } else {
                    if (identifierShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.identifier = null;
                    }
                }
            }
            {
                Boolean statusShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetStatus());
                if (statusShouldBeCopiedAndSet == Boolean.TRUE) {
                    MDProgressCodePropertyType sourceStatus;
                    sourceStatus = this.getStatus();
                    MDProgressCodePropertyType copyStatus = ((MDProgressCodePropertyType) strategy.copy(LocatorUtils.property(locator, "status", sourceStatus), sourceStatus, this.isSetStatus()));
                    copy.setStatus(copyStatus);
                } else {
                    if (statusShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.status = null;
                    }
                }
            }
            {
                Boolean typeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetType());
                if (typeShouldBeCopiedAndSet == Boolean.TRUE) {
                    MIOperationTypeCodePropertyType sourceType;
                    sourceType = this.getType();
                    MIOperationTypeCodePropertyType copyType = ((MIOperationTypeCodePropertyType) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType, this.isSetType()));
                    copy.setType(copyType);
                } else {
                    if (typeShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.type = null;
                    }
                }
            }
            {
                Boolean objectiveShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetObjective());
                if (objectiveShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MIObjectivePropertyType> sourceObjective;
                    sourceObjective = (this.isSetObjective()?this.getObjective():null);
                    @SuppressWarnings("unchecked")
                    List<MIObjectivePropertyType> copyObjective = ((List<MIObjectivePropertyType> ) strategy.copy(LocatorUtils.property(locator, "objective", sourceObjective), sourceObjective, this.isSetObjective()));
                    copy.unsetObjective();
                    if (copyObjective!= null) {
                        List<MIObjectivePropertyType> uniqueObjectivel = copy.getObjective();
                        uniqueObjectivel.addAll(copyObjective);
                    }
                } else {
                    if (objectiveShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetObjective();
                    }
                }
            }
            {
                Boolean planShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetPlan());
                if (planShouldBeCopiedAndSet == Boolean.TRUE) {
                    MIPlanPropertyType sourcePlan;
                    sourcePlan = this.getPlan();
                    MIPlanPropertyType copyPlan = ((MIPlanPropertyType) strategy.copy(LocatorUtils.property(locator, "plan", sourcePlan), sourcePlan, this.isSetPlan()));
                    copy.setPlan(copyPlan);
                } else {
                    if (planShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.plan = null;
                    }
                }
            }
            {
                Boolean childOperationShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetChildOperation());
                if (childOperationShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MIOperationPropertyType> sourceChildOperation;
                    sourceChildOperation = (this.isSetChildOperation()?this.getChildOperation():null);
                    @SuppressWarnings("unchecked")
                    List<MIOperationPropertyType> copyChildOperation = ((List<MIOperationPropertyType> ) strategy.copy(LocatorUtils.property(locator, "childOperation", sourceChildOperation), sourceChildOperation, this.isSetChildOperation()));
                    copy.unsetChildOperation();
                    if (copyChildOperation!= null) {
                        List<MIOperationPropertyType> uniqueChildOperationl = copy.getChildOperation();
                        uniqueChildOperationl.addAll(copyChildOperation);
                    }
                } else {
                    if (childOperationShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetChildOperation();
                    }
                }
            }
            {
                Boolean significantEventShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetSignificantEvent());
                if (significantEventShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MIEventPropertyType> sourceSignificantEvent;
                    sourceSignificantEvent = (this.isSetSignificantEvent()?this.getSignificantEvent():null);
                    @SuppressWarnings("unchecked")
                    List<MIEventPropertyType> copySignificantEvent = ((List<MIEventPropertyType> ) strategy.copy(LocatorUtils.property(locator, "significantEvent", sourceSignificantEvent), sourceSignificantEvent, this.isSetSignificantEvent()));
                    copy.unsetSignificantEvent();
                    if (copySignificantEvent!= null) {
                        List<MIEventPropertyType> uniqueSignificantEventl = copy.getSignificantEvent();
                        uniqueSignificantEventl.addAll(copySignificantEvent);
                    }
                } else {
                    if (significantEventShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetSignificantEvent();
                    }
                }
            }
            {
                Boolean platformShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetPlatform());
                if (platformShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MIPlatformPropertyType> sourcePlatform;
                    sourcePlatform = (this.isSetPlatform()?this.getPlatform():null);
                    @SuppressWarnings("unchecked")
                    List<MIPlatformPropertyType> copyPlatform = ((List<MIPlatformPropertyType> ) strategy.copy(LocatorUtils.property(locator, "platform", sourcePlatform), sourcePlatform, this.isSetPlatform()));
                    copy.unsetPlatform();
                    if (copyPlatform!= null) {
                        List<MIPlatformPropertyType> uniquePlatforml = copy.getPlatform();
                        uniquePlatforml.addAll(copyPlatform);
                    }
                } else {
                    if (platformShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetPlatform();
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MIOperationType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof MIOperationType) {
            final MIOperationType target = this;
            final MIOperationType leftObject = ((MIOperationType) left);
            final MIOperationType rightObject = ((MIOperationType) right);
            {
                Boolean descriptionShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetDescription(), rightObject.isSetDescription());
                if (descriptionShouldBeMergedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType lhsDescription;
                    lhsDescription = leftObject.getDescription();
                    CharacterStringPropertyType rhsDescription;
                    rhsDescription = rightObject.getDescription();
                    CharacterStringPropertyType mergedDescription = ((CharacterStringPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "description", lhsDescription), LocatorUtils.property(rightLocator, "description", rhsDescription), lhsDescription, rhsDescription, leftObject.isSetDescription(), rightObject.isSetDescription()));
                    target.setDescription(mergedDescription);
                } else {
                    if (descriptionShouldBeMergedAndSet == Boolean.FALSE) {
                        target.description = null;
                    }
                }
            }
            {
                Boolean citationShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetCitation(), rightObject.isSetCitation());
                if (citationShouldBeMergedAndSet == Boolean.TRUE) {
                    CICitationPropertyType lhsCitation;
                    lhsCitation = leftObject.getCitation();
                    CICitationPropertyType rhsCitation;
                    rhsCitation = rightObject.getCitation();
                    CICitationPropertyType mergedCitation = ((CICitationPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "citation", lhsCitation), LocatorUtils.property(rightLocator, "citation", rhsCitation), lhsCitation, rhsCitation, leftObject.isSetCitation(), rightObject.isSetCitation()));
                    target.setCitation(mergedCitation);
                } else {
                    if (citationShouldBeMergedAndSet == Boolean.FALSE) {
                        target.citation = null;
                    }
                }
            }
            {
                Boolean identifierShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetIdentifier(), rightObject.isSetIdentifier());
                if (identifierShouldBeMergedAndSet == Boolean.TRUE) {
                    MDIdentifierPropertyType lhsIdentifier;
                    lhsIdentifier = leftObject.getIdentifier();
                    MDIdentifierPropertyType rhsIdentifier;
                    rhsIdentifier = rightObject.getIdentifier();
                    MDIdentifierPropertyType mergedIdentifier = ((MDIdentifierPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "identifier", lhsIdentifier), LocatorUtils.property(rightLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier, leftObject.isSetIdentifier(), rightObject.isSetIdentifier()));
                    target.setIdentifier(mergedIdentifier);
                } else {
                    if (identifierShouldBeMergedAndSet == Boolean.FALSE) {
                        target.identifier = null;
                    }
                }
            }
            {
                Boolean statusShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetStatus(), rightObject.isSetStatus());
                if (statusShouldBeMergedAndSet == Boolean.TRUE) {
                    MDProgressCodePropertyType lhsStatus;
                    lhsStatus = leftObject.getStatus();
                    MDProgressCodePropertyType rhsStatus;
                    rhsStatus = rightObject.getStatus();
                    MDProgressCodePropertyType mergedStatus = ((MDProgressCodePropertyType) strategy.merge(LocatorUtils.property(leftLocator, "status", lhsStatus), LocatorUtils.property(rightLocator, "status", rhsStatus), lhsStatus, rhsStatus, leftObject.isSetStatus(), rightObject.isSetStatus()));
                    target.setStatus(mergedStatus);
                } else {
                    if (statusShouldBeMergedAndSet == Boolean.FALSE) {
                        target.status = null;
                    }
                }
            }
            {
                Boolean typeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetType(), rightObject.isSetType());
                if (typeShouldBeMergedAndSet == Boolean.TRUE) {
                    MIOperationTypeCodePropertyType lhsType;
                    lhsType = leftObject.getType();
                    MIOperationTypeCodePropertyType rhsType;
                    rhsType = rightObject.getType();
                    MIOperationTypeCodePropertyType mergedType = ((MIOperationTypeCodePropertyType) strategy.merge(LocatorUtils.property(leftLocator, "type", lhsType), LocatorUtils.property(rightLocator, "type", rhsType), lhsType, rhsType, leftObject.isSetType(), rightObject.isSetType()));
                    target.setType(mergedType);
                } else {
                    if (typeShouldBeMergedAndSet == Boolean.FALSE) {
                        target.type = null;
                    }
                }
            }
            {
                Boolean objectiveShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetObjective(), rightObject.isSetObjective());
                if (objectiveShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MIObjectivePropertyType> lhsObjective;
                    lhsObjective = (leftObject.isSetObjective()?leftObject.getObjective():null);
                    List<MIObjectivePropertyType> rhsObjective;
                    rhsObjective = (rightObject.isSetObjective()?rightObject.getObjective():null);
                    List<MIObjectivePropertyType> mergedObjective = ((List<MIObjectivePropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "objective", lhsObjective), LocatorUtils.property(rightLocator, "objective", rhsObjective), lhsObjective, rhsObjective, leftObject.isSetObjective(), rightObject.isSetObjective()));
                    target.unsetObjective();
                    if (mergedObjective!= null) {
                        List<MIObjectivePropertyType> uniqueObjectivel = target.getObjective();
                        uniqueObjectivel.addAll(mergedObjective);
                    }
                } else {
                    if (objectiveShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetObjective();
                    }
                }
            }
            {
                Boolean planShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetPlan(), rightObject.isSetPlan());
                if (planShouldBeMergedAndSet == Boolean.TRUE) {
                    MIPlanPropertyType lhsPlan;
                    lhsPlan = leftObject.getPlan();
                    MIPlanPropertyType rhsPlan;
                    rhsPlan = rightObject.getPlan();
                    MIPlanPropertyType mergedPlan = ((MIPlanPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "plan", lhsPlan), LocatorUtils.property(rightLocator, "plan", rhsPlan), lhsPlan, rhsPlan, leftObject.isSetPlan(), rightObject.isSetPlan()));
                    target.setPlan(mergedPlan);
                } else {
                    if (planShouldBeMergedAndSet == Boolean.FALSE) {
                        target.plan = null;
                    }
                }
            }
            {
                Boolean childOperationShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetChildOperation(), rightObject.isSetChildOperation());
                if (childOperationShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MIOperationPropertyType> lhsChildOperation;
                    lhsChildOperation = (leftObject.isSetChildOperation()?leftObject.getChildOperation():null);
                    List<MIOperationPropertyType> rhsChildOperation;
                    rhsChildOperation = (rightObject.isSetChildOperation()?rightObject.getChildOperation():null);
                    List<MIOperationPropertyType> mergedChildOperation = ((List<MIOperationPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "childOperation", lhsChildOperation), LocatorUtils.property(rightLocator, "childOperation", rhsChildOperation), lhsChildOperation, rhsChildOperation, leftObject.isSetChildOperation(), rightObject.isSetChildOperation()));
                    target.unsetChildOperation();
                    if (mergedChildOperation!= null) {
                        List<MIOperationPropertyType> uniqueChildOperationl = target.getChildOperation();
                        uniqueChildOperationl.addAll(mergedChildOperation);
                    }
                } else {
                    if (childOperationShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetChildOperation();
                    }
                }
            }
            {
                Boolean significantEventShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetSignificantEvent(), rightObject.isSetSignificantEvent());
                if (significantEventShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MIEventPropertyType> lhsSignificantEvent;
                    lhsSignificantEvent = (leftObject.isSetSignificantEvent()?leftObject.getSignificantEvent():null);
                    List<MIEventPropertyType> rhsSignificantEvent;
                    rhsSignificantEvent = (rightObject.isSetSignificantEvent()?rightObject.getSignificantEvent():null);
                    List<MIEventPropertyType> mergedSignificantEvent = ((List<MIEventPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "significantEvent", lhsSignificantEvent), LocatorUtils.property(rightLocator, "significantEvent", rhsSignificantEvent), lhsSignificantEvent, rhsSignificantEvent, leftObject.isSetSignificantEvent(), rightObject.isSetSignificantEvent()));
                    target.unsetSignificantEvent();
                    if (mergedSignificantEvent!= null) {
                        List<MIEventPropertyType> uniqueSignificantEventl = target.getSignificantEvent();
                        uniqueSignificantEventl.addAll(mergedSignificantEvent);
                    }
                } else {
                    if (significantEventShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetSignificantEvent();
                    }
                }
            }
            {
                Boolean platformShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetPlatform(), rightObject.isSetPlatform());
                if (platformShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MIPlatformPropertyType> lhsPlatform;
                    lhsPlatform = (leftObject.isSetPlatform()?leftObject.getPlatform():null);
                    List<MIPlatformPropertyType> rhsPlatform;
                    rhsPlatform = (rightObject.isSetPlatform()?rightObject.getPlatform():null);
                    List<MIPlatformPropertyType> mergedPlatform = ((List<MIPlatformPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "platform", lhsPlatform), LocatorUtils.property(rightLocator, "platform", rhsPlatform), lhsPlatform, rhsPlatform, leftObject.isSetPlatform(), rightObject.isSetPlatform()));
                    target.unsetPlatform();
                    if (mergedPlatform!= null) {
                        List<MIPlatformPropertyType> uniquePlatforml = target.getPlatform();
                        uniquePlatforml.addAll(mergedPlatform);
                    }
                } else {
                    if (platformShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetPlatform();
                    }
                }
            }
        }
    }

    public void setObjective(List<MIObjectivePropertyType> value) {
        this.objective = null;
        if (value!= null) {
            List<MIObjectivePropertyType> draftl = this.getObjective();
            draftl.addAll(value);
        }
    }

    public void setChildOperation(List<MIOperationPropertyType> value) {
        this.childOperation = null;
        if (value!= null) {
            List<MIOperationPropertyType> draftl = this.getChildOperation();
            draftl.addAll(value);
        }
    }

    public void setSignificantEvent(List<MIEventPropertyType> value) {
        this.significantEvent = null;
        if (value!= null) {
            List<MIEventPropertyType> draftl = this.getSignificantEvent();
            draftl.addAll(value);
        }
    }

    public void setPlatform(List<MIPlatformPropertyType> value) {
        this.platform = null;
        if (value!= null) {
            List<MIPlatformPropertyType> draftl = this.getPlatform();
            draftl.addAll(value);
        }
    }

    public MIOperationType withDescription(CharacterStringPropertyType value) {
        setDescription(value);
        return this;
    }

    public MIOperationType withCitation(CICitationPropertyType value) {
        setCitation(value);
        return this;
    }

    public MIOperationType withIdentifier(MDIdentifierPropertyType value) {
        setIdentifier(value);
        return this;
    }

    public MIOperationType withStatus(MDProgressCodePropertyType value) {
        setStatus(value);
        return this;
    }

    public MIOperationType withType(MIOperationTypeCodePropertyType value) {
        setType(value);
        return this;
    }

    public MIOperationType withObjective(MIObjectivePropertyType... values) {
        if (values!= null) {
            for (MIObjectivePropertyType value: values) {
                getObjective().add(value);
            }
        }
        return this;
    }

    public MIOperationType withObjective(Collection<MIObjectivePropertyType> values) {
        if (values!= null) {
            getObjective().addAll(values);
        }
        return this;
    }

    public MIOperationType withPlan(MIPlanPropertyType value) {
        setPlan(value);
        return this;
    }

    public MIOperationType withChildOperation(MIOperationPropertyType... values) {
        if (values!= null) {
            for (MIOperationPropertyType value: values) {
                getChildOperation().add(value);
            }
        }
        return this;
    }

    public MIOperationType withChildOperation(Collection<MIOperationPropertyType> values) {
        if (values!= null) {
            getChildOperation().addAll(values);
        }
        return this;
    }

    public MIOperationType withSignificantEvent(MIEventPropertyType... values) {
        if (values!= null) {
            for (MIEventPropertyType value: values) {
                getSignificantEvent().add(value);
            }
        }
        return this;
    }

    public MIOperationType withSignificantEvent(Collection<MIEventPropertyType> values) {
        if (values!= null) {
            getSignificantEvent().addAll(values);
        }
        return this;
    }

    public MIOperationType withPlatform(MIPlatformPropertyType... values) {
        if (values!= null) {
            for (MIPlatformPropertyType value: values) {
                getPlatform().add(value);
            }
        }
        return this;
    }

    public MIOperationType withPlatform(Collection<MIPlatformPropertyType> values) {
        if (values!= null) {
            getPlatform().addAll(values);
        }
        return this;
    }

    public MIOperationType withObjective(List<MIObjectivePropertyType> value) {
        setObjective(value);
        return this;
    }

    public MIOperationType withChildOperation(List<MIOperationPropertyType> value) {
        setChildOperation(value);
        return this;
    }

    public MIOperationType withSignificantEvent(List<MIEventPropertyType> value) {
        setSignificantEvent(value);
        return this;
    }

    public MIOperationType withPlatform(List<MIPlatformPropertyType> value) {
        setPlatform(value);
        return this;
    }

}
