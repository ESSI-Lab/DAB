//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.02.26 at 04:55:57 PM AST 
//


package eu.essi_lab.jaxb.iso19139_2.gmi.v_1_0;

/*-
 * #%L
 * Discovery and Access Broker (DAB) Community Edition (CE)
 * %%
 * Copyright (C) 2021 - 2025 National Research Council of Italy (CNR)/Institute of Atmospheric Pollution Research (IIA)/ESSI-Lab
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import net.opengis.iso19139.gco.v_20060504.AbstractObjectType;
import net.opengis.iso19139.gco.v_20060504.DateTimePropertyType;
import net.opengis.iso19139.gmd.v_20060504.MDIdentifierPropertyType;


/**
 * Description: identification of a significant collection point within an operation - shortName: Event
 * 
 * <p>Java class for MI_Event_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MI_Event_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="identifier" type="{http://www.isotc211.org/2005/gmd}MD_Identifier_PropertyType"/&gt;
 *         &lt;element name="trigger" type="{http://www.isotc211.org/2005/gmi}MI_TriggerCode_PropertyType"/&gt;
 *         &lt;element name="context" type="{http://www.isotc211.org/2005/gmi}MI_ContextCode_PropertyType"/&gt;
 *         &lt;element name="sequence" type="{http://www.isotc211.org/2005/gmi}MI_SequenceCode_PropertyType"/&gt;
 *         &lt;element name="time" type="{http://www.isotc211.org/2005/gco}DateTime_PropertyType"/&gt;
 *         &lt;element name="expectedObjective" type="{http://www.isotc211.org/2005/gmi}MI_Objective_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="relatedSensor" type="{http://www.isotc211.org/2005/gmi}MI_Instrument_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="relatedPass" type="{http://www.isotc211.org/2005/gmi}MI_PlatformPass_PropertyType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MI_Event_Type", propOrder = {
    "identifier",
    "trigger",
    "context",
    "sequence",
    "time",
    "expectedObjective",
    "relatedSensor",
    "relatedPass"
})
public class MIEventType
    extends AbstractObjectType
    implements Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    @XmlElement(required = true)
    protected MDIdentifierPropertyType identifier;
    @XmlElement(required = true)
    protected MITriggerCodePropertyType trigger;
    @XmlElement(required = true)
    protected MIContextCodePropertyType context;
    @XmlElement(required = true)
    protected MISequenceCodePropertyType sequence;
    @XmlElement(required = true)
    protected DateTimePropertyType time;
    protected List<MIObjectivePropertyType> expectedObjective;
    protected List<MIInstrumentPropertyType> relatedSensor;
    protected MIPlatformPassPropertyType relatedPass;

    /**
     * Gets the value of the identifier property.
     * 
     * @return
     *     possible object is
     *     {@link MDIdentifierPropertyType }
     *     
     */
    public MDIdentifierPropertyType getIdentifier() {
        return identifier;
    }

    /**
     * Sets the value of the identifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDIdentifierPropertyType }
     *     
     */
    public void setIdentifier(MDIdentifierPropertyType value) {
        this.identifier = value;
    }

    public boolean isSetIdentifier() {
        return (this.identifier!= null);
    }

    /**
     * Gets the value of the trigger property.
     * 
     * @return
     *     possible object is
     *     {@link MITriggerCodePropertyType }
     *     
     */
    public MITriggerCodePropertyType getTrigger() {
        return trigger;
    }

    /**
     * Sets the value of the trigger property.
     * 
     * @param value
     *     allowed object is
     *     {@link MITriggerCodePropertyType }
     *     
     */
    public void setTrigger(MITriggerCodePropertyType value) {
        this.trigger = value;
    }

    public boolean isSetTrigger() {
        return (this.trigger!= null);
    }

    /**
     * Gets the value of the context property.
     * 
     * @return
     *     possible object is
     *     {@link MIContextCodePropertyType }
     *     
     */
    public MIContextCodePropertyType getContext() {
        return context;
    }

    /**
     * Sets the value of the context property.
     * 
     * @param value
     *     allowed object is
     *     {@link MIContextCodePropertyType }
     *     
     */
    public void setContext(MIContextCodePropertyType value) {
        this.context = value;
    }

    public boolean isSetContext() {
        return (this.context!= null);
    }

    /**
     * Gets the value of the sequence property.
     * 
     * @return
     *     possible object is
     *     {@link MISequenceCodePropertyType }
     *     
     */
    public MISequenceCodePropertyType getSequence() {
        return sequence;
    }

    /**
     * Sets the value of the sequence property.
     * 
     * @param value
     *     allowed object is
     *     {@link MISequenceCodePropertyType }
     *     
     */
    public void setSequence(MISequenceCodePropertyType value) {
        this.sequence = value;
    }

    public boolean isSetSequence() {
        return (this.sequence!= null);
    }

    /**
     * Gets the value of the time property.
     * 
     * @return
     *     possible object is
     *     {@link DateTimePropertyType }
     *     
     */
    public DateTimePropertyType getTime() {
        return time;
    }

    /**
     * Sets the value of the time property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTimePropertyType }
     *     
     */
    public void setTime(DateTimePropertyType value) {
        this.time = value;
    }

    public boolean isSetTime() {
        return (this.time!= null);
    }

    /**
     * Gets the value of the expectedObjective property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the expectedObjective property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getExpectedObjective().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MIObjectivePropertyType }
     * 
     * 
     */
    public List<MIObjectivePropertyType> getExpectedObjective() {
        if (expectedObjective == null) {
            expectedObjective = new ArrayList<MIObjectivePropertyType>();
        }
        return this.expectedObjective;
    }

    public boolean isSetExpectedObjective() {
        return ((this.expectedObjective!= null)&&(!this.expectedObjective.isEmpty()));
    }

    public void unsetExpectedObjective() {
        this.expectedObjective = null;
    }

    /**
     * Gets the value of the relatedSensor property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the relatedSensor property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRelatedSensor().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MIInstrumentPropertyType }
     * 
     * 
     */
    public List<MIInstrumentPropertyType> getRelatedSensor() {
        if (relatedSensor == null) {
            relatedSensor = new ArrayList<MIInstrumentPropertyType>();
        }
        return this.relatedSensor;
    }

    public boolean isSetRelatedSensor() {
        return ((this.relatedSensor!= null)&&(!this.relatedSensor.isEmpty()));
    }

    public void unsetRelatedSensor() {
        this.relatedSensor = null;
    }

    /**
     * Gets the value of the relatedPass property.
     * 
     * @return
     *     possible object is
     *     {@link MIPlatformPassPropertyType }
     *     
     */
    public MIPlatformPassPropertyType getRelatedPass() {
        return relatedPass;
    }

    /**
     * Sets the value of the relatedPass property.
     * 
     * @param value
     *     allowed object is
     *     {@link MIPlatformPassPropertyType }
     *     
     */
    public void setRelatedPass(MIPlatformPassPropertyType value) {
        this.relatedPass = value;
    }

    public boolean isSetRelatedPass() {
        return (this.relatedPass!= null);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            MDIdentifierPropertyType theIdentifier;
            theIdentifier = this.getIdentifier();
            strategy.appendField(locator, this, "identifier", buffer, theIdentifier, this.isSetIdentifier());
        }
        {
            MITriggerCodePropertyType theTrigger;
            theTrigger = this.getTrigger();
            strategy.appendField(locator, this, "trigger", buffer, theTrigger, this.isSetTrigger());
        }
        {
            MIContextCodePropertyType theContext;
            theContext = this.getContext();
            strategy.appendField(locator, this, "context", buffer, theContext, this.isSetContext());
        }
        {
            MISequenceCodePropertyType theSequence;
            theSequence = this.getSequence();
            strategy.appendField(locator, this, "sequence", buffer, theSequence, this.isSetSequence());
        }
        {
            DateTimePropertyType theTime;
            theTime = this.getTime();
            strategy.appendField(locator, this, "time", buffer, theTime, this.isSetTime());
        }
        {
            List<MIObjectivePropertyType> theExpectedObjective;
            theExpectedObjective = (this.isSetExpectedObjective()?this.getExpectedObjective():null);
            strategy.appendField(locator, this, "expectedObjective", buffer, theExpectedObjective, this.isSetExpectedObjective());
        }
        {
            List<MIInstrumentPropertyType> theRelatedSensor;
            theRelatedSensor = (this.isSetRelatedSensor()?this.getRelatedSensor():null);
            strategy.appendField(locator, this, "relatedSensor", buffer, theRelatedSensor, this.isSetRelatedSensor());
        }
        {
            MIPlatformPassPropertyType theRelatedPass;
            theRelatedPass = this.getRelatedPass();
            strategy.appendField(locator, this, "relatedPass", buffer, theRelatedPass, this.isSetRelatedPass());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MIEventType that = ((MIEventType) object);
        {
            MDIdentifierPropertyType lhsIdentifier;
            lhsIdentifier = this.getIdentifier();
            MDIdentifierPropertyType rhsIdentifier;
            rhsIdentifier = that.getIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier, this.isSetIdentifier(), that.isSetIdentifier())) {
                return false;
            }
        }
        {
            MITriggerCodePropertyType lhsTrigger;
            lhsTrigger = this.getTrigger();
            MITriggerCodePropertyType rhsTrigger;
            rhsTrigger = that.getTrigger();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "trigger", lhsTrigger), LocatorUtils.property(thatLocator, "trigger", rhsTrigger), lhsTrigger, rhsTrigger, this.isSetTrigger(), that.isSetTrigger())) {
                return false;
            }
        }
        {
            MIContextCodePropertyType lhsContext;
            lhsContext = this.getContext();
            MIContextCodePropertyType rhsContext;
            rhsContext = that.getContext();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "context", lhsContext), LocatorUtils.property(thatLocator, "context", rhsContext), lhsContext, rhsContext, this.isSetContext(), that.isSetContext())) {
                return false;
            }
        }
        {
            MISequenceCodePropertyType lhsSequence;
            lhsSequence = this.getSequence();
            MISequenceCodePropertyType rhsSequence;
            rhsSequence = that.getSequence();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sequence", lhsSequence), LocatorUtils.property(thatLocator, "sequence", rhsSequence), lhsSequence, rhsSequence, this.isSetSequence(), that.isSetSequence())) {
                return false;
            }
        }
        {
            DateTimePropertyType lhsTime;
            lhsTime = this.getTime();
            DateTimePropertyType rhsTime;
            rhsTime = that.getTime();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "time", lhsTime), LocatorUtils.property(thatLocator, "time", rhsTime), lhsTime, rhsTime, this.isSetTime(), that.isSetTime())) {
                return false;
            }
        }
        {
            List<MIObjectivePropertyType> lhsExpectedObjective;
            lhsExpectedObjective = (this.isSetExpectedObjective()?this.getExpectedObjective():null);
            List<MIObjectivePropertyType> rhsExpectedObjective;
            rhsExpectedObjective = (that.isSetExpectedObjective()?that.getExpectedObjective():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "expectedObjective", lhsExpectedObjective), LocatorUtils.property(thatLocator, "expectedObjective", rhsExpectedObjective), lhsExpectedObjective, rhsExpectedObjective, this.isSetExpectedObjective(), that.isSetExpectedObjective())) {
                return false;
            }
        }
        {
            List<MIInstrumentPropertyType> lhsRelatedSensor;
            lhsRelatedSensor = (this.isSetRelatedSensor()?this.getRelatedSensor():null);
            List<MIInstrumentPropertyType> rhsRelatedSensor;
            rhsRelatedSensor = (that.isSetRelatedSensor()?that.getRelatedSensor():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "relatedSensor", lhsRelatedSensor), LocatorUtils.property(thatLocator, "relatedSensor", rhsRelatedSensor), lhsRelatedSensor, rhsRelatedSensor, this.isSetRelatedSensor(), that.isSetRelatedSensor())) {
                return false;
            }
        }
        {
            MIPlatformPassPropertyType lhsRelatedPass;
            lhsRelatedPass = this.getRelatedPass();
            MIPlatformPassPropertyType rhsRelatedPass;
            rhsRelatedPass = that.getRelatedPass();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "relatedPass", lhsRelatedPass), LocatorUtils.property(thatLocator, "relatedPass", rhsRelatedPass), lhsRelatedPass, rhsRelatedPass, this.isSetRelatedPass(), that.isSetRelatedPass())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            MDIdentifierPropertyType theIdentifier;
            theIdentifier = this.getIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier, this.isSetIdentifier());
        }
        {
            MITriggerCodePropertyType theTrigger;
            theTrigger = this.getTrigger();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "trigger", theTrigger), currentHashCode, theTrigger, this.isSetTrigger());
        }
        {
            MIContextCodePropertyType theContext;
            theContext = this.getContext();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "context", theContext), currentHashCode, theContext, this.isSetContext());
        }
        {
            MISequenceCodePropertyType theSequence;
            theSequence = this.getSequence();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sequence", theSequence), currentHashCode, theSequence, this.isSetSequence());
        }
        {
            DateTimePropertyType theTime;
            theTime = this.getTime();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "time", theTime), currentHashCode, theTime, this.isSetTime());
        }
        {
            List<MIObjectivePropertyType> theExpectedObjective;
            theExpectedObjective = (this.isSetExpectedObjective()?this.getExpectedObjective():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "expectedObjective", theExpectedObjective), currentHashCode, theExpectedObjective, this.isSetExpectedObjective());
        }
        {
            List<MIInstrumentPropertyType> theRelatedSensor;
            theRelatedSensor = (this.isSetRelatedSensor()?this.getRelatedSensor():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "relatedSensor", theRelatedSensor), currentHashCode, theRelatedSensor, this.isSetRelatedSensor());
        }
        {
            MIPlatformPassPropertyType theRelatedPass;
            theRelatedPass = this.getRelatedPass();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "relatedPass", theRelatedPass), currentHashCode, theRelatedPass, this.isSetRelatedPass());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MIEventType) {
            final MIEventType copy = ((MIEventType) draftCopy);
            {
                Boolean identifierShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetIdentifier());
                if (identifierShouldBeCopiedAndSet == Boolean.TRUE) {
                    MDIdentifierPropertyType sourceIdentifier;
                    sourceIdentifier = this.getIdentifier();
                    MDIdentifierPropertyType copyIdentifier = ((MDIdentifierPropertyType) strategy.copy(LocatorUtils.property(locator, "identifier", sourceIdentifier), sourceIdentifier, this.isSetIdentifier()));
                    copy.setIdentifier(copyIdentifier);
                } else {
                    if (identifierShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.identifier = null;
                    }
                }
            }
            {
                Boolean triggerShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetTrigger());
                if (triggerShouldBeCopiedAndSet == Boolean.TRUE) {
                    MITriggerCodePropertyType sourceTrigger;
                    sourceTrigger = this.getTrigger();
                    MITriggerCodePropertyType copyTrigger = ((MITriggerCodePropertyType) strategy.copy(LocatorUtils.property(locator, "trigger", sourceTrigger), sourceTrigger, this.isSetTrigger()));
                    copy.setTrigger(copyTrigger);
                } else {
                    if (triggerShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.trigger = null;
                    }
                }
            }
            {
                Boolean contextShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetContext());
                if (contextShouldBeCopiedAndSet == Boolean.TRUE) {
                    MIContextCodePropertyType sourceContext;
                    sourceContext = this.getContext();
                    MIContextCodePropertyType copyContext = ((MIContextCodePropertyType) strategy.copy(LocatorUtils.property(locator, "context", sourceContext), sourceContext, this.isSetContext()));
                    copy.setContext(copyContext);
                } else {
                    if (contextShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.context = null;
                    }
                }
            }
            {
                Boolean sequenceShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetSequence());
                if (sequenceShouldBeCopiedAndSet == Boolean.TRUE) {
                    MISequenceCodePropertyType sourceSequence;
                    sourceSequence = this.getSequence();
                    MISequenceCodePropertyType copySequence = ((MISequenceCodePropertyType) strategy.copy(LocatorUtils.property(locator, "sequence", sourceSequence), sourceSequence, this.isSetSequence()));
                    copy.setSequence(copySequence);
                } else {
                    if (sequenceShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.sequence = null;
                    }
                }
            }
            {
                Boolean timeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetTime());
                if (timeShouldBeCopiedAndSet == Boolean.TRUE) {
                    DateTimePropertyType sourceTime;
                    sourceTime = this.getTime();
                    DateTimePropertyType copyTime = ((DateTimePropertyType) strategy.copy(LocatorUtils.property(locator, "time", sourceTime), sourceTime, this.isSetTime()));
                    copy.setTime(copyTime);
                } else {
                    if (timeShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.time = null;
                    }
                }
            }
            {
                Boolean expectedObjectiveShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetExpectedObjective());
                if (expectedObjectiveShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MIObjectivePropertyType> sourceExpectedObjective;
                    sourceExpectedObjective = (this.isSetExpectedObjective()?this.getExpectedObjective():null);
                    @SuppressWarnings("unchecked")
                    List<MIObjectivePropertyType> copyExpectedObjective = ((List<MIObjectivePropertyType> ) strategy.copy(LocatorUtils.property(locator, "expectedObjective", sourceExpectedObjective), sourceExpectedObjective, this.isSetExpectedObjective()));
                    copy.unsetExpectedObjective();
                    if (copyExpectedObjective!= null) {
                        List<MIObjectivePropertyType> uniqueExpectedObjectivel = copy.getExpectedObjective();
                        uniqueExpectedObjectivel.addAll(copyExpectedObjective);
                    }
                } else {
                    if (expectedObjectiveShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetExpectedObjective();
                    }
                }
            }
            {
                Boolean relatedSensorShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetRelatedSensor());
                if (relatedSensorShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MIInstrumentPropertyType> sourceRelatedSensor;
                    sourceRelatedSensor = (this.isSetRelatedSensor()?this.getRelatedSensor():null);
                    @SuppressWarnings("unchecked")
                    List<MIInstrumentPropertyType> copyRelatedSensor = ((List<MIInstrumentPropertyType> ) strategy.copy(LocatorUtils.property(locator, "relatedSensor", sourceRelatedSensor), sourceRelatedSensor, this.isSetRelatedSensor()));
                    copy.unsetRelatedSensor();
                    if (copyRelatedSensor!= null) {
                        List<MIInstrumentPropertyType> uniqueRelatedSensorl = copy.getRelatedSensor();
                        uniqueRelatedSensorl.addAll(copyRelatedSensor);
                    }
                } else {
                    if (relatedSensorShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetRelatedSensor();
                    }
                }
            }
            {
                Boolean relatedPassShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetRelatedPass());
                if (relatedPassShouldBeCopiedAndSet == Boolean.TRUE) {
                    MIPlatformPassPropertyType sourceRelatedPass;
                    sourceRelatedPass = this.getRelatedPass();
                    MIPlatformPassPropertyType copyRelatedPass = ((MIPlatformPassPropertyType) strategy.copy(LocatorUtils.property(locator, "relatedPass", sourceRelatedPass), sourceRelatedPass, this.isSetRelatedPass()));
                    copy.setRelatedPass(copyRelatedPass);
                } else {
                    if (relatedPassShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.relatedPass = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MIEventType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof MIEventType) {
            final MIEventType target = this;
            final MIEventType leftObject = ((MIEventType) left);
            final MIEventType rightObject = ((MIEventType) right);
            {
                Boolean identifierShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetIdentifier(), rightObject.isSetIdentifier());
                if (identifierShouldBeMergedAndSet == Boolean.TRUE) {
                    MDIdentifierPropertyType lhsIdentifier;
                    lhsIdentifier = leftObject.getIdentifier();
                    MDIdentifierPropertyType rhsIdentifier;
                    rhsIdentifier = rightObject.getIdentifier();
                    MDIdentifierPropertyType mergedIdentifier = ((MDIdentifierPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "identifier", lhsIdentifier), LocatorUtils.property(rightLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier, leftObject.isSetIdentifier(), rightObject.isSetIdentifier()));
                    target.setIdentifier(mergedIdentifier);
                } else {
                    if (identifierShouldBeMergedAndSet == Boolean.FALSE) {
                        target.identifier = null;
                    }
                }
            }
            {
                Boolean triggerShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetTrigger(), rightObject.isSetTrigger());
                if (triggerShouldBeMergedAndSet == Boolean.TRUE) {
                    MITriggerCodePropertyType lhsTrigger;
                    lhsTrigger = leftObject.getTrigger();
                    MITriggerCodePropertyType rhsTrigger;
                    rhsTrigger = rightObject.getTrigger();
                    MITriggerCodePropertyType mergedTrigger = ((MITriggerCodePropertyType) strategy.merge(LocatorUtils.property(leftLocator, "trigger", lhsTrigger), LocatorUtils.property(rightLocator, "trigger", rhsTrigger), lhsTrigger, rhsTrigger, leftObject.isSetTrigger(), rightObject.isSetTrigger()));
                    target.setTrigger(mergedTrigger);
                } else {
                    if (triggerShouldBeMergedAndSet == Boolean.FALSE) {
                        target.trigger = null;
                    }
                }
            }
            {
                Boolean contextShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetContext(), rightObject.isSetContext());
                if (contextShouldBeMergedAndSet == Boolean.TRUE) {
                    MIContextCodePropertyType lhsContext;
                    lhsContext = leftObject.getContext();
                    MIContextCodePropertyType rhsContext;
                    rhsContext = rightObject.getContext();
                    MIContextCodePropertyType mergedContext = ((MIContextCodePropertyType) strategy.merge(LocatorUtils.property(leftLocator, "context", lhsContext), LocatorUtils.property(rightLocator, "context", rhsContext), lhsContext, rhsContext, leftObject.isSetContext(), rightObject.isSetContext()));
                    target.setContext(mergedContext);
                } else {
                    if (contextShouldBeMergedAndSet == Boolean.FALSE) {
                        target.context = null;
                    }
                }
            }
            {
                Boolean sequenceShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetSequence(), rightObject.isSetSequence());
                if (sequenceShouldBeMergedAndSet == Boolean.TRUE) {
                    MISequenceCodePropertyType lhsSequence;
                    lhsSequence = leftObject.getSequence();
                    MISequenceCodePropertyType rhsSequence;
                    rhsSequence = rightObject.getSequence();
                    MISequenceCodePropertyType mergedSequence = ((MISequenceCodePropertyType) strategy.merge(LocatorUtils.property(leftLocator, "sequence", lhsSequence), LocatorUtils.property(rightLocator, "sequence", rhsSequence), lhsSequence, rhsSequence, leftObject.isSetSequence(), rightObject.isSetSequence()));
                    target.setSequence(mergedSequence);
                } else {
                    if (sequenceShouldBeMergedAndSet == Boolean.FALSE) {
                        target.sequence = null;
                    }
                }
            }
            {
                Boolean timeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetTime(), rightObject.isSetTime());
                if (timeShouldBeMergedAndSet == Boolean.TRUE) {
                    DateTimePropertyType lhsTime;
                    lhsTime = leftObject.getTime();
                    DateTimePropertyType rhsTime;
                    rhsTime = rightObject.getTime();
                    DateTimePropertyType mergedTime = ((DateTimePropertyType) strategy.merge(LocatorUtils.property(leftLocator, "time", lhsTime), LocatorUtils.property(rightLocator, "time", rhsTime), lhsTime, rhsTime, leftObject.isSetTime(), rightObject.isSetTime()));
                    target.setTime(mergedTime);
                } else {
                    if (timeShouldBeMergedAndSet == Boolean.FALSE) {
                        target.time = null;
                    }
                }
            }
            {
                Boolean expectedObjectiveShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetExpectedObjective(), rightObject.isSetExpectedObjective());
                if (expectedObjectiveShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MIObjectivePropertyType> lhsExpectedObjective;
                    lhsExpectedObjective = (leftObject.isSetExpectedObjective()?leftObject.getExpectedObjective():null);
                    List<MIObjectivePropertyType> rhsExpectedObjective;
                    rhsExpectedObjective = (rightObject.isSetExpectedObjective()?rightObject.getExpectedObjective():null);
                    List<MIObjectivePropertyType> mergedExpectedObjective = ((List<MIObjectivePropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "expectedObjective", lhsExpectedObjective), LocatorUtils.property(rightLocator, "expectedObjective", rhsExpectedObjective), lhsExpectedObjective, rhsExpectedObjective, leftObject.isSetExpectedObjective(), rightObject.isSetExpectedObjective()));
                    target.unsetExpectedObjective();
                    if (mergedExpectedObjective!= null) {
                        List<MIObjectivePropertyType> uniqueExpectedObjectivel = target.getExpectedObjective();
                        uniqueExpectedObjectivel.addAll(mergedExpectedObjective);
                    }
                } else {
                    if (expectedObjectiveShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetExpectedObjective();
                    }
                }
            }
            {
                Boolean relatedSensorShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetRelatedSensor(), rightObject.isSetRelatedSensor());
                if (relatedSensorShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MIInstrumentPropertyType> lhsRelatedSensor;
                    lhsRelatedSensor = (leftObject.isSetRelatedSensor()?leftObject.getRelatedSensor():null);
                    List<MIInstrumentPropertyType> rhsRelatedSensor;
                    rhsRelatedSensor = (rightObject.isSetRelatedSensor()?rightObject.getRelatedSensor():null);
                    List<MIInstrumentPropertyType> mergedRelatedSensor = ((List<MIInstrumentPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "relatedSensor", lhsRelatedSensor), LocatorUtils.property(rightLocator, "relatedSensor", rhsRelatedSensor), lhsRelatedSensor, rhsRelatedSensor, leftObject.isSetRelatedSensor(), rightObject.isSetRelatedSensor()));
                    target.unsetRelatedSensor();
                    if (mergedRelatedSensor!= null) {
                        List<MIInstrumentPropertyType> uniqueRelatedSensorl = target.getRelatedSensor();
                        uniqueRelatedSensorl.addAll(mergedRelatedSensor);
                    }
                } else {
                    if (relatedSensorShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetRelatedSensor();
                    }
                }
            }
            {
                Boolean relatedPassShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetRelatedPass(), rightObject.isSetRelatedPass());
                if (relatedPassShouldBeMergedAndSet == Boolean.TRUE) {
                    MIPlatformPassPropertyType lhsRelatedPass;
                    lhsRelatedPass = leftObject.getRelatedPass();
                    MIPlatformPassPropertyType rhsRelatedPass;
                    rhsRelatedPass = rightObject.getRelatedPass();
                    MIPlatformPassPropertyType mergedRelatedPass = ((MIPlatformPassPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "relatedPass", lhsRelatedPass), LocatorUtils.property(rightLocator, "relatedPass", rhsRelatedPass), lhsRelatedPass, rhsRelatedPass, leftObject.isSetRelatedPass(), rightObject.isSetRelatedPass()));
                    target.setRelatedPass(mergedRelatedPass);
                } else {
                    if (relatedPassShouldBeMergedAndSet == Boolean.FALSE) {
                        target.relatedPass = null;
                    }
                }
            }
        }
    }

    public void setExpectedObjective(List<MIObjectivePropertyType> value) {
        this.expectedObjective = null;
        if (value!= null) {
            List<MIObjectivePropertyType> draftl = this.getExpectedObjective();
            draftl.addAll(value);
        }
    }

    public void setRelatedSensor(List<MIInstrumentPropertyType> value) {
        this.relatedSensor = null;
        if (value!= null) {
            List<MIInstrumentPropertyType> draftl = this.getRelatedSensor();
            draftl.addAll(value);
        }
    }

    public MIEventType withIdentifier(MDIdentifierPropertyType value) {
        setIdentifier(value);
        return this;
    }

    public MIEventType withTrigger(MITriggerCodePropertyType value) {
        setTrigger(value);
        return this;
    }

    public MIEventType withContext(MIContextCodePropertyType value) {
        setContext(value);
        return this;
    }

    public MIEventType withSequence(MISequenceCodePropertyType value) {
        setSequence(value);
        return this;
    }

    public MIEventType withTime(DateTimePropertyType value) {
        setTime(value);
        return this;
    }

    public MIEventType withExpectedObjective(MIObjectivePropertyType... values) {
        if (values!= null) {
            for (MIObjectivePropertyType value: values) {
                getExpectedObjective().add(value);
            }
        }
        return this;
    }

    public MIEventType withExpectedObjective(Collection<MIObjectivePropertyType> values) {
        if (values!= null) {
            getExpectedObjective().addAll(values);
        }
        return this;
    }

    public MIEventType withRelatedSensor(MIInstrumentPropertyType... values) {
        if (values!= null) {
            for (MIInstrumentPropertyType value: values) {
                getRelatedSensor().add(value);
            }
        }
        return this;
    }

    public MIEventType withRelatedSensor(Collection<MIInstrumentPropertyType> values) {
        if (values!= null) {
            getRelatedSensor().addAll(values);
        }
        return this;
    }

    public MIEventType withRelatedPass(MIPlatformPassPropertyType value) {
        setRelatedPass(value);
        return this;
    }

    public MIEventType withExpectedObjective(List<MIObjectivePropertyType> value) {
        setExpectedObjective(value);
        return this;
    }

    public MIEventType withRelatedSensor(List<MIInstrumentPropertyType> value) {
        setRelatedSensor(value);
        return this;
    }

}
