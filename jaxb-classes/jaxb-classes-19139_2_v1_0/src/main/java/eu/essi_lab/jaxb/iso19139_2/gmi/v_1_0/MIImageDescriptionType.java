//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.02.26 at 04:55:57 PM AST 
//


package eu.essi_lab.jaxb.iso19139_2.gmi.v_1_0;

/*-
 * #%L
 * Discovery and Access Broker (DAB)
 * %%
 * Copyright (C) 2021 - 2025 National Research Council of Italy (CNR)/Institute of Atmospheric Pollution Research (IIA)/ESSI-Lab
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import net.opengis.iso19139.gmd.v_20060504.MDImageDescriptionType;


/**
 * Description: information about the content of an image, including the description of specific range elements - shortName: ICovDesc
 * 
 * <p>Java class for MI_ImageDescription_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MI_ImageDescription_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gmd}MD_ImageDescription_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="rangeElementDescription" type="{http://www.isotc211.org/2005/gmi}MI_RangeElementDescription_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MI_ImageDescription_Type", propOrder = {
    "rangeElementDescription"
})
public class MIImageDescriptionType
    extends MDImageDescriptionType
    implements Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    protected List<MIRangeElementDescriptionPropertyType> rangeElementDescription;

    /**
     * Gets the value of the rangeElementDescription property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the rangeElementDescription property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRangeElementDescription().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MIRangeElementDescriptionPropertyType }
     * 
     * 
     */
    public List<MIRangeElementDescriptionPropertyType> getRangeElementDescription() {
        if (rangeElementDescription == null) {
            rangeElementDescription = new ArrayList<MIRangeElementDescriptionPropertyType>();
        }
        return this.rangeElementDescription;
    }

    public boolean isSetRangeElementDescription() {
        return ((this.rangeElementDescription!= null)&&(!this.rangeElementDescription.isEmpty()));
    }

    public void unsetRangeElementDescription() {
        this.rangeElementDescription = null;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<MIRangeElementDescriptionPropertyType> theRangeElementDescription;
            theRangeElementDescription = (this.isSetRangeElementDescription()?this.getRangeElementDescription():null);
            strategy.appendField(locator, this, "rangeElementDescription", buffer, theRangeElementDescription, this.isSetRangeElementDescription());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MIImageDescriptionType that = ((MIImageDescriptionType) object);
        {
            List<MIRangeElementDescriptionPropertyType> lhsRangeElementDescription;
            lhsRangeElementDescription = (this.isSetRangeElementDescription()?this.getRangeElementDescription():null);
            List<MIRangeElementDescriptionPropertyType> rhsRangeElementDescription;
            rhsRangeElementDescription = (that.isSetRangeElementDescription()?that.getRangeElementDescription():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "rangeElementDescription", lhsRangeElementDescription), LocatorUtils.property(thatLocator, "rangeElementDescription", rhsRangeElementDescription), lhsRangeElementDescription, rhsRangeElementDescription, this.isSetRangeElementDescription(), that.isSetRangeElementDescription())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<MIRangeElementDescriptionPropertyType> theRangeElementDescription;
            theRangeElementDescription = (this.isSetRangeElementDescription()?this.getRangeElementDescription():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rangeElementDescription", theRangeElementDescription), currentHashCode, theRangeElementDescription, this.isSetRangeElementDescription());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MIImageDescriptionType) {
            final MIImageDescriptionType copy = ((MIImageDescriptionType) draftCopy);
            {
                Boolean rangeElementDescriptionShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetRangeElementDescription());
                if (rangeElementDescriptionShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MIRangeElementDescriptionPropertyType> sourceRangeElementDescription;
                    sourceRangeElementDescription = (this.isSetRangeElementDescription()?this.getRangeElementDescription():null);
                    @SuppressWarnings("unchecked")
                    List<MIRangeElementDescriptionPropertyType> copyRangeElementDescription = ((List<MIRangeElementDescriptionPropertyType> ) strategy.copy(LocatorUtils.property(locator, "rangeElementDescription", sourceRangeElementDescription), sourceRangeElementDescription, this.isSetRangeElementDescription()));
                    copy.unsetRangeElementDescription();
                    if (copyRangeElementDescription!= null) {
                        List<MIRangeElementDescriptionPropertyType> uniqueRangeElementDescriptionl = copy.getRangeElementDescription();
                        uniqueRangeElementDescriptionl.addAll(copyRangeElementDescription);
                    }
                } else {
                    if (rangeElementDescriptionShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetRangeElementDescription();
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MIImageDescriptionType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof MIImageDescriptionType) {
            final MIImageDescriptionType target = this;
            final MIImageDescriptionType leftObject = ((MIImageDescriptionType) left);
            final MIImageDescriptionType rightObject = ((MIImageDescriptionType) right);
            {
                Boolean rangeElementDescriptionShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetRangeElementDescription(), rightObject.isSetRangeElementDescription());
                if (rangeElementDescriptionShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MIRangeElementDescriptionPropertyType> lhsRangeElementDescription;
                    lhsRangeElementDescription = (leftObject.isSetRangeElementDescription()?leftObject.getRangeElementDescription():null);
                    List<MIRangeElementDescriptionPropertyType> rhsRangeElementDescription;
                    rhsRangeElementDescription = (rightObject.isSetRangeElementDescription()?rightObject.getRangeElementDescription():null);
                    List<MIRangeElementDescriptionPropertyType> mergedRangeElementDescription = ((List<MIRangeElementDescriptionPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "rangeElementDescription", lhsRangeElementDescription), LocatorUtils.property(rightLocator, "rangeElementDescription", rhsRangeElementDescription), lhsRangeElementDescription, rhsRangeElementDescription, leftObject.isSetRangeElementDescription(), rightObject.isSetRangeElementDescription()));
                    target.unsetRangeElementDescription();
                    if (mergedRangeElementDescription!= null) {
                        List<MIRangeElementDescriptionPropertyType> uniqueRangeElementDescriptionl = target.getRangeElementDescription();
                        uniqueRangeElementDescriptionl.addAll(mergedRangeElementDescription);
                    }
                } else {
                    if (rangeElementDescriptionShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetRangeElementDescription();
                    }
                }
            }
        }
    }

    public void setRangeElementDescription(List<MIRangeElementDescriptionPropertyType> value) {
        this.rangeElementDescription = null;
        if (value!= null) {
            List<MIRangeElementDescriptionPropertyType> draftl = this.getRangeElementDescription();
            draftl.addAll(value);
        }
    }

    public MIImageDescriptionType withRangeElementDescription(MIRangeElementDescriptionPropertyType... values) {
        if (values!= null) {
            for (MIRangeElementDescriptionPropertyType value: values) {
                getRangeElementDescription().add(value);
            }
        }
        return this;
    }

    public MIImageDescriptionType withRangeElementDescription(Collection<MIRangeElementDescriptionPropertyType> values) {
        if (values!= null) {
            getRangeElementDescription().addAll(values);
        }
        return this;
    }

    public MIImageDescriptionType withRangeElementDescription(List<MIRangeElementDescriptionPropertyType> value) {
        setRangeElementDescription(value);
        return this;
    }

}
