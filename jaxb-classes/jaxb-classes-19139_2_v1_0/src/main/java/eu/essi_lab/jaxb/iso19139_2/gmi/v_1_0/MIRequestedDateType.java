//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.02.26 at 04:55:57 PM AST 
//


package eu.essi_lab.jaxb.iso19139_2.gmi.v_1_0;

/*-
 * #%L
 * Discovery and Access Broker (DAB)
 * %%
 * Copyright (C) 2021 - 2025 National Research Council of Italy (CNR)/Institute of Atmospheric Pollution Research (IIA)/ESSI-Lab
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import net.opengis.iso19139.gco.v_20060504.AbstractObjectType;
import net.opengis.iso19139.gco.v_20060504.DateTimePropertyType;


/**
 * Description: range of date validity - shortName: ReqstDate
 * 
 * <p>Java class for MI_RequestedDate_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MI_RequestedDate_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="requestedDateOfCollection" type="{http://www.isotc211.org/2005/gco}DateTime_PropertyType"/&gt;
 *         &lt;element name="latestAcceptableDate" type="{http://www.isotc211.org/2005/gco}DateTime_PropertyType"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MI_RequestedDate_Type", propOrder = {
    "requestedDateOfCollection",
    "latestAcceptableDate"
})
public class MIRequestedDateType
    extends AbstractObjectType
    implements Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    @XmlElement(required = true)
    protected DateTimePropertyType requestedDateOfCollection;
    @XmlElement(required = true)
    protected DateTimePropertyType latestAcceptableDate;

    /**
     * Gets the value of the requestedDateOfCollection property.
     * 
     * @return
     *     possible object is
     *     {@link DateTimePropertyType }
     *     
     */
    public DateTimePropertyType getRequestedDateOfCollection() {
        return requestedDateOfCollection;
    }

    /**
     * Sets the value of the requestedDateOfCollection property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTimePropertyType }
     *     
     */
    public void setRequestedDateOfCollection(DateTimePropertyType value) {
        this.requestedDateOfCollection = value;
    }

    public boolean isSetRequestedDateOfCollection() {
        return (this.requestedDateOfCollection!= null);
    }

    /**
     * Gets the value of the latestAcceptableDate property.
     * 
     * @return
     *     possible object is
     *     {@link DateTimePropertyType }
     *     
     */
    public DateTimePropertyType getLatestAcceptableDate() {
        return latestAcceptableDate;
    }

    /**
     * Sets the value of the latestAcceptableDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTimePropertyType }
     *     
     */
    public void setLatestAcceptableDate(DateTimePropertyType value) {
        this.latestAcceptableDate = value;
    }

    public boolean isSetLatestAcceptableDate() {
        return (this.latestAcceptableDate!= null);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            DateTimePropertyType theRequestedDateOfCollection;
            theRequestedDateOfCollection = this.getRequestedDateOfCollection();
            strategy.appendField(locator, this, "requestedDateOfCollection", buffer, theRequestedDateOfCollection, this.isSetRequestedDateOfCollection());
        }
        {
            DateTimePropertyType theLatestAcceptableDate;
            theLatestAcceptableDate = this.getLatestAcceptableDate();
            strategy.appendField(locator, this, "latestAcceptableDate", buffer, theLatestAcceptableDate, this.isSetLatestAcceptableDate());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MIRequestedDateType that = ((MIRequestedDateType) object);
        {
            DateTimePropertyType lhsRequestedDateOfCollection;
            lhsRequestedDateOfCollection = this.getRequestedDateOfCollection();
            DateTimePropertyType rhsRequestedDateOfCollection;
            rhsRequestedDateOfCollection = that.getRequestedDateOfCollection();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "requestedDateOfCollection", lhsRequestedDateOfCollection), LocatorUtils.property(thatLocator, "requestedDateOfCollection", rhsRequestedDateOfCollection), lhsRequestedDateOfCollection, rhsRequestedDateOfCollection, this.isSetRequestedDateOfCollection(), that.isSetRequestedDateOfCollection())) {
                return false;
            }
        }
        {
            DateTimePropertyType lhsLatestAcceptableDate;
            lhsLatestAcceptableDate = this.getLatestAcceptableDate();
            DateTimePropertyType rhsLatestAcceptableDate;
            rhsLatestAcceptableDate = that.getLatestAcceptableDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "latestAcceptableDate", lhsLatestAcceptableDate), LocatorUtils.property(thatLocator, "latestAcceptableDate", rhsLatestAcceptableDate), lhsLatestAcceptableDate, rhsLatestAcceptableDate, this.isSetLatestAcceptableDate(), that.isSetLatestAcceptableDate())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            DateTimePropertyType theRequestedDateOfCollection;
            theRequestedDateOfCollection = this.getRequestedDateOfCollection();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "requestedDateOfCollection", theRequestedDateOfCollection), currentHashCode, theRequestedDateOfCollection, this.isSetRequestedDateOfCollection());
        }
        {
            DateTimePropertyType theLatestAcceptableDate;
            theLatestAcceptableDate = this.getLatestAcceptableDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latestAcceptableDate", theLatestAcceptableDate), currentHashCode, theLatestAcceptableDate, this.isSetLatestAcceptableDate());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MIRequestedDateType) {
            final MIRequestedDateType copy = ((MIRequestedDateType) draftCopy);
            {
                Boolean requestedDateOfCollectionShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetRequestedDateOfCollection());
                if (requestedDateOfCollectionShouldBeCopiedAndSet == Boolean.TRUE) {
                    DateTimePropertyType sourceRequestedDateOfCollection;
                    sourceRequestedDateOfCollection = this.getRequestedDateOfCollection();
                    DateTimePropertyType copyRequestedDateOfCollection = ((DateTimePropertyType) strategy.copy(LocatorUtils.property(locator, "requestedDateOfCollection", sourceRequestedDateOfCollection), sourceRequestedDateOfCollection, this.isSetRequestedDateOfCollection()));
                    copy.setRequestedDateOfCollection(copyRequestedDateOfCollection);
                } else {
                    if (requestedDateOfCollectionShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.requestedDateOfCollection = null;
                    }
                }
            }
            {
                Boolean latestAcceptableDateShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetLatestAcceptableDate());
                if (latestAcceptableDateShouldBeCopiedAndSet == Boolean.TRUE) {
                    DateTimePropertyType sourceLatestAcceptableDate;
                    sourceLatestAcceptableDate = this.getLatestAcceptableDate();
                    DateTimePropertyType copyLatestAcceptableDate = ((DateTimePropertyType) strategy.copy(LocatorUtils.property(locator, "latestAcceptableDate", sourceLatestAcceptableDate), sourceLatestAcceptableDate, this.isSetLatestAcceptableDate()));
                    copy.setLatestAcceptableDate(copyLatestAcceptableDate);
                } else {
                    if (latestAcceptableDateShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.latestAcceptableDate = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MIRequestedDateType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof MIRequestedDateType) {
            final MIRequestedDateType target = this;
            final MIRequestedDateType leftObject = ((MIRequestedDateType) left);
            final MIRequestedDateType rightObject = ((MIRequestedDateType) right);
            {
                Boolean requestedDateOfCollectionShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetRequestedDateOfCollection(), rightObject.isSetRequestedDateOfCollection());
                if (requestedDateOfCollectionShouldBeMergedAndSet == Boolean.TRUE) {
                    DateTimePropertyType lhsRequestedDateOfCollection;
                    lhsRequestedDateOfCollection = leftObject.getRequestedDateOfCollection();
                    DateTimePropertyType rhsRequestedDateOfCollection;
                    rhsRequestedDateOfCollection = rightObject.getRequestedDateOfCollection();
                    DateTimePropertyType mergedRequestedDateOfCollection = ((DateTimePropertyType) strategy.merge(LocatorUtils.property(leftLocator, "requestedDateOfCollection", lhsRequestedDateOfCollection), LocatorUtils.property(rightLocator, "requestedDateOfCollection", rhsRequestedDateOfCollection), lhsRequestedDateOfCollection, rhsRequestedDateOfCollection, leftObject.isSetRequestedDateOfCollection(), rightObject.isSetRequestedDateOfCollection()));
                    target.setRequestedDateOfCollection(mergedRequestedDateOfCollection);
                } else {
                    if (requestedDateOfCollectionShouldBeMergedAndSet == Boolean.FALSE) {
                        target.requestedDateOfCollection = null;
                    }
                }
            }
            {
                Boolean latestAcceptableDateShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetLatestAcceptableDate(), rightObject.isSetLatestAcceptableDate());
                if (latestAcceptableDateShouldBeMergedAndSet == Boolean.TRUE) {
                    DateTimePropertyType lhsLatestAcceptableDate;
                    lhsLatestAcceptableDate = leftObject.getLatestAcceptableDate();
                    DateTimePropertyType rhsLatestAcceptableDate;
                    rhsLatestAcceptableDate = rightObject.getLatestAcceptableDate();
                    DateTimePropertyType mergedLatestAcceptableDate = ((DateTimePropertyType) strategy.merge(LocatorUtils.property(leftLocator, "latestAcceptableDate", lhsLatestAcceptableDate), LocatorUtils.property(rightLocator, "latestAcceptableDate", rhsLatestAcceptableDate), lhsLatestAcceptableDate, rhsLatestAcceptableDate, leftObject.isSetLatestAcceptableDate(), rightObject.isSetLatestAcceptableDate()));
                    target.setLatestAcceptableDate(mergedLatestAcceptableDate);
                } else {
                    if (latestAcceptableDateShouldBeMergedAndSet == Boolean.FALSE) {
                        target.latestAcceptableDate = null;
                    }
                }
            }
        }
    }

    public MIRequestedDateType withRequestedDateOfCollection(DateTimePropertyType value) {
        setRequestedDateOfCollection(value);
        return this;
    }

    public MIRequestedDateType withLatestAcceptableDate(DateTimePropertyType value) {
        setLatestAcceptableDate(value);
        return this;
    }

}
