//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.02.26 at 04:55:57 PM AST 
//


package eu.essi_lab.jaxb.iso19139_2.gmi.v_1_0;

/*-
 * #%L
 * Discovery and Access Broker (DAB) Community Edition (CE)
 * %%
 * Copyright (C) 2021 - 2022 National Research Council of Italy (CNR)/Institute of Atmospheric Pollution Research (IIA)/ESSI-Lab
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import net.opengis.iso19139.gco.v_20060504.AbstractObjectType;
import net.opengis.iso19139.gco.v_20060504.DateTimePropertyType;
import net.opengis.iso19139.gmd.v_20060504.CICitationPropertyType;
import net.opengis.iso19139.gmd.v_20060504.CIResponsiblePartyPropertyType;
import net.opengis.iso19139.gmd.v_20060504.MDIdentifierPropertyType;


/**
 * Description: requirement to be satisfied by the planned data acquisition - shortName: Requirement
 * 
 * <p>Java class for MI_Requirement_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MI_Requirement_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="citation" type="{http://www.isotc211.org/2005/gmd}CI_Citation_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="identifier" type="{http://www.isotc211.org/2005/gmd}MD_Identifier_PropertyType"/&gt;
 *         &lt;element name="requestor" type="{http://www.isotc211.org/2005/gmd}CI_ResponsibleParty_PropertyType" maxOccurs="unbounded"/&gt;
 *         &lt;element name="recipient" type="{http://www.isotc211.org/2005/gmd}CI_ResponsibleParty_PropertyType" maxOccurs="unbounded"/&gt;
 *         &lt;element name="priority" type="{http://www.isotc211.org/2005/gmi}MI_PriorityCode_PropertyType"/&gt;
 *         &lt;element name="requestedDate" type="{http://www.isotc211.org/2005/gmi}MI_RequestedDate_PropertyType"/&gt;
 *         &lt;element name="expiryDate" type="{http://www.isotc211.org/2005/gco}DateTime_PropertyType"/&gt;
 *         &lt;element name="satisifiedPlan" type="{http://www.isotc211.org/2005/gmi}MI_Plan_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MI_Requirement_Type", propOrder = {
    "citation",
    "identifier",
    "requestor",
    "recipient",
    "priority",
    "requestedDate",
    "expiryDate",
    "satisifiedPlan"
})
public class MIRequirementType
    extends AbstractObjectType
    implements Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    protected CICitationPropertyType citation;
    @XmlElement(required = true)
    protected MDIdentifierPropertyType identifier;
    @XmlElement(required = true)
    protected List<CIResponsiblePartyPropertyType> requestor;
    @XmlElement(required = true)
    protected List<CIResponsiblePartyPropertyType> recipient;
    @XmlElement(required = true)
    protected MIPriorityCodePropertyType priority;
    @XmlElement(required = true)
    protected MIRequestedDatePropertyType requestedDate;
    @XmlElement(required = true)
    protected DateTimePropertyType expiryDate;
    protected List<MIPlanPropertyType> satisifiedPlan;

    /**
     * Gets the value of the citation property.
     * 
     * @return
     *     possible object is
     *     {@link CICitationPropertyType }
     *     
     */
    public CICitationPropertyType getCitation() {
        return citation;
    }

    /**
     * Sets the value of the citation property.
     * 
     * @param value
     *     allowed object is
     *     {@link CICitationPropertyType }
     *     
     */
    public void setCitation(CICitationPropertyType value) {
        this.citation = value;
    }

    public boolean isSetCitation() {
        return (this.citation!= null);
    }

    /**
     * Gets the value of the identifier property.
     * 
     * @return
     *     possible object is
     *     {@link MDIdentifierPropertyType }
     *     
     */
    public MDIdentifierPropertyType getIdentifier() {
        return identifier;
    }

    /**
     * Sets the value of the identifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDIdentifierPropertyType }
     *     
     */
    public void setIdentifier(MDIdentifierPropertyType value) {
        this.identifier = value;
    }

    public boolean isSetIdentifier() {
        return (this.identifier!= null);
    }

    /**
     * Gets the value of the requestor property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the requestor property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRequestor().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CIResponsiblePartyPropertyType }
     * 
     * 
     */
    public List<CIResponsiblePartyPropertyType> getRequestor() {
        if (requestor == null) {
            requestor = new ArrayList<CIResponsiblePartyPropertyType>();
        }
        return this.requestor;
    }

    public boolean isSetRequestor() {
        return ((this.requestor!= null)&&(!this.requestor.isEmpty()));
    }

    public void unsetRequestor() {
        this.requestor = null;
    }

    /**
     * Gets the value of the recipient property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the recipient property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRecipient().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CIResponsiblePartyPropertyType }
     * 
     * 
     */
    public List<CIResponsiblePartyPropertyType> getRecipient() {
        if (recipient == null) {
            recipient = new ArrayList<CIResponsiblePartyPropertyType>();
        }
        return this.recipient;
    }

    public boolean isSetRecipient() {
        return ((this.recipient!= null)&&(!this.recipient.isEmpty()));
    }

    public void unsetRecipient() {
        this.recipient = null;
    }

    /**
     * Gets the value of the priority property.
     * 
     * @return
     *     possible object is
     *     {@link MIPriorityCodePropertyType }
     *     
     */
    public MIPriorityCodePropertyType getPriority() {
        return priority;
    }

    /**
     * Sets the value of the priority property.
     * 
     * @param value
     *     allowed object is
     *     {@link MIPriorityCodePropertyType }
     *     
     */
    public void setPriority(MIPriorityCodePropertyType value) {
        this.priority = value;
    }

    public boolean isSetPriority() {
        return (this.priority!= null);
    }

    /**
     * Gets the value of the requestedDate property.
     * 
     * @return
     *     possible object is
     *     {@link MIRequestedDatePropertyType }
     *     
     */
    public MIRequestedDatePropertyType getRequestedDate() {
        return requestedDate;
    }

    /**
     * Sets the value of the requestedDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link MIRequestedDatePropertyType }
     *     
     */
    public void setRequestedDate(MIRequestedDatePropertyType value) {
        this.requestedDate = value;
    }

    public boolean isSetRequestedDate() {
        return (this.requestedDate!= null);
    }

    /**
     * Gets the value of the expiryDate property.
     * 
     * @return
     *     possible object is
     *     {@link DateTimePropertyType }
     *     
     */
    public DateTimePropertyType getExpiryDate() {
        return expiryDate;
    }

    /**
     * Sets the value of the expiryDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link DateTimePropertyType }
     *     
     */
    public void setExpiryDate(DateTimePropertyType value) {
        this.expiryDate = value;
    }

    public boolean isSetExpiryDate() {
        return (this.expiryDate!= null);
    }

    /**
     * Gets the value of the satisifiedPlan property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the satisifiedPlan property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSatisifiedPlan().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MIPlanPropertyType }
     * 
     * 
     */
    public List<MIPlanPropertyType> getSatisifiedPlan() {
        if (satisifiedPlan == null) {
            satisifiedPlan = new ArrayList<MIPlanPropertyType>();
        }
        return this.satisifiedPlan;
    }

    public boolean isSetSatisifiedPlan() {
        return ((this.satisifiedPlan!= null)&&(!this.satisifiedPlan.isEmpty()));
    }

    public void unsetSatisifiedPlan() {
        this.satisifiedPlan = null;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            CICitationPropertyType theCitation;
            theCitation = this.getCitation();
            strategy.appendField(locator, this, "citation", buffer, theCitation, this.isSetCitation());
        }
        {
            MDIdentifierPropertyType theIdentifier;
            theIdentifier = this.getIdentifier();
            strategy.appendField(locator, this, "identifier", buffer, theIdentifier, this.isSetIdentifier());
        }
        {
            List<CIResponsiblePartyPropertyType> theRequestor;
            theRequestor = (this.isSetRequestor()?this.getRequestor():null);
            strategy.appendField(locator, this, "requestor", buffer, theRequestor, this.isSetRequestor());
        }
        {
            List<CIResponsiblePartyPropertyType> theRecipient;
            theRecipient = (this.isSetRecipient()?this.getRecipient():null);
            strategy.appendField(locator, this, "recipient", buffer, theRecipient, this.isSetRecipient());
        }
        {
            MIPriorityCodePropertyType thePriority;
            thePriority = this.getPriority();
            strategy.appendField(locator, this, "priority", buffer, thePriority, this.isSetPriority());
        }
        {
            MIRequestedDatePropertyType theRequestedDate;
            theRequestedDate = this.getRequestedDate();
            strategy.appendField(locator, this, "requestedDate", buffer, theRequestedDate, this.isSetRequestedDate());
        }
        {
            DateTimePropertyType theExpiryDate;
            theExpiryDate = this.getExpiryDate();
            strategy.appendField(locator, this, "expiryDate", buffer, theExpiryDate, this.isSetExpiryDate());
        }
        {
            List<MIPlanPropertyType> theSatisifiedPlan;
            theSatisifiedPlan = (this.isSetSatisifiedPlan()?this.getSatisifiedPlan():null);
            strategy.appendField(locator, this, "satisifiedPlan", buffer, theSatisifiedPlan, this.isSetSatisifiedPlan());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MIRequirementType that = ((MIRequirementType) object);
        {
            CICitationPropertyType lhsCitation;
            lhsCitation = this.getCitation();
            CICitationPropertyType rhsCitation;
            rhsCitation = that.getCitation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "citation", lhsCitation), LocatorUtils.property(thatLocator, "citation", rhsCitation), lhsCitation, rhsCitation, this.isSetCitation(), that.isSetCitation())) {
                return false;
            }
        }
        {
            MDIdentifierPropertyType lhsIdentifier;
            lhsIdentifier = this.getIdentifier();
            MDIdentifierPropertyType rhsIdentifier;
            rhsIdentifier = that.getIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier, this.isSetIdentifier(), that.isSetIdentifier())) {
                return false;
            }
        }
        {
            List<CIResponsiblePartyPropertyType> lhsRequestor;
            lhsRequestor = (this.isSetRequestor()?this.getRequestor():null);
            List<CIResponsiblePartyPropertyType> rhsRequestor;
            rhsRequestor = (that.isSetRequestor()?that.getRequestor():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "requestor", lhsRequestor), LocatorUtils.property(thatLocator, "requestor", rhsRequestor), lhsRequestor, rhsRequestor, this.isSetRequestor(), that.isSetRequestor())) {
                return false;
            }
        }
        {
            List<CIResponsiblePartyPropertyType> lhsRecipient;
            lhsRecipient = (this.isSetRecipient()?this.getRecipient():null);
            List<CIResponsiblePartyPropertyType> rhsRecipient;
            rhsRecipient = (that.isSetRecipient()?that.getRecipient():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "recipient", lhsRecipient), LocatorUtils.property(thatLocator, "recipient", rhsRecipient), lhsRecipient, rhsRecipient, this.isSetRecipient(), that.isSetRecipient())) {
                return false;
            }
        }
        {
            MIPriorityCodePropertyType lhsPriority;
            lhsPriority = this.getPriority();
            MIPriorityCodePropertyType rhsPriority;
            rhsPriority = that.getPriority();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "priority", lhsPriority), LocatorUtils.property(thatLocator, "priority", rhsPriority), lhsPriority, rhsPriority, this.isSetPriority(), that.isSetPriority())) {
                return false;
            }
        }
        {
            MIRequestedDatePropertyType lhsRequestedDate;
            lhsRequestedDate = this.getRequestedDate();
            MIRequestedDatePropertyType rhsRequestedDate;
            rhsRequestedDate = that.getRequestedDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "requestedDate", lhsRequestedDate), LocatorUtils.property(thatLocator, "requestedDate", rhsRequestedDate), lhsRequestedDate, rhsRequestedDate, this.isSetRequestedDate(), that.isSetRequestedDate())) {
                return false;
            }
        }
        {
            DateTimePropertyType lhsExpiryDate;
            lhsExpiryDate = this.getExpiryDate();
            DateTimePropertyType rhsExpiryDate;
            rhsExpiryDate = that.getExpiryDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "expiryDate", lhsExpiryDate), LocatorUtils.property(thatLocator, "expiryDate", rhsExpiryDate), lhsExpiryDate, rhsExpiryDate, this.isSetExpiryDate(), that.isSetExpiryDate())) {
                return false;
            }
        }
        {
            List<MIPlanPropertyType> lhsSatisifiedPlan;
            lhsSatisifiedPlan = (this.isSetSatisifiedPlan()?this.getSatisifiedPlan():null);
            List<MIPlanPropertyType> rhsSatisifiedPlan;
            rhsSatisifiedPlan = (that.isSetSatisifiedPlan()?that.getSatisifiedPlan():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "satisifiedPlan", lhsSatisifiedPlan), LocatorUtils.property(thatLocator, "satisifiedPlan", rhsSatisifiedPlan), lhsSatisifiedPlan, rhsSatisifiedPlan, this.isSetSatisifiedPlan(), that.isSetSatisifiedPlan())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            CICitationPropertyType theCitation;
            theCitation = this.getCitation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "citation", theCitation), currentHashCode, theCitation, this.isSetCitation());
        }
        {
            MDIdentifierPropertyType theIdentifier;
            theIdentifier = this.getIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier, this.isSetIdentifier());
        }
        {
            List<CIResponsiblePartyPropertyType> theRequestor;
            theRequestor = (this.isSetRequestor()?this.getRequestor():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "requestor", theRequestor), currentHashCode, theRequestor, this.isSetRequestor());
        }
        {
            List<CIResponsiblePartyPropertyType> theRecipient;
            theRecipient = (this.isSetRecipient()?this.getRecipient():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "recipient", theRecipient), currentHashCode, theRecipient, this.isSetRecipient());
        }
        {
            MIPriorityCodePropertyType thePriority;
            thePriority = this.getPriority();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "priority", thePriority), currentHashCode, thePriority, this.isSetPriority());
        }
        {
            MIRequestedDatePropertyType theRequestedDate;
            theRequestedDate = this.getRequestedDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "requestedDate", theRequestedDate), currentHashCode, theRequestedDate, this.isSetRequestedDate());
        }
        {
            DateTimePropertyType theExpiryDate;
            theExpiryDate = this.getExpiryDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "expiryDate", theExpiryDate), currentHashCode, theExpiryDate, this.isSetExpiryDate());
        }
        {
            List<MIPlanPropertyType> theSatisifiedPlan;
            theSatisifiedPlan = (this.isSetSatisifiedPlan()?this.getSatisifiedPlan():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "satisifiedPlan", theSatisifiedPlan), currentHashCode, theSatisifiedPlan, this.isSetSatisifiedPlan());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MIRequirementType) {
            final MIRequirementType copy = ((MIRequirementType) draftCopy);
            {
                Boolean citationShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetCitation());
                if (citationShouldBeCopiedAndSet == Boolean.TRUE) {
                    CICitationPropertyType sourceCitation;
                    sourceCitation = this.getCitation();
                    CICitationPropertyType copyCitation = ((CICitationPropertyType) strategy.copy(LocatorUtils.property(locator, "citation", sourceCitation), sourceCitation, this.isSetCitation()));
                    copy.setCitation(copyCitation);
                } else {
                    if (citationShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.citation = null;
                    }
                }
            }
            {
                Boolean identifierShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetIdentifier());
                if (identifierShouldBeCopiedAndSet == Boolean.TRUE) {
                    MDIdentifierPropertyType sourceIdentifier;
                    sourceIdentifier = this.getIdentifier();
                    MDIdentifierPropertyType copyIdentifier = ((MDIdentifierPropertyType) strategy.copy(LocatorUtils.property(locator, "identifier", sourceIdentifier), sourceIdentifier, this.isSetIdentifier()));
                    copy.setIdentifier(copyIdentifier);
                } else {
                    if (identifierShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.identifier = null;
                    }
                }
            }
            {
                Boolean requestorShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetRequestor());
                if (requestorShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<CIResponsiblePartyPropertyType> sourceRequestor;
                    sourceRequestor = (this.isSetRequestor()?this.getRequestor():null);
                    @SuppressWarnings("unchecked")
                    List<CIResponsiblePartyPropertyType> copyRequestor = ((List<CIResponsiblePartyPropertyType> ) strategy.copy(LocatorUtils.property(locator, "requestor", sourceRequestor), sourceRequestor, this.isSetRequestor()));
                    copy.unsetRequestor();
                    if (copyRequestor!= null) {
                        List<CIResponsiblePartyPropertyType> uniqueRequestorl = copy.getRequestor();
                        uniqueRequestorl.addAll(copyRequestor);
                    }
                } else {
                    if (requestorShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetRequestor();
                    }
                }
            }
            {
                Boolean recipientShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetRecipient());
                if (recipientShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<CIResponsiblePartyPropertyType> sourceRecipient;
                    sourceRecipient = (this.isSetRecipient()?this.getRecipient():null);
                    @SuppressWarnings("unchecked")
                    List<CIResponsiblePartyPropertyType> copyRecipient = ((List<CIResponsiblePartyPropertyType> ) strategy.copy(LocatorUtils.property(locator, "recipient", sourceRecipient), sourceRecipient, this.isSetRecipient()));
                    copy.unsetRecipient();
                    if (copyRecipient!= null) {
                        List<CIResponsiblePartyPropertyType> uniqueRecipientl = copy.getRecipient();
                        uniqueRecipientl.addAll(copyRecipient);
                    }
                } else {
                    if (recipientShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetRecipient();
                    }
                }
            }
            {
                Boolean priorityShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetPriority());
                if (priorityShouldBeCopiedAndSet == Boolean.TRUE) {
                    MIPriorityCodePropertyType sourcePriority;
                    sourcePriority = this.getPriority();
                    MIPriorityCodePropertyType copyPriority = ((MIPriorityCodePropertyType) strategy.copy(LocatorUtils.property(locator, "priority", sourcePriority), sourcePriority, this.isSetPriority()));
                    copy.setPriority(copyPriority);
                } else {
                    if (priorityShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.priority = null;
                    }
                }
            }
            {
                Boolean requestedDateShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetRequestedDate());
                if (requestedDateShouldBeCopiedAndSet == Boolean.TRUE) {
                    MIRequestedDatePropertyType sourceRequestedDate;
                    sourceRequestedDate = this.getRequestedDate();
                    MIRequestedDatePropertyType copyRequestedDate = ((MIRequestedDatePropertyType) strategy.copy(LocatorUtils.property(locator, "requestedDate", sourceRequestedDate), sourceRequestedDate, this.isSetRequestedDate()));
                    copy.setRequestedDate(copyRequestedDate);
                } else {
                    if (requestedDateShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.requestedDate = null;
                    }
                }
            }
            {
                Boolean expiryDateShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetExpiryDate());
                if (expiryDateShouldBeCopiedAndSet == Boolean.TRUE) {
                    DateTimePropertyType sourceExpiryDate;
                    sourceExpiryDate = this.getExpiryDate();
                    DateTimePropertyType copyExpiryDate = ((DateTimePropertyType) strategy.copy(LocatorUtils.property(locator, "expiryDate", sourceExpiryDate), sourceExpiryDate, this.isSetExpiryDate()));
                    copy.setExpiryDate(copyExpiryDate);
                } else {
                    if (expiryDateShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.expiryDate = null;
                    }
                }
            }
            {
                Boolean satisifiedPlanShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetSatisifiedPlan());
                if (satisifiedPlanShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MIPlanPropertyType> sourceSatisifiedPlan;
                    sourceSatisifiedPlan = (this.isSetSatisifiedPlan()?this.getSatisifiedPlan():null);
                    @SuppressWarnings("unchecked")
                    List<MIPlanPropertyType> copySatisifiedPlan = ((List<MIPlanPropertyType> ) strategy.copy(LocatorUtils.property(locator, "satisifiedPlan", sourceSatisifiedPlan), sourceSatisifiedPlan, this.isSetSatisifiedPlan()));
                    copy.unsetSatisifiedPlan();
                    if (copySatisifiedPlan!= null) {
                        List<MIPlanPropertyType> uniqueSatisifiedPlanl = copy.getSatisifiedPlan();
                        uniqueSatisifiedPlanl.addAll(copySatisifiedPlan);
                    }
                } else {
                    if (satisifiedPlanShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetSatisifiedPlan();
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MIRequirementType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof MIRequirementType) {
            final MIRequirementType target = this;
            final MIRequirementType leftObject = ((MIRequirementType) left);
            final MIRequirementType rightObject = ((MIRequirementType) right);
            {
                Boolean citationShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetCitation(), rightObject.isSetCitation());
                if (citationShouldBeMergedAndSet == Boolean.TRUE) {
                    CICitationPropertyType lhsCitation;
                    lhsCitation = leftObject.getCitation();
                    CICitationPropertyType rhsCitation;
                    rhsCitation = rightObject.getCitation();
                    CICitationPropertyType mergedCitation = ((CICitationPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "citation", lhsCitation), LocatorUtils.property(rightLocator, "citation", rhsCitation), lhsCitation, rhsCitation, leftObject.isSetCitation(), rightObject.isSetCitation()));
                    target.setCitation(mergedCitation);
                } else {
                    if (citationShouldBeMergedAndSet == Boolean.FALSE) {
                        target.citation = null;
                    }
                }
            }
            {
                Boolean identifierShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetIdentifier(), rightObject.isSetIdentifier());
                if (identifierShouldBeMergedAndSet == Boolean.TRUE) {
                    MDIdentifierPropertyType lhsIdentifier;
                    lhsIdentifier = leftObject.getIdentifier();
                    MDIdentifierPropertyType rhsIdentifier;
                    rhsIdentifier = rightObject.getIdentifier();
                    MDIdentifierPropertyType mergedIdentifier = ((MDIdentifierPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "identifier", lhsIdentifier), LocatorUtils.property(rightLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier, leftObject.isSetIdentifier(), rightObject.isSetIdentifier()));
                    target.setIdentifier(mergedIdentifier);
                } else {
                    if (identifierShouldBeMergedAndSet == Boolean.FALSE) {
                        target.identifier = null;
                    }
                }
            }
            {
                Boolean requestorShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetRequestor(), rightObject.isSetRequestor());
                if (requestorShouldBeMergedAndSet == Boolean.TRUE) {
                    List<CIResponsiblePartyPropertyType> lhsRequestor;
                    lhsRequestor = (leftObject.isSetRequestor()?leftObject.getRequestor():null);
                    List<CIResponsiblePartyPropertyType> rhsRequestor;
                    rhsRequestor = (rightObject.isSetRequestor()?rightObject.getRequestor():null);
                    List<CIResponsiblePartyPropertyType> mergedRequestor = ((List<CIResponsiblePartyPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "requestor", lhsRequestor), LocatorUtils.property(rightLocator, "requestor", rhsRequestor), lhsRequestor, rhsRequestor, leftObject.isSetRequestor(), rightObject.isSetRequestor()));
                    target.unsetRequestor();
                    if (mergedRequestor!= null) {
                        List<CIResponsiblePartyPropertyType> uniqueRequestorl = target.getRequestor();
                        uniqueRequestorl.addAll(mergedRequestor);
                    }
                } else {
                    if (requestorShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetRequestor();
                    }
                }
            }
            {
                Boolean recipientShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetRecipient(), rightObject.isSetRecipient());
                if (recipientShouldBeMergedAndSet == Boolean.TRUE) {
                    List<CIResponsiblePartyPropertyType> lhsRecipient;
                    lhsRecipient = (leftObject.isSetRecipient()?leftObject.getRecipient():null);
                    List<CIResponsiblePartyPropertyType> rhsRecipient;
                    rhsRecipient = (rightObject.isSetRecipient()?rightObject.getRecipient():null);
                    List<CIResponsiblePartyPropertyType> mergedRecipient = ((List<CIResponsiblePartyPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "recipient", lhsRecipient), LocatorUtils.property(rightLocator, "recipient", rhsRecipient), lhsRecipient, rhsRecipient, leftObject.isSetRecipient(), rightObject.isSetRecipient()));
                    target.unsetRecipient();
                    if (mergedRecipient!= null) {
                        List<CIResponsiblePartyPropertyType> uniqueRecipientl = target.getRecipient();
                        uniqueRecipientl.addAll(mergedRecipient);
                    }
                } else {
                    if (recipientShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetRecipient();
                    }
                }
            }
            {
                Boolean priorityShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetPriority(), rightObject.isSetPriority());
                if (priorityShouldBeMergedAndSet == Boolean.TRUE) {
                    MIPriorityCodePropertyType lhsPriority;
                    lhsPriority = leftObject.getPriority();
                    MIPriorityCodePropertyType rhsPriority;
                    rhsPriority = rightObject.getPriority();
                    MIPriorityCodePropertyType mergedPriority = ((MIPriorityCodePropertyType) strategy.merge(LocatorUtils.property(leftLocator, "priority", lhsPriority), LocatorUtils.property(rightLocator, "priority", rhsPriority), lhsPriority, rhsPriority, leftObject.isSetPriority(), rightObject.isSetPriority()));
                    target.setPriority(mergedPriority);
                } else {
                    if (priorityShouldBeMergedAndSet == Boolean.FALSE) {
                        target.priority = null;
                    }
                }
            }
            {
                Boolean requestedDateShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetRequestedDate(), rightObject.isSetRequestedDate());
                if (requestedDateShouldBeMergedAndSet == Boolean.TRUE) {
                    MIRequestedDatePropertyType lhsRequestedDate;
                    lhsRequestedDate = leftObject.getRequestedDate();
                    MIRequestedDatePropertyType rhsRequestedDate;
                    rhsRequestedDate = rightObject.getRequestedDate();
                    MIRequestedDatePropertyType mergedRequestedDate = ((MIRequestedDatePropertyType) strategy.merge(LocatorUtils.property(leftLocator, "requestedDate", lhsRequestedDate), LocatorUtils.property(rightLocator, "requestedDate", rhsRequestedDate), lhsRequestedDate, rhsRequestedDate, leftObject.isSetRequestedDate(), rightObject.isSetRequestedDate()));
                    target.setRequestedDate(mergedRequestedDate);
                } else {
                    if (requestedDateShouldBeMergedAndSet == Boolean.FALSE) {
                        target.requestedDate = null;
                    }
                }
            }
            {
                Boolean expiryDateShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetExpiryDate(), rightObject.isSetExpiryDate());
                if (expiryDateShouldBeMergedAndSet == Boolean.TRUE) {
                    DateTimePropertyType lhsExpiryDate;
                    lhsExpiryDate = leftObject.getExpiryDate();
                    DateTimePropertyType rhsExpiryDate;
                    rhsExpiryDate = rightObject.getExpiryDate();
                    DateTimePropertyType mergedExpiryDate = ((DateTimePropertyType) strategy.merge(LocatorUtils.property(leftLocator, "expiryDate", lhsExpiryDate), LocatorUtils.property(rightLocator, "expiryDate", rhsExpiryDate), lhsExpiryDate, rhsExpiryDate, leftObject.isSetExpiryDate(), rightObject.isSetExpiryDate()));
                    target.setExpiryDate(mergedExpiryDate);
                } else {
                    if (expiryDateShouldBeMergedAndSet == Boolean.FALSE) {
                        target.expiryDate = null;
                    }
                }
            }
            {
                Boolean satisifiedPlanShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetSatisifiedPlan(), rightObject.isSetSatisifiedPlan());
                if (satisifiedPlanShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MIPlanPropertyType> lhsSatisifiedPlan;
                    lhsSatisifiedPlan = (leftObject.isSetSatisifiedPlan()?leftObject.getSatisifiedPlan():null);
                    List<MIPlanPropertyType> rhsSatisifiedPlan;
                    rhsSatisifiedPlan = (rightObject.isSetSatisifiedPlan()?rightObject.getSatisifiedPlan():null);
                    List<MIPlanPropertyType> mergedSatisifiedPlan = ((List<MIPlanPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "satisifiedPlan", lhsSatisifiedPlan), LocatorUtils.property(rightLocator, "satisifiedPlan", rhsSatisifiedPlan), lhsSatisifiedPlan, rhsSatisifiedPlan, leftObject.isSetSatisifiedPlan(), rightObject.isSetSatisifiedPlan()));
                    target.unsetSatisifiedPlan();
                    if (mergedSatisifiedPlan!= null) {
                        List<MIPlanPropertyType> uniqueSatisifiedPlanl = target.getSatisifiedPlan();
                        uniqueSatisifiedPlanl.addAll(mergedSatisifiedPlan);
                    }
                } else {
                    if (satisifiedPlanShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetSatisifiedPlan();
                    }
                }
            }
        }
    }

    public void setRequestor(List<CIResponsiblePartyPropertyType> value) {
        this.requestor = null;
        if (value!= null) {
            List<CIResponsiblePartyPropertyType> draftl = this.getRequestor();
            draftl.addAll(value);
        }
    }

    public void setRecipient(List<CIResponsiblePartyPropertyType> value) {
        this.recipient = null;
        if (value!= null) {
            List<CIResponsiblePartyPropertyType> draftl = this.getRecipient();
            draftl.addAll(value);
        }
    }

    public void setSatisifiedPlan(List<MIPlanPropertyType> value) {
        this.satisifiedPlan = null;
        if (value!= null) {
            List<MIPlanPropertyType> draftl = this.getSatisifiedPlan();
            draftl.addAll(value);
        }
    }

    public MIRequirementType withCitation(CICitationPropertyType value) {
        setCitation(value);
        return this;
    }

    public MIRequirementType withIdentifier(MDIdentifierPropertyType value) {
        setIdentifier(value);
        return this;
    }

    public MIRequirementType withRequestor(CIResponsiblePartyPropertyType... values) {
        if (values!= null) {
            for (CIResponsiblePartyPropertyType value: values) {
                getRequestor().add(value);
            }
        }
        return this;
    }

    public MIRequirementType withRequestor(Collection<CIResponsiblePartyPropertyType> values) {
        if (values!= null) {
            getRequestor().addAll(values);
        }
        return this;
    }

    public MIRequirementType withRecipient(CIResponsiblePartyPropertyType... values) {
        if (values!= null) {
            for (CIResponsiblePartyPropertyType value: values) {
                getRecipient().add(value);
            }
        }
        return this;
    }

    public MIRequirementType withRecipient(Collection<CIResponsiblePartyPropertyType> values) {
        if (values!= null) {
            getRecipient().addAll(values);
        }
        return this;
    }

    public MIRequirementType withPriority(MIPriorityCodePropertyType value) {
        setPriority(value);
        return this;
    }

    public MIRequirementType withRequestedDate(MIRequestedDatePropertyType value) {
        setRequestedDate(value);
        return this;
    }

    public MIRequirementType withExpiryDate(DateTimePropertyType value) {
        setExpiryDate(value);
        return this;
    }

    public MIRequirementType withSatisifiedPlan(MIPlanPropertyType... values) {
        if (values!= null) {
            for (MIPlanPropertyType value: values) {
                getSatisifiedPlan().add(value);
            }
        }
        return this;
    }

    public MIRequirementType withSatisifiedPlan(Collection<MIPlanPropertyType> values) {
        if (values!= null) {
            getSatisifiedPlan().addAll(values);
        }
        return this;
    }

    public MIRequirementType withRequestor(List<CIResponsiblePartyPropertyType> value) {
        setRequestor(value);
        return this;
    }

    public MIRequirementType withRecipient(List<CIResponsiblePartyPropertyType> value) {
        setRecipient(value);
        return this;
    }

    public MIRequirementType withSatisifiedPlan(List<MIPlanPropertyType> value) {
        setSatisifiedPlan(value);
        return this;
    }

}
