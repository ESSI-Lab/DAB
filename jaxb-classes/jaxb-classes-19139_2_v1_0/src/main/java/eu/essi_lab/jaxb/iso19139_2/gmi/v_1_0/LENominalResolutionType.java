//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.02.26 at 04:55:57 PM AST 
//


package eu.essi_lab.jaxb.iso19139_2.gmi.v_1_0;

/*-
 * #%L
 * Discovery and Access Broker (DAB) Community Edition (CE)
 * %%
 * Copyright (C) 2021 - 2025 National Research Council of Italy (CNR)/Institute of Atmospheric Pollution Research (IIA)/ESSI-Lab
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import net.opengis.iso19139.gco.v_20060504.DistancePropertyType;


/**
 * Description: Distance between adjacent pixels - shortName: nomRes
 * 
 * <p>Java class for LE_NominalResolution_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="LE_NominalResolution_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;choice&gt;
 *         &lt;element name="scanningResolution" type="{http://www.isotc211.org/2005/gco}Distance_PropertyType"/&gt;
 *         &lt;element name="groundResolution" type="{http://www.isotc211.org/2005/gco}Distance_PropertyType"/&gt;
 *       &lt;/choice&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "LE_NominalResolution_Type", propOrder = {
    "scanningResolution",
    "groundResolution"
})
public class LENominalResolutionType implements Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    protected DistancePropertyType scanningResolution;
    protected DistancePropertyType groundResolution;

    /**
     * Gets the value of the scanningResolution property.
     * 
     * @return
     *     possible object is
     *     {@link DistancePropertyType }
     *     
     */
    public DistancePropertyType getScanningResolution() {
        return scanningResolution;
    }

    /**
     * Sets the value of the scanningResolution property.
     * 
     * @param value
     *     allowed object is
     *     {@link DistancePropertyType }
     *     
     */
    public void setScanningResolution(DistancePropertyType value) {
        this.scanningResolution = value;
    }

    public boolean isSetScanningResolution() {
        return (this.scanningResolution!= null);
    }

    /**
     * Gets the value of the groundResolution property.
     * 
     * @return
     *     possible object is
     *     {@link DistancePropertyType }
     *     
     */
    public DistancePropertyType getGroundResolution() {
        return groundResolution;
    }

    /**
     * Sets the value of the groundResolution property.
     * 
     * @param value
     *     allowed object is
     *     {@link DistancePropertyType }
     *     
     */
    public void setGroundResolution(DistancePropertyType value) {
        this.groundResolution = value;
    }

    public boolean isSetGroundResolution() {
        return (this.groundResolution!= null);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        {
            DistancePropertyType theScanningResolution;
            theScanningResolution = this.getScanningResolution();
            strategy.appendField(locator, this, "scanningResolution", buffer, theScanningResolution, this.isSetScanningResolution());
        }
        {
            DistancePropertyType theGroundResolution;
            theGroundResolution = this.getGroundResolution();
            strategy.appendField(locator, this, "groundResolution", buffer, theGroundResolution, this.isSetGroundResolution());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final LENominalResolutionType that = ((LENominalResolutionType) object);
        {
            DistancePropertyType lhsScanningResolution;
            lhsScanningResolution = this.getScanningResolution();
            DistancePropertyType rhsScanningResolution;
            rhsScanningResolution = that.getScanningResolution();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "scanningResolution", lhsScanningResolution), LocatorUtils.property(thatLocator, "scanningResolution", rhsScanningResolution), lhsScanningResolution, rhsScanningResolution, this.isSetScanningResolution(), that.isSetScanningResolution())) {
                return false;
            }
        }
        {
            DistancePropertyType lhsGroundResolution;
            lhsGroundResolution = this.getGroundResolution();
            DistancePropertyType rhsGroundResolution;
            rhsGroundResolution = that.getGroundResolution();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "groundResolution", lhsGroundResolution), LocatorUtils.property(thatLocator, "groundResolution", rhsGroundResolution), lhsGroundResolution, rhsGroundResolution, this.isSetGroundResolution(), that.isSetGroundResolution())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = 1;
        {
            DistancePropertyType theScanningResolution;
            theScanningResolution = this.getScanningResolution();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "scanningResolution", theScanningResolution), currentHashCode, theScanningResolution, this.isSetScanningResolution());
        }
        {
            DistancePropertyType theGroundResolution;
            theGroundResolution = this.getGroundResolution();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "groundResolution", theGroundResolution), currentHashCode, theGroundResolution, this.isSetGroundResolution());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof LENominalResolutionType) {
            final LENominalResolutionType copy = ((LENominalResolutionType) draftCopy);
            {
                Boolean scanningResolutionShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetScanningResolution());
                if (scanningResolutionShouldBeCopiedAndSet == Boolean.TRUE) {
                    DistancePropertyType sourceScanningResolution;
                    sourceScanningResolution = this.getScanningResolution();
                    DistancePropertyType copyScanningResolution = ((DistancePropertyType) strategy.copy(LocatorUtils.property(locator, "scanningResolution", sourceScanningResolution), sourceScanningResolution, this.isSetScanningResolution()));
                    copy.setScanningResolution(copyScanningResolution);
                } else {
                    if (scanningResolutionShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.scanningResolution = null;
                    }
                }
            }
            {
                Boolean groundResolutionShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetGroundResolution());
                if (groundResolutionShouldBeCopiedAndSet == Boolean.TRUE) {
                    DistancePropertyType sourceGroundResolution;
                    sourceGroundResolution = this.getGroundResolution();
                    DistancePropertyType copyGroundResolution = ((DistancePropertyType) strategy.copy(LocatorUtils.property(locator, "groundResolution", sourceGroundResolution), sourceGroundResolution, this.isSetGroundResolution()));
                    copy.setGroundResolution(copyGroundResolution);
                } else {
                    if (groundResolutionShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.groundResolution = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new LENominalResolutionType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        if (right instanceof LENominalResolutionType) {
            final LENominalResolutionType target = this;
            final LENominalResolutionType leftObject = ((LENominalResolutionType) left);
            final LENominalResolutionType rightObject = ((LENominalResolutionType) right);
            {
                Boolean scanningResolutionShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetScanningResolution(), rightObject.isSetScanningResolution());
                if (scanningResolutionShouldBeMergedAndSet == Boolean.TRUE) {
                    DistancePropertyType lhsScanningResolution;
                    lhsScanningResolution = leftObject.getScanningResolution();
                    DistancePropertyType rhsScanningResolution;
                    rhsScanningResolution = rightObject.getScanningResolution();
                    DistancePropertyType mergedScanningResolution = ((DistancePropertyType) strategy.merge(LocatorUtils.property(leftLocator, "scanningResolution", lhsScanningResolution), LocatorUtils.property(rightLocator, "scanningResolution", rhsScanningResolution), lhsScanningResolution, rhsScanningResolution, leftObject.isSetScanningResolution(), rightObject.isSetScanningResolution()));
                    target.setScanningResolution(mergedScanningResolution);
                } else {
                    if (scanningResolutionShouldBeMergedAndSet == Boolean.FALSE) {
                        target.scanningResolution = null;
                    }
                }
            }
            {
                Boolean groundResolutionShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetGroundResolution(), rightObject.isSetGroundResolution());
                if (groundResolutionShouldBeMergedAndSet == Boolean.TRUE) {
                    DistancePropertyType lhsGroundResolution;
                    lhsGroundResolution = leftObject.getGroundResolution();
                    DistancePropertyType rhsGroundResolution;
                    rhsGroundResolution = rightObject.getGroundResolution();
                    DistancePropertyType mergedGroundResolution = ((DistancePropertyType) strategy.merge(LocatorUtils.property(leftLocator, "groundResolution", lhsGroundResolution), LocatorUtils.property(rightLocator, "groundResolution", rhsGroundResolution), lhsGroundResolution, rhsGroundResolution, leftObject.isSetGroundResolution(), rightObject.isSetGroundResolution()));
                    target.setGroundResolution(mergedGroundResolution);
                } else {
                    if (groundResolutionShouldBeMergedAndSet == Boolean.FALSE) {
                        target.groundResolution = null;
                    }
                }
            }
        }
    }

    public LENominalResolutionType withScanningResolution(DistancePropertyType value) {
        setScanningResolution(value);
        return this;
    }

    public LENominalResolutionType withGroundResolution(DistancePropertyType value) {
        setGroundResolution(value);
        return this;
    }

}
