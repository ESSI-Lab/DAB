//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.02.26 at 04:55:57 PM AST 
//


package eu.essi_lab.jaxb.iso19139_2.gmi.v_1_0;

/*-
 * #%L
 * Discovery and Access Broker (DAB)
 * %%
 * Copyright (C) 2021 - 2025 National Research Council of Italy (CNR)/Institute of Atmospheric Pollution Research (IIA)/ESSI-Lab
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import net.opengis.iso19139.gco.v_20060504.RealPropertyType;
import net.opengis.iso19139.gmd.v_20060504.MDBandType;


/**
 * Description: extensions to electromagnetic spectrum wavelength description - shortName: BandExt
 * 
 * <p>Java class for MI_Band_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MI_Band_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gmd}MD_Band_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="bandBoundaryDefinition" type="{http://www.isotc211.org/2005/gmi}MI_BandDefinition_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="nominalSpatialResolution" type="{http://www.isotc211.org/2005/gco}Real_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="transferFunctionType" type="{http://www.isotc211.org/2005/gmi}MI_TransferFunctionTypeCode_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="transmittedPolarisation" type="{http://www.isotc211.org/2005/gmi}MI_PolarisationOrientationCode_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="detectedPolarisation" type="{http://www.isotc211.org/2005/gmi}MI_PolarisationOrientationCode_PropertyType" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MI_Band_Type", propOrder = {
    "bandBoundaryDefinition",
    "nominalSpatialResolution",
    "transferFunctionType",
    "transmittedPolarisation",
    "detectedPolarisation"
})
public class MIBandType
    extends MDBandType
    implements Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    protected MIBandDefinitionPropertyType bandBoundaryDefinition;
    protected RealPropertyType nominalSpatialResolution;
    protected MITransferFunctionTypeCodePropertyType transferFunctionType;
    protected MIPolarisationOrientationCodePropertyType transmittedPolarisation;
    protected MIPolarisationOrientationCodePropertyType detectedPolarisation;

    /**
     * Gets the value of the bandBoundaryDefinition property.
     * 
     * @return
     *     possible object is
     *     {@link MIBandDefinitionPropertyType }
     *     
     */
    public MIBandDefinitionPropertyType getBandBoundaryDefinition() {
        return bandBoundaryDefinition;
    }

    /**
     * Sets the value of the bandBoundaryDefinition property.
     * 
     * @param value
     *     allowed object is
     *     {@link MIBandDefinitionPropertyType }
     *     
     */
    public void setBandBoundaryDefinition(MIBandDefinitionPropertyType value) {
        this.bandBoundaryDefinition = value;
    }

    public boolean isSetBandBoundaryDefinition() {
        return (this.bandBoundaryDefinition!= null);
    }

    /**
     * Gets the value of the nominalSpatialResolution property.
     * 
     * @return
     *     possible object is
     *     {@link RealPropertyType }
     *     
     */
    public RealPropertyType getNominalSpatialResolution() {
        return nominalSpatialResolution;
    }

    /**
     * Sets the value of the nominalSpatialResolution property.
     * 
     * @param value
     *     allowed object is
     *     {@link RealPropertyType }
     *     
     */
    public void setNominalSpatialResolution(RealPropertyType value) {
        this.nominalSpatialResolution = value;
    }

    public boolean isSetNominalSpatialResolution() {
        return (this.nominalSpatialResolution!= null);
    }

    /**
     * Gets the value of the transferFunctionType property.
     * 
     * @return
     *     possible object is
     *     {@link MITransferFunctionTypeCodePropertyType }
     *     
     */
    public MITransferFunctionTypeCodePropertyType getTransferFunctionType() {
        return transferFunctionType;
    }

    /**
     * Sets the value of the transferFunctionType property.
     * 
     * @param value
     *     allowed object is
     *     {@link MITransferFunctionTypeCodePropertyType }
     *     
     */
    public void setTransferFunctionType(MITransferFunctionTypeCodePropertyType value) {
        this.transferFunctionType = value;
    }

    public boolean isSetTransferFunctionType() {
        return (this.transferFunctionType!= null);
    }

    /**
     * Gets the value of the transmittedPolarisation property.
     * 
     * @return
     *     possible object is
     *     {@link MIPolarisationOrientationCodePropertyType }
     *     
     */
    public MIPolarisationOrientationCodePropertyType getTransmittedPolarisation() {
        return transmittedPolarisation;
    }

    /**
     * Sets the value of the transmittedPolarisation property.
     * 
     * @param value
     *     allowed object is
     *     {@link MIPolarisationOrientationCodePropertyType }
     *     
     */
    public void setTransmittedPolarisation(MIPolarisationOrientationCodePropertyType value) {
        this.transmittedPolarisation = value;
    }

    public boolean isSetTransmittedPolarisation() {
        return (this.transmittedPolarisation!= null);
    }

    /**
     * Gets the value of the detectedPolarisation property.
     * 
     * @return
     *     possible object is
     *     {@link MIPolarisationOrientationCodePropertyType }
     *     
     */
    public MIPolarisationOrientationCodePropertyType getDetectedPolarisation() {
        return detectedPolarisation;
    }

    /**
     * Sets the value of the detectedPolarisation property.
     * 
     * @param value
     *     allowed object is
     *     {@link MIPolarisationOrientationCodePropertyType }
     *     
     */
    public void setDetectedPolarisation(MIPolarisationOrientationCodePropertyType value) {
        this.detectedPolarisation = value;
    }

    public boolean isSetDetectedPolarisation() {
        return (this.detectedPolarisation!= null);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            MIBandDefinitionPropertyType theBandBoundaryDefinition;
            theBandBoundaryDefinition = this.getBandBoundaryDefinition();
            strategy.appendField(locator, this, "bandBoundaryDefinition", buffer, theBandBoundaryDefinition, this.isSetBandBoundaryDefinition());
        }
        {
            RealPropertyType theNominalSpatialResolution;
            theNominalSpatialResolution = this.getNominalSpatialResolution();
            strategy.appendField(locator, this, "nominalSpatialResolution", buffer, theNominalSpatialResolution, this.isSetNominalSpatialResolution());
        }
        {
            MITransferFunctionTypeCodePropertyType theTransferFunctionType;
            theTransferFunctionType = this.getTransferFunctionType();
            strategy.appendField(locator, this, "transferFunctionType", buffer, theTransferFunctionType, this.isSetTransferFunctionType());
        }
        {
            MIPolarisationOrientationCodePropertyType theTransmittedPolarisation;
            theTransmittedPolarisation = this.getTransmittedPolarisation();
            strategy.appendField(locator, this, "transmittedPolarisation", buffer, theTransmittedPolarisation, this.isSetTransmittedPolarisation());
        }
        {
            MIPolarisationOrientationCodePropertyType theDetectedPolarisation;
            theDetectedPolarisation = this.getDetectedPolarisation();
            strategy.appendField(locator, this, "detectedPolarisation", buffer, theDetectedPolarisation, this.isSetDetectedPolarisation());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MIBandType that = ((MIBandType) object);
        {
            MIBandDefinitionPropertyType lhsBandBoundaryDefinition;
            lhsBandBoundaryDefinition = this.getBandBoundaryDefinition();
            MIBandDefinitionPropertyType rhsBandBoundaryDefinition;
            rhsBandBoundaryDefinition = that.getBandBoundaryDefinition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "bandBoundaryDefinition", lhsBandBoundaryDefinition), LocatorUtils.property(thatLocator, "bandBoundaryDefinition", rhsBandBoundaryDefinition), lhsBandBoundaryDefinition, rhsBandBoundaryDefinition, this.isSetBandBoundaryDefinition(), that.isSetBandBoundaryDefinition())) {
                return false;
            }
        }
        {
            RealPropertyType lhsNominalSpatialResolution;
            lhsNominalSpatialResolution = this.getNominalSpatialResolution();
            RealPropertyType rhsNominalSpatialResolution;
            rhsNominalSpatialResolution = that.getNominalSpatialResolution();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "nominalSpatialResolution", lhsNominalSpatialResolution), LocatorUtils.property(thatLocator, "nominalSpatialResolution", rhsNominalSpatialResolution), lhsNominalSpatialResolution, rhsNominalSpatialResolution, this.isSetNominalSpatialResolution(), that.isSetNominalSpatialResolution())) {
                return false;
            }
        }
        {
            MITransferFunctionTypeCodePropertyType lhsTransferFunctionType;
            lhsTransferFunctionType = this.getTransferFunctionType();
            MITransferFunctionTypeCodePropertyType rhsTransferFunctionType;
            rhsTransferFunctionType = that.getTransferFunctionType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "transferFunctionType", lhsTransferFunctionType), LocatorUtils.property(thatLocator, "transferFunctionType", rhsTransferFunctionType), lhsTransferFunctionType, rhsTransferFunctionType, this.isSetTransferFunctionType(), that.isSetTransferFunctionType())) {
                return false;
            }
        }
        {
            MIPolarisationOrientationCodePropertyType lhsTransmittedPolarisation;
            lhsTransmittedPolarisation = this.getTransmittedPolarisation();
            MIPolarisationOrientationCodePropertyType rhsTransmittedPolarisation;
            rhsTransmittedPolarisation = that.getTransmittedPolarisation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "transmittedPolarisation", lhsTransmittedPolarisation), LocatorUtils.property(thatLocator, "transmittedPolarisation", rhsTransmittedPolarisation), lhsTransmittedPolarisation, rhsTransmittedPolarisation, this.isSetTransmittedPolarisation(), that.isSetTransmittedPolarisation())) {
                return false;
            }
        }
        {
            MIPolarisationOrientationCodePropertyType lhsDetectedPolarisation;
            lhsDetectedPolarisation = this.getDetectedPolarisation();
            MIPolarisationOrientationCodePropertyType rhsDetectedPolarisation;
            rhsDetectedPolarisation = that.getDetectedPolarisation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "detectedPolarisation", lhsDetectedPolarisation), LocatorUtils.property(thatLocator, "detectedPolarisation", rhsDetectedPolarisation), lhsDetectedPolarisation, rhsDetectedPolarisation, this.isSetDetectedPolarisation(), that.isSetDetectedPolarisation())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            MIBandDefinitionPropertyType theBandBoundaryDefinition;
            theBandBoundaryDefinition = this.getBandBoundaryDefinition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "bandBoundaryDefinition", theBandBoundaryDefinition), currentHashCode, theBandBoundaryDefinition, this.isSetBandBoundaryDefinition());
        }
        {
            RealPropertyType theNominalSpatialResolution;
            theNominalSpatialResolution = this.getNominalSpatialResolution();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "nominalSpatialResolution", theNominalSpatialResolution), currentHashCode, theNominalSpatialResolution, this.isSetNominalSpatialResolution());
        }
        {
            MITransferFunctionTypeCodePropertyType theTransferFunctionType;
            theTransferFunctionType = this.getTransferFunctionType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "transferFunctionType", theTransferFunctionType), currentHashCode, theTransferFunctionType, this.isSetTransferFunctionType());
        }
        {
            MIPolarisationOrientationCodePropertyType theTransmittedPolarisation;
            theTransmittedPolarisation = this.getTransmittedPolarisation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "transmittedPolarisation", theTransmittedPolarisation), currentHashCode, theTransmittedPolarisation, this.isSetTransmittedPolarisation());
        }
        {
            MIPolarisationOrientationCodePropertyType theDetectedPolarisation;
            theDetectedPolarisation = this.getDetectedPolarisation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "detectedPolarisation", theDetectedPolarisation), currentHashCode, theDetectedPolarisation, this.isSetDetectedPolarisation());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MIBandType) {
            final MIBandType copy = ((MIBandType) draftCopy);
            {
                Boolean bandBoundaryDefinitionShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetBandBoundaryDefinition());
                if (bandBoundaryDefinitionShouldBeCopiedAndSet == Boolean.TRUE) {
                    MIBandDefinitionPropertyType sourceBandBoundaryDefinition;
                    sourceBandBoundaryDefinition = this.getBandBoundaryDefinition();
                    MIBandDefinitionPropertyType copyBandBoundaryDefinition = ((MIBandDefinitionPropertyType) strategy.copy(LocatorUtils.property(locator, "bandBoundaryDefinition", sourceBandBoundaryDefinition), sourceBandBoundaryDefinition, this.isSetBandBoundaryDefinition()));
                    copy.setBandBoundaryDefinition(copyBandBoundaryDefinition);
                } else {
                    if (bandBoundaryDefinitionShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.bandBoundaryDefinition = null;
                    }
                }
            }
            {
                Boolean nominalSpatialResolutionShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetNominalSpatialResolution());
                if (nominalSpatialResolutionShouldBeCopiedAndSet == Boolean.TRUE) {
                    RealPropertyType sourceNominalSpatialResolution;
                    sourceNominalSpatialResolution = this.getNominalSpatialResolution();
                    RealPropertyType copyNominalSpatialResolution = ((RealPropertyType) strategy.copy(LocatorUtils.property(locator, "nominalSpatialResolution", sourceNominalSpatialResolution), sourceNominalSpatialResolution, this.isSetNominalSpatialResolution()));
                    copy.setNominalSpatialResolution(copyNominalSpatialResolution);
                } else {
                    if (nominalSpatialResolutionShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.nominalSpatialResolution = null;
                    }
                }
            }
            {
                Boolean transferFunctionTypeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetTransferFunctionType());
                if (transferFunctionTypeShouldBeCopiedAndSet == Boolean.TRUE) {
                    MITransferFunctionTypeCodePropertyType sourceTransferFunctionType;
                    sourceTransferFunctionType = this.getTransferFunctionType();
                    MITransferFunctionTypeCodePropertyType copyTransferFunctionType = ((MITransferFunctionTypeCodePropertyType) strategy.copy(LocatorUtils.property(locator, "transferFunctionType", sourceTransferFunctionType), sourceTransferFunctionType, this.isSetTransferFunctionType()));
                    copy.setTransferFunctionType(copyTransferFunctionType);
                } else {
                    if (transferFunctionTypeShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.transferFunctionType = null;
                    }
                }
            }
            {
                Boolean transmittedPolarisationShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetTransmittedPolarisation());
                if (transmittedPolarisationShouldBeCopiedAndSet == Boolean.TRUE) {
                    MIPolarisationOrientationCodePropertyType sourceTransmittedPolarisation;
                    sourceTransmittedPolarisation = this.getTransmittedPolarisation();
                    MIPolarisationOrientationCodePropertyType copyTransmittedPolarisation = ((MIPolarisationOrientationCodePropertyType) strategy.copy(LocatorUtils.property(locator, "transmittedPolarisation", sourceTransmittedPolarisation), sourceTransmittedPolarisation, this.isSetTransmittedPolarisation()));
                    copy.setTransmittedPolarisation(copyTransmittedPolarisation);
                } else {
                    if (transmittedPolarisationShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.transmittedPolarisation = null;
                    }
                }
            }
            {
                Boolean detectedPolarisationShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetDetectedPolarisation());
                if (detectedPolarisationShouldBeCopiedAndSet == Boolean.TRUE) {
                    MIPolarisationOrientationCodePropertyType sourceDetectedPolarisation;
                    sourceDetectedPolarisation = this.getDetectedPolarisation();
                    MIPolarisationOrientationCodePropertyType copyDetectedPolarisation = ((MIPolarisationOrientationCodePropertyType) strategy.copy(LocatorUtils.property(locator, "detectedPolarisation", sourceDetectedPolarisation), sourceDetectedPolarisation, this.isSetDetectedPolarisation()));
                    copy.setDetectedPolarisation(copyDetectedPolarisation);
                } else {
                    if (detectedPolarisationShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.detectedPolarisation = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MIBandType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof MIBandType) {
            final MIBandType target = this;
            final MIBandType leftObject = ((MIBandType) left);
            final MIBandType rightObject = ((MIBandType) right);
            {
                Boolean bandBoundaryDefinitionShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetBandBoundaryDefinition(), rightObject.isSetBandBoundaryDefinition());
                if (bandBoundaryDefinitionShouldBeMergedAndSet == Boolean.TRUE) {
                    MIBandDefinitionPropertyType lhsBandBoundaryDefinition;
                    lhsBandBoundaryDefinition = leftObject.getBandBoundaryDefinition();
                    MIBandDefinitionPropertyType rhsBandBoundaryDefinition;
                    rhsBandBoundaryDefinition = rightObject.getBandBoundaryDefinition();
                    MIBandDefinitionPropertyType mergedBandBoundaryDefinition = ((MIBandDefinitionPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "bandBoundaryDefinition", lhsBandBoundaryDefinition), LocatorUtils.property(rightLocator, "bandBoundaryDefinition", rhsBandBoundaryDefinition), lhsBandBoundaryDefinition, rhsBandBoundaryDefinition, leftObject.isSetBandBoundaryDefinition(), rightObject.isSetBandBoundaryDefinition()));
                    target.setBandBoundaryDefinition(mergedBandBoundaryDefinition);
                } else {
                    if (bandBoundaryDefinitionShouldBeMergedAndSet == Boolean.FALSE) {
                        target.bandBoundaryDefinition = null;
                    }
                }
            }
            {
                Boolean nominalSpatialResolutionShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetNominalSpatialResolution(), rightObject.isSetNominalSpatialResolution());
                if (nominalSpatialResolutionShouldBeMergedAndSet == Boolean.TRUE) {
                    RealPropertyType lhsNominalSpatialResolution;
                    lhsNominalSpatialResolution = leftObject.getNominalSpatialResolution();
                    RealPropertyType rhsNominalSpatialResolution;
                    rhsNominalSpatialResolution = rightObject.getNominalSpatialResolution();
                    RealPropertyType mergedNominalSpatialResolution = ((RealPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "nominalSpatialResolution", lhsNominalSpatialResolution), LocatorUtils.property(rightLocator, "nominalSpatialResolution", rhsNominalSpatialResolution), lhsNominalSpatialResolution, rhsNominalSpatialResolution, leftObject.isSetNominalSpatialResolution(), rightObject.isSetNominalSpatialResolution()));
                    target.setNominalSpatialResolution(mergedNominalSpatialResolution);
                } else {
                    if (nominalSpatialResolutionShouldBeMergedAndSet == Boolean.FALSE) {
                        target.nominalSpatialResolution = null;
                    }
                }
            }
            {
                Boolean transferFunctionTypeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetTransferFunctionType(), rightObject.isSetTransferFunctionType());
                if (transferFunctionTypeShouldBeMergedAndSet == Boolean.TRUE) {
                    MITransferFunctionTypeCodePropertyType lhsTransferFunctionType;
                    lhsTransferFunctionType = leftObject.getTransferFunctionType();
                    MITransferFunctionTypeCodePropertyType rhsTransferFunctionType;
                    rhsTransferFunctionType = rightObject.getTransferFunctionType();
                    MITransferFunctionTypeCodePropertyType mergedTransferFunctionType = ((MITransferFunctionTypeCodePropertyType) strategy.merge(LocatorUtils.property(leftLocator, "transferFunctionType", lhsTransferFunctionType), LocatorUtils.property(rightLocator, "transferFunctionType", rhsTransferFunctionType), lhsTransferFunctionType, rhsTransferFunctionType, leftObject.isSetTransferFunctionType(), rightObject.isSetTransferFunctionType()));
                    target.setTransferFunctionType(mergedTransferFunctionType);
                } else {
                    if (transferFunctionTypeShouldBeMergedAndSet == Boolean.FALSE) {
                        target.transferFunctionType = null;
                    }
                }
            }
            {
                Boolean transmittedPolarisationShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetTransmittedPolarisation(), rightObject.isSetTransmittedPolarisation());
                if (transmittedPolarisationShouldBeMergedAndSet == Boolean.TRUE) {
                    MIPolarisationOrientationCodePropertyType lhsTransmittedPolarisation;
                    lhsTransmittedPolarisation = leftObject.getTransmittedPolarisation();
                    MIPolarisationOrientationCodePropertyType rhsTransmittedPolarisation;
                    rhsTransmittedPolarisation = rightObject.getTransmittedPolarisation();
                    MIPolarisationOrientationCodePropertyType mergedTransmittedPolarisation = ((MIPolarisationOrientationCodePropertyType) strategy.merge(LocatorUtils.property(leftLocator, "transmittedPolarisation", lhsTransmittedPolarisation), LocatorUtils.property(rightLocator, "transmittedPolarisation", rhsTransmittedPolarisation), lhsTransmittedPolarisation, rhsTransmittedPolarisation, leftObject.isSetTransmittedPolarisation(), rightObject.isSetTransmittedPolarisation()));
                    target.setTransmittedPolarisation(mergedTransmittedPolarisation);
                } else {
                    if (transmittedPolarisationShouldBeMergedAndSet == Boolean.FALSE) {
                        target.transmittedPolarisation = null;
                    }
                }
            }
            {
                Boolean detectedPolarisationShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetDetectedPolarisation(), rightObject.isSetDetectedPolarisation());
                if (detectedPolarisationShouldBeMergedAndSet == Boolean.TRUE) {
                    MIPolarisationOrientationCodePropertyType lhsDetectedPolarisation;
                    lhsDetectedPolarisation = leftObject.getDetectedPolarisation();
                    MIPolarisationOrientationCodePropertyType rhsDetectedPolarisation;
                    rhsDetectedPolarisation = rightObject.getDetectedPolarisation();
                    MIPolarisationOrientationCodePropertyType mergedDetectedPolarisation = ((MIPolarisationOrientationCodePropertyType) strategy.merge(LocatorUtils.property(leftLocator, "detectedPolarisation", lhsDetectedPolarisation), LocatorUtils.property(rightLocator, "detectedPolarisation", rhsDetectedPolarisation), lhsDetectedPolarisation, rhsDetectedPolarisation, leftObject.isSetDetectedPolarisation(), rightObject.isSetDetectedPolarisation()));
                    target.setDetectedPolarisation(mergedDetectedPolarisation);
                } else {
                    if (detectedPolarisationShouldBeMergedAndSet == Boolean.FALSE) {
                        target.detectedPolarisation = null;
                    }
                }
            }
        }
    }

    public MIBandType withBandBoundaryDefinition(MIBandDefinitionPropertyType value) {
        setBandBoundaryDefinition(value);
        return this;
    }

    public MIBandType withNominalSpatialResolution(RealPropertyType value) {
        setNominalSpatialResolution(value);
        return this;
    }

    public MIBandType withTransferFunctionType(MITransferFunctionTypeCodePropertyType value) {
        setTransferFunctionType(value);
        return this;
    }

    public MIBandType withTransmittedPolarisation(MIPolarisationOrientationCodePropertyType value) {
        setTransmittedPolarisation(value);
        return this;
    }

    public MIBandType withDetectedPolarisation(MIPolarisationOrientationCodePropertyType value) {
        setDetectedPolarisation(value);
        return this;
    }

}
