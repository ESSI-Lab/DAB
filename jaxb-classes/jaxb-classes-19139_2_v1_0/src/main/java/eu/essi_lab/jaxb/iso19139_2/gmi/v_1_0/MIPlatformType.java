//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.02.26 at 04:55:57 PM AST 
//


package eu.essi_lab.jaxb.iso19139_2.gmi.v_1_0;

/*-
 * #%L
 * Discovery and Access Broker (DAB)
 * %%
 * Copyright (C) 2021 - 2025 National Research Council of Italy (CNR)/Institute of Atmospheric Pollution Research (IIA)/ESSI-Lab
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import net.opengis.iso19139.gco.v_20060504.AbstractObjectType;
import net.opengis.iso19139.gco.v_20060504.CharacterStringPropertyType;
import net.opengis.iso19139.gmd.v_20060504.CICitationPropertyType;
import net.opengis.iso19139.gmd.v_20060504.CIResponsiblePartyPropertyType;
import net.opengis.iso19139.gmd.v_20060504.MDIdentifierPropertyType;


/**
 * Description: Designations for the platform used to acquire the dataset - shortName: PltfrmId
 * 
 * <p>Java class for MI_Platform_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MI_Platform_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="citation" type="{http://www.isotc211.org/2005/gmd}CI_Citation_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="identifier" type="{http://www.isotc211.org/2005/gmd}MD_Identifier_PropertyType"/&gt;
 *         &lt;element name="description" type="{http://www.isotc211.org/2005/gco}CharacterString_PropertyType"/&gt;
 *         &lt;element name="sponsor" type="{http://www.isotc211.org/2005/gmd}CI_ResponsibleParty_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="instrument" type="{http://www.isotc211.org/2005/gmi}MI_Instrument_PropertyType" maxOccurs="unbounded"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MI_Platform_Type", propOrder = {
    "citation",
    "identifier",
    "description",
    "sponsor",
    "instrument"
})
public class MIPlatformType
    extends AbstractObjectType
    implements Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    protected List<CICitationPropertyType> citation;
    @XmlElement(required = true)
    protected MDIdentifierPropertyType identifier;
    @XmlElement(required = true)
    protected CharacterStringPropertyType description;
    protected List<CIResponsiblePartyPropertyType> sponsor;
    @XmlElement(required = true)
    protected List<MIInstrumentPropertyType> instrument;

    /**
     * Gets the value of the citation property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the citation property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCitation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CICitationPropertyType }
     * 
     * 
     */
    public List<CICitationPropertyType> getCitation() {
        if (citation == null) {
            citation = new ArrayList<CICitationPropertyType>();
        }
        return this.citation;
    }

    public boolean isSetCitation() {
        return ((this.citation!= null)&&(!this.citation.isEmpty()));
    }

    public void unsetCitation() {
        this.citation = null;
    }

    /**
     * Gets the value of the identifier property.
     * 
     * @return
     *     possible object is
     *     {@link MDIdentifierPropertyType }
     *     
     */
    public MDIdentifierPropertyType getIdentifier() {
        return identifier;
    }

    /**
     * Sets the value of the identifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDIdentifierPropertyType }
     *     
     */
    public void setIdentifier(MDIdentifierPropertyType value) {
        this.identifier = value;
    }

    public boolean isSetIdentifier() {
        return (this.identifier!= null);
    }

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setDescription(CharacterStringPropertyType value) {
        this.description = value;
    }

    public boolean isSetDescription() {
        return (this.description!= null);
    }

    /**
     * Gets the value of the sponsor property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the sponsor property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSponsor().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CIResponsiblePartyPropertyType }
     * 
     * 
     */
    public List<CIResponsiblePartyPropertyType> getSponsor() {
        if (sponsor == null) {
            sponsor = new ArrayList<CIResponsiblePartyPropertyType>();
        }
        return this.sponsor;
    }

    public boolean isSetSponsor() {
        return ((this.sponsor!= null)&&(!this.sponsor.isEmpty()));
    }

    public void unsetSponsor() {
        this.sponsor = null;
    }

    /**
     * Gets the value of the instrument property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the instrument property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getInstrument().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MIInstrumentPropertyType }
     * 
     * 
     */
    public List<MIInstrumentPropertyType> getInstrument() {
        if (instrument == null) {
            instrument = new ArrayList<MIInstrumentPropertyType>();
        }
        return this.instrument;
    }

    public boolean isSetInstrument() {
        return ((this.instrument!= null)&&(!this.instrument.isEmpty()));
    }

    public void unsetInstrument() {
        this.instrument = null;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<CICitationPropertyType> theCitation;
            theCitation = (this.isSetCitation()?this.getCitation():null);
            strategy.appendField(locator, this, "citation", buffer, theCitation, this.isSetCitation());
        }
        {
            MDIdentifierPropertyType theIdentifier;
            theIdentifier = this.getIdentifier();
            strategy.appendField(locator, this, "identifier", buffer, theIdentifier, this.isSetIdentifier());
        }
        {
            CharacterStringPropertyType theDescription;
            theDescription = this.getDescription();
            strategy.appendField(locator, this, "description", buffer, theDescription, this.isSetDescription());
        }
        {
            List<CIResponsiblePartyPropertyType> theSponsor;
            theSponsor = (this.isSetSponsor()?this.getSponsor():null);
            strategy.appendField(locator, this, "sponsor", buffer, theSponsor, this.isSetSponsor());
        }
        {
            List<MIInstrumentPropertyType> theInstrument;
            theInstrument = (this.isSetInstrument()?this.getInstrument():null);
            strategy.appendField(locator, this, "instrument", buffer, theInstrument, this.isSetInstrument());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MIPlatformType that = ((MIPlatformType) object);
        {
            List<CICitationPropertyType> lhsCitation;
            lhsCitation = (this.isSetCitation()?this.getCitation():null);
            List<CICitationPropertyType> rhsCitation;
            rhsCitation = (that.isSetCitation()?that.getCitation():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "citation", lhsCitation), LocatorUtils.property(thatLocator, "citation", rhsCitation), lhsCitation, rhsCitation, this.isSetCitation(), that.isSetCitation())) {
                return false;
            }
        }
        {
            MDIdentifierPropertyType lhsIdentifier;
            lhsIdentifier = this.getIdentifier();
            MDIdentifierPropertyType rhsIdentifier;
            rhsIdentifier = that.getIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier, this.isSetIdentifier(), that.isSetIdentifier())) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsDescription;
            lhsDescription = this.getDescription();
            CharacterStringPropertyType rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription, this.isSetDescription(), that.isSetDescription())) {
                return false;
            }
        }
        {
            List<CIResponsiblePartyPropertyType> lhsSponsor;
            lhsSponsor = (this.isSetSponsor()?this.getSponsor():null);
            List<CIResponsiblePartyPropertyType> rhsSponsor;
            rhsSponsor = (that.isSetSponsor()?that.getSponsor():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sponsor", lhsSponsor), LocatorUtils.property(thatLocator, "sponsor", rhsSponsor), lhsSponsor, rhsSponsor, this.isSetSponsor(), that.isSetSponsor())) {
                return false;
            }
        }
        {
            List<MIInstrumentPropertyType> lhsInstrument;
            lhsInstrument = (this.isSetInstrument()?this.getInstrument():null);
            List<MIInstrumentPropertyType> rhsInstrument;
            rhsInstrument = (that.isSetInstrument()?that.getInstrument():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "instrument", lhsInstrument), LocatorUtils.property(thatLocator, "instrument", rhsInstrument), lhsInstrument, rhsInstrument, this.isSetInstrument(), that.isSetInstrument())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<CICitationPropertyType> theCitation;
            theCitation = (this.isSetCitation()?this.getCitation():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "citation", theCitation), currentHashCode, theCitation, this.isSetCitation());
        }
        {
            MDIdentifierPropertyType theIdentifier;
            theIdentifier = this.getIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier, this.isSetIdentifier());
        }
        {
            CharacterStringPropertyType theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription, this.isSetDescription());
        }
        {
            List<CIResponsiblePartyPropertyType> theSponsor;
            theSponsor = (this.isSetSponsor()?this.getSponsor():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sponsor", theSponsor), currentHashCode, theSponsor, this.isSetSponsor());
        }
        {
            List<MIInstrumentPropertyType> theInstrument;
            theInstrument = (this.isSetInstrument()?this.getInstrument():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "instrument", theInstrument), currentHashCode, theInstrument, this.isSetInstrument());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MIPlatformType) {
            final MIPlatformType copy = ((MIPlatformType) draftCopy);
            {
                Boolean citationShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetCitation());
                if (citationShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<CICitationPropertyType> sourceCitation;
                    sourceCitation = (this.isSetCitation()?this.getCitation():null);
                    @SuppressWarnings("unchecked")
                    List<CICitationPropertyType> copyCitation = ((List<CICitationPropertyType> ) strategy.copy(LocatorUtils.property(locator, "citation", sourceCitation), sourceCitation, this.isSetCitation()));
                    copy.unsetCitation();
                    if (copyCitation!= null) {
                        List<CICitationPropertyType> uniqueCitationl = copy.getCitation();
                        uniqueCitationl.addAll(copyCitation);
                    }
                } else {
                    if (citationShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetCitation();
                    }
                }
            }
            {
                Boolean identifierShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetIdentifier());
                if (identifierShouldBeCopiedAndSet == Boolean.TRUE) {
                    MDIdentifierPropertyType sourceIdentifier;
                    sourceIdentifier = this.getIdentifier();
                    MDIdentifierPropertyType copyIdentifier = ((MDIdentifierPropertyType) strategy.copy(LocatorUtils.property(locator, "identifier", sourceIdentifier), sourceIdentifier, this.isSetIdentifier()));
                    copy.setIdentifier(copyIdentifier);
                } else {
                    if (identifierShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.identifier = null;
                    }
                }
            }
            {
                Boolean descriptionShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetDescription());
                if (descriptionShouldBeCopiedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType sourceDescription;
                    sourceDescription = this.getDescription();
                    CharacterStringPropertyType copyDescription = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "description", sourceDescription), sourceDescription, this.isSetDescription()));
                    copy.setDescription(copyDescription);
                } else {
                    if (descriptionShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.description = null;
                    }
                }
            }
            {
                Boolean sponsorShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetSponsor());
                if (sponsorShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<CIResponsiblePartyPropertyType> sourceSponsor;
                    sourceSponsor = (this.isSetSponsor()?this.getSponsor():null);
                    @SuppressWarnings("unchecked")
                    List<CIResponsiblePartyPropertyType> copySponsor = ((List<CIResponsiblePartyPropertyType> ) strategy.copy(LocatorUtils.property(locator, "sponsor", sourceSponsor), sourceSponsor, this.isSetSponsor()));
                    copy.unsetSponsor();
                    if (copySponsor!= null) {
                        List<CIResponsiblePartyPropertyType> uniqueSponsorl = copy.getSponsor();
                        uniqueSponsorl.addAll(copySponsor);
                    }
                } else {
                    if (sponsorShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetSponsor();
                    }
                }
            }
            {
                Boolean instrumentShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetInstrument());
                if (instrumentShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MIInstrumentPropertyType> sourceInstrument;
                    sourceInstrument = (this.isSetInstrument()?this.getInstrument():null);
                    @SuppressWarnings("unchecked")
                    List<MIInstrumentPropertyType> copyInstrument = ((List<MIInstrumentPropertyType> ) strategy.copy(LocatorUtils.property(locator, "instrument", sourceInstrument), sourceInstrument, this.isSetInstrument()));
                    copy.unsetInstrument();
                    if (copyInstrument!= null) {
                        List<MIInstrumentPropertyType> uniqueInstrumentl = copy.getInstrument();
                        uniqueInstrumentl.addAll(copyInstrument);
                    }
                } else {
                    if (instrumentShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetInstrument();
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MIPlatformType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof MIPlatformType) {
            final MIPlatformType target = this;
            final MIPlatformType leftObject = ((MIPlatformType) left);
            final MIPlatformType rightObject = ((MIPlatformType) right);
            {
                Boolean citationShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetCitation(), rightObject.isSetCitation());
                if (citationShouldBeMergedAndSet == Boolean.TRUE) {
                    List<CICitationPropertyType> lhsCitation;
                    lhsCitation = (leftObject.isSetCitation()?leftObject.getCitation():null);
                    List<CICitationPropertyType> rhsCitation;
                    rhsCitation = (rightObject.isSetCitation()?rightObject.getCitation():null);
                    List<CICitationPropertyType> mergedCitation = ((List<CICitationPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "citation", lhsCitation), LocatorUtils.property(rightLocator, "citation", rhsCitation), lhsCitation, rhsCitation, leftObject.isSetCitation(), rightObject.isSetCitation()));
                    target.unsetCitation();
                    if (mergedCitation!= null) {
                        List<CICitationPropertyType> uniqueCitationl = target.getCitation();
                        uniqueCitationl.addAll(mergedCitation);
                    }
                } else {
                    if (citationShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetCitation();
                    }
                }
            }
            {
                Boolean identifierShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetIdentifier(), rightObject.isSetIdentifier());
                if (identifierShouldBeMergedAndSet == Boolean.TRUE) {
                    MDIdentifierPropertyType lhsIdentifier;
                    lhsIdentifier = leftObject.getIdentifier();
                    MDIdentifierPropertyType rhsIdentifier;
                    rhsIdentifier = rightObject.getIdentifier();
                    MDIdentifierPropertyType mergedIdentifier = ((MDIdentifierPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "identifier", lhsIdentifier), LocatorUtils.property(rightLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier, leftObject.isSetIdentifier(), rightObject.isSetIdentifier()));
                    target.setIdentifier(mergedIdentifier);
                } else {
                    if (identifierShouldBeMergedAndSet == Boolean.FALSE) {
                        target.identifier = null;
                    }
                }
            }
            {
                Boolean descriptionShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetDescription(), rightObject.isSetDescription());
                if (descriptionShouldBeMergedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType lhsDescription;
                    lhsDescription = leftObject.getDescription();
                    CharacterStringPropertyType rhsDescription;
                    rhsDescription = rightObject.getDescription();
                    CharacterStringPropertyType mergedDescription = ((CharacterStringPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "description", lhsDescription), LocatorUtils.property(rightLocator, "description", rhsDescription), lhsDescription, rhsDescription, leftObject.isSetDescription(), rightObject.isSetDescription()));
                    target.setDescription(mergedDescription);
                } else {
                    if (descriptionShouldBeMergedAndSet == Boolean.FALSE) {
                        target.description = null;
                    }
                }
            }
            {
                Boolean sponsorShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetSponsor(), rightObject.isSetSponsor());
                if (sponsorShouldBeMergedAndSet == Boolean.TRUE) {
                    List<CIResponsiblePartyPropertyType> lhsSponsor;
                    lhsSponsor = (leftObject.isSetSponsor()?leftObject.getSponsor():null);
                    List<CIResponsiblePartyPropertyType> rhsSponsor;
                    rhsSponsor = (rightObject.isSetSponsor()?rightObject.getSponsor():null);
                    List<CIResponsiblePartyPropertyType> mergedSponsor = ((List<CIResponsiblePartyPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "sponsor", lhsSponsor), LocatorUtils.property(rightLocator, "sponsor", rhsSponsor), lhsSponsor, rhsSponsor, leftObject.isSetSponsor(), rightObject.isSetSponsor()));
                    target.unsetSponsor();
                    if (mergedSponsor!= null) {
                        List<CIResponsiblePartyPropertyType> uniqueSponsorl = target.getSponsor();
                        uniqueSponsorl.addAll(mergedSponsor);
                    }
                } else {
                    if (sponsorShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetSponsor();
                    }
                }
            }
            {
                Boolean instrumentShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetInstrument(), rightObject.isSetInstrument());
                if (instrumentShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MIInstrumentPropertyType> lhsInstrument;
                    lhsInstrument = (leftObject.isSetInstrument()?leftObject.getInstrument():null);
                    List<MIInstrumentPropertyType> rhsInstrument;
                    rhsInstrument = (rightObject.isSetInstrument()?rightObject.getInstrument():null);
                    List<MIInstrumentPropertyType> mergedInstrument = ((List<MIInstrumentPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "instrument", lhsInstrument), LocatorUtils.property(rightLocator, "instrument", rhsInstrument), lhsInstrument, rhsInstrument, leftObject.isSetInstrument(), rightObject.isSetInstrument()));
                    target.unsetInstrument();
                    if (mergedInstrument!= null) {
                        List<MIInstrumentPropertyType> uniqueInstrumentl = target.getInstrument();
                        uniqueInstrumentl.addAll(mergedInstrument);
                    }
                } else {
                    if (instrumentShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetInstrument();
                    }
                }
            }
        }
    }

    public void setCitation(List<CICitationPropertyType> value) {
        this.citation = null;
        if (value!= null) {
            List<CICitationPropertyType> draftl = this.getCitation();
            draftl.addAll(value);
        }
    }

    public void setSponsor(List<CIResponsiblePartyPropertyType> value) {
        this.sponsor = null;
        if (value!= null) {
            List<CIResponsiblePartyPropertyType> draftl = this.getSponsor();
            draftl.addAll(value);
        }
    }

    public void setInstrument(List<MIInstrumentPropertyType> value) {
        this.instrument = null;
        if (value!= null) {
            List<MIInstrumentPropertyType> draftl = this.getInstrument();
            draftl.addAll(value);
        }
    }

    public MIPlatformType withCitation(CICitationPropertyType... values) {
        if (values!= null) {
            for (CICitationPropertyType value: values) {
                getCitation().add(value);
            }
        }
        return this;
    }

    public MIPlatformType withCitation(Collection<CICitationPropertyType> values) {
        if (values!= null) {
            getCitation().addAll(values);
        }
        return this;
    }

    public MIPlatformType withIdentifier(MDIdentifierPropertyType value) {
        setIdentifier(value);
        return this;
    }

    public MIPlatformType withDescription(CharacterStringPropertyType value) {
        setDescription(value);
        return this;
    }

    public MIPlatformType withSponsor(CIResponsiblePartyPropertyType... values) {
        if (values!= null) {
            for (CIResponsiblePartyPropertyType value: values) {
                getSponsor().add(value);
            }
        }
        return this;
    }

    public MIPlatformType withSponsor(Collection<CIResponsiblePartyPropertyType> values) {
        if (values!= null) {
            getSponsor().addAll(values);
        }
        return this;
    }

    public MIPlatformType withInstrument(MIInstrumentPropertyType... values) {
        if (values!= null) {
            for (MIInstrumentPropertyType value: values) {
                getInstrument().add(value);
            }
        }
        return this;
    }

    public MIPlatformType withInstrument(Collection<MIInstrumentPropertyType> values) {
        if (values!= null) {
            getInstrument().addAll(values);
        }
        return this;
    }

    public MIPlatformType withCitation(List<CICitationPropertyType> value) {
        setCitation(value);
        return this;
    }

    public MIPlatformType withSponsor(List<CIResponsiblePartyPropertyType> value) {
        setSponsor(value);
        return this;
    }

    public MIPlatformType withInstrument(List<MIInstrumentPropertyType> value) {
        setInstrument(value);
        return this;
    }

}
