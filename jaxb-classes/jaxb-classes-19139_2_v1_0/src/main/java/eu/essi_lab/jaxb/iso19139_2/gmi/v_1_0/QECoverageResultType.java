//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.02.26 at 04:55:57 PM AST 
//


package eu.essi_lab.jaxb.iso19139_2.gmi.v_1_0;

/*-
 * #%L
 * Discovery and Access Broker (DAB)
 * %%
 * Copyright (C) 2021 - 2025 National Research Council of Italy (CNR)/Institute of Atmospheric Pollution Research (IIA)/ESSI-Lab
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import net.opengis.iso19139.gmd.v_20060504.AbstractDQResultType;
import net.opengis.iso19139.gmd.v_20060504.MDCoverageDescriptionPropertyType;
import net.opengis.iso19139.gmd.v_20060504.MDFormatPropertyType;
import net.opengis.iso19139.gmd.v_20060504.MDSpatialRepresentationPropertyType;
import net.opengis.iso19139.gmd.v_20060504.MDSpatialRepresentationTypeCodePropertyType;


/**
 * Description: Result of a data quality measure organising the measured values as a coverage - shortName: CoverageResult
 * 
 * <p>Java class for QE_CoverageResult_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="QE_CoverageResult_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gmd}AbstractDQ_Result_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="spatialRepresentationType" type="{http://www.isotc211.org/2005/gmd}MD_SpatialRepresentationTypeCode_PropertyType"/&gt;
 *         &lt;element name="resultSpatialRepresentation" type="{http://www.isotc211.org/2005/gmd}MD_SpatialRepresentation_PropertyType"/&gt;
 *         &lt;element name="resultContentDescription" type="{http://www.isotc211.org/2005/gmd}MD_CoverageDescription_PropertyType"/&gt;
 *         &lt;element name="resultFormat" type="{http://www.isotc211.org/2005/gmd}MD_Format_PropertyType"/&gt;
 *         &lt;element name="resultFile" type="{http://www.isotc211.org/2005/gmi}MX_DataFile_PropertyType"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "QE_CoverageResult_Type", propOrder = {
    "spatialRepresentationType",
    "resultSpatialRepresentation",
    "resultContentDescription",
    "resultFormat",
    "resultFile"
})
public class QECoverageResultType
    extends AbstractDQResultType
    implements Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    @XmlElement(required = true)
    protected MDSpatialRepresentationTypeCodePropertyType spatialRepresentationType;
    @XmlElement(required = true)
    protected MDSpatialRepresentationPropertyType resultSpatialRepresentation;
    @XmlElement(required = true)
    protected MDCoverageDescriptionPropertyType resultContentDescription;
    @XmlElement(required = true)
    protected MDFormatPropertyType resultFormat;
    @XmlElement(required = true)
    protected MXDataFilePropertyType resultFile;

    /**
     * Gets the value of the spatialRepresentationType property.
     * 
     * @return
     *     possible object is
     *     {@link MDSpatialRepresentationTypeCodePropertyType }
     *     
     */
    public MDSpatialRepresentationTypeCodePropertyType getSpatialRepresentationType() {
        return spatialRepresentationType;
    }

    /**
     * Sets the value of the spatialRepresentationType property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDSpatialRepresentationTypeCodePropertyType }
     *     
     */
    public void setSpatialRepresentationType(MDSpatialRepresentationTypeCodePropertyType value) {
        this.spatialRepresentationType = value;
    }

    public boolean isSetSpatialRepresentationType() {
        return (this.spatialRepresentationType!= null);
    }

    /**
     * Gets the value of the resultSpatialRepresentation property.
     * 
     * @return
     *     possible object is
     *     {@link MDSpatialRepresentationPropertyType }
     *     
     */
    public MDSpatialRepresentationPropertyType getResultSpatialRepresentation() {
        return resultSpatialRepresentation;
    }

    /**
     * Sets the value of the resultSpatialRepresentation property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDSpatialRepresentationPropertyType }
     *     
     */
    public void setResultSpatialRepresentation(MDSpatialRepresentationPropertyType value) {
        this.resultSpatialRepresentation = value;
    }

    public boolean isSetResultSpatialRepresentation() {
        return (this.resultSpatialRepresentation!= null);
    }

    /**
     * Gets the value of the resultContentDescription property.
     * 
     * @return
     *     possible object is
     *     {@link MDCoverageDescriptionPropertyType }
     *     
     */
    public MDCoverageDescriptionPropertyType getResultContentDescription() {
        return resultContentDescription;
    }

    /**
     * Sets the value of the resultContentDescription property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDCoverageDescriptionPropertyType }
     *     
     */
    public void setResultContentDescription(MDCoverageDescriptionPropertyType value) {
        this.resultContentDescription = value;
    }

    public boolean isSetResultContentDescription() {
        return (this.resultContentDescription!= null);
    }

    /**
     * Gets the value of the resultFormat property.
     * 
     * @return
     *     possible object is
     *     {@link MDFormatPropertyType }
     *     
     */
    public MDFormatPropertyType getResultFormat() {
        return resultFormat;
    }

    /**
     * Sets the value of the resultFormat property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDFormatPropertyType }
     *     
     */
    public void setResultFormat(MDFormatPropertyType value) {
        this.resultFormat = value;
    }

    public boolean isSetResultFormat() {
        return (this.resultFormat!= null);
    }

    /**
     * Gets the value of the resultFile property.
     * 
     * @return
     *     possible object is
     *     {@link MXDataFilePropertyType }
     *     
     */
    public MXDataFilePropertyType getResultFile() {
        return resultFile;
    }

    /**
     * Sets the value of the resultFile property.
     * 
     * @param value
     *     allowed object is
     *     {@link MXDataFilePropertyType }
     *     
     */
    public void setResultFile(MXDataFilePropertyType value) {
        this.resultFile = value;
    }

    public boolean isSetResultFile() {
        return (this.resultFile!= null);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            MDSpatialRepresentationTypeCodePropertyType theSpatialRepresentationType;
            theSpatialRepresentationType = this.getSpatialRepresentationType();
            strategy.appendField(locator, this, "spatialRepresentationType", buffer, theSpatialRepresentationType, this.isSetSpatialRepresentationType());
        }
        {
            MDSpatialRepresentationPropertyType theResultSpatialRepresentation;
            theResultSpatialRepresentation = this.getResultSpatialRepresentation();
            strategy.appendField(locator, this, "resultSpatialRepresentation", buffer, theResultSpatialRepresentation, this.isSetResultSpatialRepresentation());
        }
        {
            MDCoverageDescriptionPropertyType theResultContentDescription;
            theResultContentDescription = this.getResultContentDescription();
            strategy.appendField(locator, this, "resultContentDescription", buffer, theResultContentDescription, this.isSetResultContentDescription());
        }
        {
            MDFormatPropertyType theResultFormat;
            theResultFormat = this.getResultFormat();
            strategy.appendField(locator, this, "resultFormat", buffer, theResultFormat, this.isSetResultFormat());
        }
        {
            MXDataFilePropertyType theResultFile;
            theResultFile = this.getResultFile();
            strategy.appendField(locator, this, "resultFile", buffer, theResultFile, this.isSetResultFile());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final QECoverageResultType that = ((QECoverageResultType) object);
        {
            MDSpatialRepresentationTypeCodePropertyType lhsSpatialRepresentationType;
            lhsSpatialRepresentationType = this.getSpatialRepresentationType();
            MDSpatialRepresentationTypeCodePropertyType rhsSpatialRepresentationType;
            rhsSpatialRepresentationType = that.getSpatialRepresentationType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "spatialRepresentationType", lhsSpatialRepresentationType), LocatorUtils.property(thatLocator, "spatialRepresentationType", rhsSpatialRepresentationType), lhsSpatialRepresentationType, rhsSpatialRepresentationType, this.isSetSpatialRepresentationType(), that.isSetSpatialRepresentationType())) {
                return false;
            }
        }
        {
            MDSpatialRepresentationPropertyType lhsResultSpatialRepresentation;
            lhsResultSpatialRepresentation = this.getResultSpatialRepresentation();
            MDSpatialRepresentationPropertyType rhsResultSpatialRepresentation;
            rhsResultSpatialRepresentation = that.getResultSpatialRepresentation();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resultSpatialRepresentation", lhsResultSpatialRepresentation), LocatorUtils.property(thatLocator, "resultSpatialRepresentation", rhsResultSpatialRepresentation), lhsResultSpatialRepresentation, rhsResultSpatialRepresentation, this.isSetResultSpatialRepresentation(), that.isSetResultSpatialRepresentation())) {
                return false;
            }
        }
        {
            MDCoverageDescriptionPropertyType lhsResultContentDescription;
            lhsResultContentDescription = this.getResultContentDescription();
            MDCoverageDescriptionPropertyType rhsResultContentDescription;
            rhsResultContentDescription = that.getResultContentDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resultContentDescription", lhsResultContentDescription), LocatorUtils.property(thatLocator, "resultContentDescription", rhsResultContentDescription), lhsResultContentDescription, rhsResultContentDescription, this.isSetResultContentDescription(), that.isSetResultContentDescription())) {
                return false;
            }
        }
        {
            MDFormatPropertyType lhsResultFormat;
            lhsResultFormat = this.getResultFormat();
            MDFormatPropertyType rhsResultFormat;
            rhsResultFormat = that.getResultFormat();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resultFormat", lhsResultFormat), LocatorUtils.property(thatLocator, "resultFormat", rhsResultFormat), lhsResultFormat, rhsResultFormat, this.isSetResultFormat(), that.isSetResultFormat())) {
                return false;
            }
        }
        {
            MXDataFilePropertyType lhsResultFile;
            lhsResultFile = this.getResultFile();
            MXDataFilePropertyType rhsResultFile;
            rhsResultFile = that.getResultFile();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "resultFile", lhsResultFile), LocatorUtils.property(thatLocator, "resultFile", rhsResultFile), lhsResultFile, rhsResultFile, this.isSetResultFile(), that.isSetResultFile())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            MDSpatialRepresentationTypeCodePropertyType theSpatialRepresentationType;
            theSpatialRepresentationType = this.getSpatialRepresentationType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "spatialRepresentationType", theSpatialRepresentationType), currentHashCode, theSpatialRepresentationType, this.isSetSpatialRepresentationType());
        }
        {
            MDSpatialRepresentationPropertyType theResultSpatialRepresentation;
            theResultSpatialRepresentation = this.getResultSpatialRepresentation();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resultSpatialRepresentation", theResultSpatialRepresentation), currentHashCode, theResultSpatialRepresentation, this.isSetResultSpatialRepresentation());
        }
        {
            MDCoverageDescriptionPropertyType theResultContentDescription;
            theResultContentDescription = this.getResultContentDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resultContentDescription", theResultContentDescription), currentHashCode, theResultContentDescription, this.isSetResultContentDescription());
        }
        {
            MDFormatPropertyType theResultFormat;
            theResultFormat = this.getResultFormat();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resultFormat", theResultFormat), currentHashCode, theResultFormat, this.isSetResultFormat());
        }
        {
            MXDataFilePropertyType theResultFile;
            theResultFile = this.getResultFile();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "resultFile", theResultFile), currentHashCode, theResultFile, this.isSetResultFile());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof QECoverageResultType) {
            final QECoverageResultType copy = ((QECoverageResultType) draftCopy);
            {
                Boolean spatialRepresentationTypeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetSpatialRepresentationType());
                if (spatialRepresentationTypeShouldBeCopiedAndSet == Boolean.TRUE) {
                    MDSpatialRepresentationTypeCodePropertyType sourceSpatialRepresentationType;
                    sourceSpatialRepresentationType = this.getSpatialRepresentationType();
                    MDSpatialRepresentationTypeCodePropertyType copySpatialRepresentationType = ((MDSpatialRepresentationTypeCodePropertyType) strategy.copy(LocatorUtils.property(locator, "spatialRepresentationType", sourceSpatialRepresentationType), sourceSpatialRepresentationType, this.isSetSpatialRepresentationType()));
                    copy.setSpatialRepresentationType(copySpatialRepresentationType);
                } else {
                    if (spatialRepresentationTypeShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.spatialRepresentationType = null;
                    }
                }
            }
            {
                Boolean resultSpatialRepresentationShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetResultSpatialRepresentation());
                if (resultSpatialRepresentationShouldBeCopiedAndSet == Boolean.TRUE) {
                    MDSpatialRepresentationPropertyType sourceResultSpatialRepresentation;
                    sourceResultSpatialRepresentation = this.getResultSpatialRepresentation();
                    MDSpatialRepresentationPropertyType copyResultSpatialRepresentation = ((MDSpatialRepresentationPropertyType) strategy.copy(LocatorUtils.property(locator, "resultSpatialRepresentation", sourceResultSpatialRepresentation), sourceResultSpatialRepresentation, this.isSetResultSpatialRepresentation()));
                    copy.setResultSpatialRepresentation(copyResultSpatialRepresentation);
                } else {
                    if (resultSpatialRepresentationShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.resultSpatialRepresentation = null;
                    }
                }
            }
            {
                Boolean resultContentDescriptionShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetResultContentDescription());
                if (resultContentDescriptionShouldBeCopiedAndSet == Boolean.TRUE) {
                    MDCoverageDescriptionPropertyType sourceResultContentDescription;
                    sourceResultContentDescription = this.getResultContentDescription();
                    MDCoverageDescriptionPropertyType copyResultContentDescription = ((MDCoverageDescriptionPropertyType) strategy.copy(LocatorUtils.property(locator, "resultContentDescription", sourceResultContentDescription), sourceResultContentDescription, this.isSetResultContentDescription()));
                    copy.setResultContentDescription(copyResultContentDescription);
                } else {
                    if (resultContentDescriptionShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.resultContentDescription = null;
                    }
                }
            }
            {
                Boolean resultFormatShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetResultFormat());
                if (resultFormatShouldBeCopiedAndSet == Boolean.TRUE) {
                    MDFormatPropertyType sourceResultFormat;
                    sourceResultFormat = this.getResultFormat();
                    MDFormatPropertyType copyResultFormat = ((MDFormatPropertyType) strategy.copy(LocatorUtils.property(locator, "resultFormat", sourceResultFormat), sourceResultFormat, this.isSetResultFormat()));
                    copy.setResultFormat(copyResultFormat);
                } else {
                    if (resultFormatShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.resultFormat = null;
                    }
                }
            }
            {
                Boolean resultFileShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetResultFile());
                if (resultFileShouldBeCopiedAndSet == Boolean.TRUE) {
                    MXDataFilePropertyType sourceResultFile;
                    sourceResultFile = this.getResultFile();
                    MXDataFilePropertyType copyResultFile = ((MXDataFilePropertyType) strategy.copy(LocatorUtils.property(locator, "resultFile", sourceResultFile), sourceResultFile, this.isSetResultFile()));
                    copy.setResultFile(copyResultFile);
                } else {
                    if (resultFileShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.resultFile = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new QECoverageResultType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof QECoverageResultType) {
            final QECoverageResultType target = this;
            final QECoverageResultType leftObject = ((QECoverageResultType) left);
            final QECoverageResultType rightObject = ((QECoverageResultType) right);
            {
                Boolean spatialRepresentationTypeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetSpatialRepresentationType(), rightObject.isSetSpatialRepresentationType());
                if (spatialRepresentationTypeShouldBeMergedAndSet == Boolean.TRUE) {
                    MDSpatialRepresentationTypeCodePropertyType lhsSpatialRepresentationType;
                    lhsSpatialRepresentationType = leftObject.getSpatialRepresentationType();
                    MDSpatialRepresentationTypeCodePropertyType rhsSpatialRepresentationType;
                    rhsSpatialRepresentationType = rightObject.getSpatialRepresentationType();
                    MDSpatialRepresentationTypeCodePropertyType mergedSpatialRepresentationType = ((MDSpatialRepresentationTypeCodePropertyType) strategy.merge(LocatorUtils.property(leftLocator, "spatialRepresentationType", lhsSpatialRepresentationType), LocatorUtils.property(rightLocator, "spatialRepresentationType", rhsSpatialRepresentationType), lhsSpatialRepresentationType, rhsSpatialRepresentationType, leftObject.isSetSpatialRepresentationType(), rightObject.isSetSpatialRepresentationType()));
                    target.setSpatialRepresentationType(mergedSpatialRepresentationType);
                } else {
                    if (spatialRepresentationTypeShouldBeMergedAndSet == Boolean.FALSE) {
                        target.spatialRepresentationType = null;
                    }
                }
            }
            {
                Boolean resultSpatialRepresentationShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetResultSpatialRepresentation(), rightObject.isSetResultSpatialRepresentation());
                if (resultSpatialRepresentationShouldBeMergedAndSet == Boolean.TRUE) {
                    MDSpatialRepresentationPropertyType lhsResultSpatialRepresentation;
                    lhsResultSpatialRepresentation = leftObject.getResultSpatialRepresentation();
                    MDSpatialRepresentationPropertyType rhsResultSpatialRepresentation;
                    rhsResultSpatialRepresentation = rightObject.getResultSpatialRepresentation();
                    MDSpatialRepresentationPropertyType mergedResultSpatialRepresentation = ((MDSpatialRepresentationPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "resultSpatialRepresentation", lhsResultSpatialRepresentation), LocatorUtils.property(rightLocator, "resultSpatialRepresentation", rhsResultSpatialRepresentation), lhsResultSpatialRepresentation, rhsResultSpatialRepresentation, leftObject.isSetResultSpatialRepresentation(), rightObject.isSetResultSpatialRepresentation()));
                    target.setResultSpatialRepresentation(mergedResultSpatialRepresentation);
                } else {
                    if (resultSpatialRepresentationShouldBeMergedAndSet == Boolean.FALSE) {
                        target.resultSpatialRepresentation = null;
                    }
                }
            }
            {
                Boolean resultContentDescriptionShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetResultContentDescription(), rightObject.isSetResultContentDescription());
                if (resultContentDescriptionShouldBeMergedAndSet == Boolean.TRUE) {
                    MDCoverageDescriptionPropertyType lhsResultContentDescription;
                    lhsResultContentDescription = leftObject.getResultContentDescription();
                    MDCoverageDescriptionPropertyType rhsResultContentDescription;
                    rhsResultContentDescription = rightObject.getResultContentDescription();
                    MDCoverageDescriptionPropertyType mergedResultContentDescription = ((MDCoverageDescriptionPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "resultContentDescription", lhsResultContentDescription), LocatorUtils.property(rightLocator, "resultContentDescription", rhsResultContentDescription), lhsResultContentDescription, rhsResultContentDescription, leftObject.isSetResultContentDescription(), rightObject.isSetResultContentDescription()));
                    target.setResultContentDescription(mergedResultContentDescription);
                } else {
                    if (resultContentDescriptionShouldBeMergedAndSet == Boolean.FALSE) {
                        target.resultContentDescription = null;
                    }
                }
            }
            {
                Boolean resultFormatShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetResultFormat(), rightObject.isSetResultFormat());
                if (resultFormatShouldBeMergedAndSet == Boolean.TRUE) {
                    MDFormatPropertyType lhsResultFormat;
                    lhsResultFormat = leftObject.getResultFormat();
                    MDFormatPropertyType rhsResultFormat;
                    rhsResultFormat = rightObject.getResultFormat();
                    MDFormatPropertyType mergedResultFormat = ((MDFormatPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "resultFormat", lhsResultFormat), LocatorUtils.property(rightLocator, "resultFormat", rhsResultFormat), lhsResultFormat, rhsResultFormat, leftObject.isSetResultFormat(), rightObject.isSetResultFormat()));
                    target.setResultFormat(mergedResultFormat);
                } else {
                    if (resultFormatShouldBeMergedAndSet == Boolean.FALSE) {
                        target.resultFormat = null;
                    }
                }
            }
            {
                Boolean resultFileShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetResultFile(), rightObject.isSetResultFile());
                if (resultFileShouldBeMergedAndSet == Boolean.TRUE) {
                    MXDataFilePropertyType lhsResultFile;
                    lhsResultFile = leftObject.getResultFile();
                    MXDataFilePropertyType rhsResultFile;
                    rhsResultFile = rightObject.getResultFile();
                    MXDataFilePropertyType mergedResultFile = ((MXDataFilePropertyType) strategy.merge(LocatorUtils.property(leftLocator, "resultFile", lhsResultFile), LocatorUtils.property(rightLocator, "resultFile", rhsResultFile), lhsResultFile, rhsResultFile, leftObject.isSetResultFile(), rightObject.isSetResultFile()));
                    target.setResultFile(mergedResultFile);
                } else {
                    if (resultFileShouldBeMergedAndSet == Boolean.FALSE) {
                        target.resultFile = null;
                    }
                }
            }
        }
    }

    public QECoverageResultType withSpatialRepresentationType(MDSpatialRepresentationTypeCodePropertyType value) {
        setSpatialRepresentationType(value);
        return this;
    }

    public QECoverageResultType withResultSpatialRepresentation(MDSpatialRepresentationPropertyType value) {
        setResultSpatialRepresentation(value);
        return this;
    }

    public QECoverageResultType withResultContentDescription(MDCoverageDescriptionPropertyType value) {
        setResultContentDescription(value);
        return this;
    }

    public QECoverageResultType withResultFormat(MDFormatPropertyType value) {
        setResultFormat(value);
        return this;
    }

    public QECoverageResultType withResultFile(MXDataFilePropertyType value) {
        setResultFile(value);
        return this;
    }

}
