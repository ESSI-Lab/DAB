//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.02.26 at 04:55:57 PM AST 
//


package eu.essi_lab.jaxb.iso19139_2.gmi.v_1_0;

/*-
 * #%L
 * Discovery and Access Broker (DAB)
 * %%
 * Copyright (C) 2021 - 2025 National Research Council of Italy (CNR)/Institute of Atmospheric Pollution Research (IIA)/ESSI-Lab
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import net.opengis.iso19139.gmd.v_20060504.MDGeorectifiedType;


/**
 * Description: extends georectified grid description to include associated checkpoints - shortName: IGeorect
 * 
 * <p>Java class for MI_Georectified_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MI_Georectified_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gmd}MD_Georectified_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="checkPoint" type="{http://www.isotc211.org/2005/gmi}MI_GCP_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element name="geolocationIdentification" type="{http://www.isotc211.org/2005/gmi}MI_GCPCollection_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MI_Georectified_Type", propOrder = {
    "checkPoint",
    "geolocationIdentification"
})
public class MIGeorectifiedType
    extends MDGeorectifiedType
    implements Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    protected List<MIGCPPropertyType> checkPoint;
    protected List<MIGCPCollectionPropertyType> geolocationIdentification;

    /**
     * Gets the value of the checkPoint property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the checkPoint property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCheckPoint().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MIGCPPropertyType }
     * 
     * 
     */
    public List<MIGCPPropertyType> getCheckPoint() {
        if (checkPoint == null) {
            checkPoint = new ArrayList<MIGCPPropertyType>();
        }
        return this.checkPoint;
    }

    public boolean isSetCheckPoint() {
        return ((this.checkPoint!= null)&&(!this.checkPoint.isEmpty()));
    }

    public void unsetCheckPoint() {
        this.checkPoint = null;
    }

    /**
     * Gets the value of the geolocationIdentification property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the geolocationIdentification property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getGeolocationIdentification().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MIGCPCollectionPropertyType }
     * 
     * 
     */
    public List<MIGCPCollectionPropertyType> getGeolocationIdentification() {
        if (geolocationIdentification == null) {
            geolocationIdentification = new ArrayList<MIGCPCollectionPropertyType>();
        }
        return this.geolocationIdentification;
    }

    public boolean isSetGeolocationIdentification() {
        return ((this.geolocationIdentification!= null)&&(!this.geolocationIdentification.isEmpty()));
    }

    public void unsetGeolocationIdentification() {
        this.geolocationIdentification = null;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<MIGCPPropertyType> theCheckPoint;
            theCheckPoint = (this.isSetCheckPoint()?this.getCheckPoint():null);
            strategy.appendField(locator, this, "checkPoint", buffer, theCheckPoint, this.isSetCheckPoint());
        }
        {
            List<MIGCPCollectionPropertyType> theGeolocationIdentification;
            theGeolocationIdentification = (this.isSetGeolocationIdentification()?this.getGeolocationIdentification():null);
            strategy.appendField(locator, this, "geolocationIdentification", buffer, theGeolocationIdentification, this.isSetGeolocationIdentification());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MIGeorectifiedType that = ((MIGeorectifiedType) object);
        {
            List<MIGCPPropertyType> lhsCheckPoint;
            lhsCheckPoint = (this.isSetCheckPoint()?this.getCheckPoint():null);
            List<MIGCPPropertyType> rhsCheckPoint;
            rhsCheckPoint = (that.isSetCheckPoint()?that.getCheckPoint():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "checkPoint", lhsCheckPoint), LocatorUtils.property(thatLocator, "checkPoint", rhsCheckPoint), lhsCheckPoint, rhsCheckPoint, this.isSetCheckPoint(), that.isSetCheckPoint())) {
                return false;
            }
        }
        {
            List<MIGCPCollectionPropertyType> lhsGeolocationIdentification;
            lhsGeolocationIdentification = (this.isSetGeolocationIdentification()?this.getGeolocationIdentification():null);
            List<MIGCPCollectionPropertyType> rhsGeolocationIdentification;
            rhsGeolocationIdentification = (that.isSetGeolocationIdentification()?that.getGeolocationIdentification():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "geolocationIdentification", lhsGeolocationIdentification), LocatorUtils.property(thatLocator, "geolocationIdentification", rhsGeolocationIdentification), lhsGeolocationIdentification, rhsGeolocationIdentification, this.isSetGeolocationIdentification(), that.isSetGeolocationIdentification())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<MIGCPPropertyType> theCheckPoint;
            theCheckPoint = (this.isSetCheckPoint()?this.getCheckPoint():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "checkPoint", theCheckPoint), currentHashCode, theCheckPoint, this.isSetCheckPoint());
        }
        {
            List<MIGCPCollectionPropertyType> theGeolocationIdentification;
            theGeolocationIdentification = (this.isSetGeolocationIdentification()?this.getGeolocationIdentification():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "geolocationIdentification", theGeolocationIdentification), currentHashCode, theGeolocationIdentification, this.isSetGeolocationIdentification());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MIGeorectifiedType) {
            final MIGeorectifiedType copy = ((MIGeorectifiedType) draftCopy);
            {
                Boolean checkPointShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetCheckPoint());
                if (checkPointShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MIGCPPropertyType> sourceCheckPoint;
                    sourceCheckPoint = (this.isSetCheckPoint()?this.getCheckPoint():null);
                    @SuppressWarnings("unchecked")
                    List<MIGCPPropertyType> copyCheckPoint = ((List<MIGCPPropertyType> ) strategy.copy(LocatorUtils.property(locator, "checkPoint", sourceCheckPoint), sourceCheckPoint, this.isSetCheckPoint()));
                    copy.unsetCheckPoint();
                    if (copyCheckPoint!= null) {
                        List<MIGCPPropertyType> uniqueCheckPointl = copy.getCheckPoint();
                        uniqueCheckPointl.addAll(copyCheckPoint);
                    }
                } else {
                    if (checkPointShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetCheckPoint();
                    }
                }
            }
            {
                Boolean geolocationIdentificationShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetGeolocationIdentification());
                if (geolocationIdentificationShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MIGCPCollectionPropertyType> sourceGeolocationIdentification;
                    sourceGeolocationIdentification = (this.isSetGeolocationIdentification()?this.getGeolocationIdentification():null);
                    @SuppressWarnings("unchecked")
                    List<MIGCPCollectionPropertyType> copyGeolocationIdentification = ((List<MIGCPCollectionPropertyType> ) strategy.copy(LocatorUtils.property(locator, "geolocationIdentification", sourceGeolocationIdentification), sourceGeolocationIdentification, this.isSetGeolocationIdentification()));
                    copy.unsetGeolocationIdentification();
                    if (copyGeolocationIdentification!= null) {
                        List<MIGCPCollectionPropertyType> uniqueGeolocationIdentificationl = copy.getGeolocationIdentification();
                        uniqueGeolocationIdentificationl.addAll(copyGeolocationIdentification);
                    }
                } else {
                    if (geolocationIdentificationShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetGeolocationIdentification();
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MIGeorectifiedType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof MIGeorectifiedType) {
            final MIGeorectifiedType target = this;
            final MIGeorectifiedType leftObject = ((MIGeorectifiedType) left);
            final MIGeorectifiedType rightObject = ((MIGeorectifiedType) right);
            {
                Boolean checkPointShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetCheckPoint(), rightObject.isSetCheckPoint());
                if (checkPointShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MIGCPPropertyType> lhsCheckPoint;
                    lhsCheckPoint = (leftObject.isSetCheckPoint()?leftObject.getCheckPoint():null);
                    List<MIGCPPropertyType> rhsCheckPoint;
                    rhsCheckPoint = (rightObject.isSetCheckPoint()?rightObject.getCheckPoint():null);
                    List<MIGCPPropertyType> mergedCheckPoint = ((List<MIGCPPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "checkPoint", lhsCheckPoint), LocatorUtils.property(rightLocator, "checkPoint", rhsCheckPoint), lhsCheckPoint, rhsCheckPoint, leftObject.isSetCheckPoint(), rightObject.isSetCheckPoint()));
                    target.unsetCheckPoint();
                    if (mergedCheckPoint!= null) {
                        List<MIGCPPropertyType> uniqueCheckPointl = target.getCheckPoint();
                        uniqueCheckPointl.addAll(mergedCheckPoint);
                    }
                } else {
                    if (checkPointShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetCheckPoint();
                    }
                }
            }
            {
                Boolean geolocationIdentificationShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetGeolocationIdentification(), rightObject.isSetGeolocationIdentification());
                if (geolocationIdentificationShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MIGCPCollectionPropertyType> lhsGeolocationIdentification;
                    lhsGeolocationIdentification = (leftObject.isSetGeolocationIdentification()?leftObject.getGeolocationIdentification():null);
                    List<MIGCPCollectionPropertyType> rhsGeolocationIdentification;
                    rhsGeolocationIdentification = (rightObject.isSetGeolocationIdentification()?rightObject.getGeolocationIdentification():null);
                    List<MIGCPCollectionPropertyType> mergedGeolocationIdentification = ((List<MIGCPCollectionPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "geolocationIdentification", lhsGeolocationIdentification), LocatorUtils.property(rightLocator, "geolocationIdentification", rhsGeolocationIdentification), lhsGeolocationIdentification, rhsGeolocationIdentification, leftObject.isSetGeolocationIdentification(), rightObject.isSetGeolocationIdentification()));
                    target.unsetGeolocationIdentification();
                    if (mergedGeolocationIdentification!= null) {
                        List<MIGCPCollectionPropertyType> uniqueGeolocationIdentificationl = target.getGeolocationIdentification();
                        uniqueGeolocationIdentificationl.addAll(mergedGeolocationIdentification);
                    }
                } else {
                    if (geolocationIdentificationShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetGeolocationIdentification();
                    }
                }
            }
        }
    }

    public void setCheckPoint(List<MIGCPPropertyType> value) {
        this.checkPoint = null;
        if (value!= null) {
            List<MIGCPPropertyType> draftl = this.getCheckPoint();
            draftl.addAll(value);
        }
    }

    public void setGeolocationIdentification(List<MIGCPCollectionPropertyType> value) {
        this.geolocationIdentification = null;
        if (value!= null) {
            List<MIGCPCollectionPropertyType> draftl = this.getGeolocationIdentification();
            draftl.addAll(value);
        }
    }

    public MIGeorectifiedType withCheckPoint(MIGCPPropertyType... values) {
        if (values!= null) {
            for (MIGCPPropertyType value: values) {
                getCheckPoint().add(value);
            }
        }
        return this;
    }

    public MIGeorectifiedType withCheckPoint(Collection<MIGCPPropertyType> values) {
        if (values!= null) {
            getCheckPoint().addAll(values);
        }
        return this;
    }

    public MIGeorectifiedType withGeolocationIdentification(MIGCPCollectionPropertyType... values) {
        if (values!= null) {
            for (MIGCPCollectionPropertyType value: values) {
                getGeolocationIdentification().add(value);
            }
        }
        return this;
    }

    public MIGeorectifiedType withGeolocationIdentification(Collection<MIGCPCollectionPropertyType> values) {
        if (values!= null) {
            getGeolocationIdentification().addAll(values);
        }
        return this;
    }

    public MIGeorectifiedType withCheckPoint(List<MIGCPPropertyType> value) {
        setCheckPoint(value);
        return this;
    }

    public MIGeorectifiedType withGeolocationIdentification(List<MIGCPCollectionPropertyType> value) {
        setGeolocationIdentification(value);
        return this;
    }

}
