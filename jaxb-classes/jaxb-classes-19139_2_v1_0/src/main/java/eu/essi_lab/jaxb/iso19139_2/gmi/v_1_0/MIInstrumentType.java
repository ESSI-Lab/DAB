//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.02.26 at 04:55:57 PM AST 
//


package eu.essi_lab.jaxb.iso19139_2.gmi.v_1_0;

/*-
 * #%L
 * Discovery and Access Broker (DAB) Community Edition (CE)
 * %%
 * Copyright (C) 2021 National Research Council of Italy (CNR)/Institute of Atmospheric Pollution Research (IIA)/ESSI-Lab
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import net.opengis.iso19139.gco.v_20060504.AbstractObjectType;
import net.opengis.iso19139.gco.v_20060504.CharacterStringPropertyType;
import net.opengis.iso19139.gmd.v_20060504.CICitationPropertyType;
import net.opengis.iso19139.gmd.v_20060504.MDIdentifierPropertyType;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MI_Instrument_Type", propOrder = {
    "citation",
    "identifier",
    "type",
    "description",
    "mountedOn"
})
public class MIInstrumentType
    extends AbstractObjectType
    implements Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    protected List<CICitationPropertyType> citation;
    @XmlElement(required = true)
    protected MDIdentifierPropertyType identifier;
    @XmlElement(required = true)
    protected CharacterStringPropertyType type;
    protected CharacterStringPropertyType description;
    protected MIPlatformPropertyType mountedOn;

    /**
     * Gets the value of the citation property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the citation property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCitation().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link CICitationPropertyType }
     * 
     * 
     */
    public List<CICitationPropertyType> getCitation() {
        if (citation == null) {
            citation = new ArrayList<CICitationPropertyType>();
        }
        return this.citation;
    }

    public boolean isSetCitation() {
        return ((this.citation!= null)&&(!this.citation.isEmpty()));
    }

    public void unsetCitation() {
        this.citation = null;
    }

    /**
     * Gets the value of the identifier property.
     * 
     * @return
     *     possible object is
     *     {@link MDIdentifierPropertyType }
     *     
     */
    public MDIdentifierPropertyType getIdentifier() {
        return identifier;
    }

    /**
     * Sets the value of the identifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDIdentifierPropertyType }
     *     
     */
    public void setIdentifier(MDIdentifierPropertyType value) {
        this.identifier = value;
    }

    public boolean isSetIdentifier() {
        return (this.identifier!= null);
    }

    /**
     * Gets the value of the type property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getType() {
        return type;
    }

    /**
     * Sets the value of the type property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setType(CharacterStringPropertyType value) {
        this.type = value;
    }

    public boolean isSetType() {
        return (this.type!= null);
    }

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public CharacterStringPropertyType getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link CharacterStringPropertyType }
     *     
     */
    public void setDescription(CharacterStringPropertyType value) {
        this.description = value;
    }

    public boolean isSetDescription() {
        return (this.description!= null);
    }

    /**
     * Gets the value of the mountedOn property.
     * 
     * @return
     *     possible object is
     *     {@link MIPlatformPropertyType }
     *     
     */
    public MIPlatformPropertyType getMountedOn() {
        return mountedOn;
    }

    /**
     * Sets the value of the mountedOn property.
     * 
     * @param value
     *     allowed object is
     *     {@link MIPlatformPropertyType }
     *     
     */
    public void setMountedOn(MIPlatformPropertyType value) {
        this.mountedOn = value;
    }

    public boolean isSetMountedOn() {
        return (this.mountedOn!= null);
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            List<CICitationPropertyType> theCitation;
            theCitation = (this.isSetCitation()?this.getCitation():null);
            strategy.appendField(locator, this, "citation", buffer, theCitation, this.isSetCitation());
        }
        {
            MDIdentifierPropertyType theIdentifier;
            theIdentifier = this.getIdentifier();
            strategy.appendField(locator, this, "identifier", buffer, theIdentifier, this.isSetIdentifier());
        }
        {
            CharacterStringPropertyType theType;
            theType = this.getType();
            strategy.appendField(locator, this, "type", buffer, theType, this.isSetType());
        }
        {
            CharacterStringPropertyType theDescription;
            theDescription = this.getDescription();
            strategy.appendField(locator, this, "description", buffer, theDescription, this.isSetDescription());
        }
        {
            MIPlatformPropertyType theMountedOn;
            theMountedOn = this.getMountedOn();
            strategy.appendField(locator, this, "mountedOn", buffer, theMountedOn, this.isSetMountedOn());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MIInstrumentType that = ((MIInstrumentType) object);
        {
            List<CICitationPropertyType> lhsCitation;
            lhsCitation = (this.isSetCitation()?this.getCitation():null);
            List<CICitationPropertyType> rhsCitation;
            rhsCitation = (that.isSetCitation()?that.getCitation():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "citation", lhsCitation), LocatorUtils.property(thatLocator, "citation", rhsCitation), lhsCitation, rhsCitation, this.isSetCitation(), that.isSetCitation())) {
                return false;
            }
        }
        {
            MDIdentifierPropertyType lhsIdentifier;
            lhsIdentifier = this.getIdentifier();
            MDIdentifierPropertyType rhsIdentifier;
            rhsIdentifier = that.getIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier, this.isSetIdentifier(), that.isSetIdentifier())) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsType;
            lhsType = this.getType();
            CharacterStringPropertyType rhsType;
            rhsType = that.getType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "type", lhsType), LocatorUtils.property(thatLocator, "type", rhsType), lhsType, rhsType, this.isSetType(), that.isSetType())) {
                return false;
            }
        }
        {
            CharacterStringPropertyType lhsDescription;
            lhsDescription = this.getDescription();
            CharacterStringPropertyType rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription, this.isSetDescription(), that.isSetDescription())) {
                return false;
            }
        }
        {
            MIPlatformPropertyType lhsMountedOn;
            lhsMountedOn = this.getMountedOn();
            MIPlatformPropertyType rhsMountedOn;
            rhsMountedOn = that.getMountedOn();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mountedOn", lhsMountedOn), LocatorUtils.property(thatLocator, "mountedOn", rhsMountedOn), lhsMountedOn, rhsMountedOn, this.isSetMountedOn(), that.isSetMountedOn())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            List<CICitationPropertyType> theCitation;
            theCitation = (this.isSetCitation()?this.getCitation():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "citation", theCitation), currentHashCode, theCitation, this.isSetCitation());
        }
        {
            MDIdentifierPropertyType theIdentifier;
            theIdentifier = this.getIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier, this.isSetIdentifier());
        }
        {
            CharacterStringPropertyType theType;
            theType = this.getType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "type", theType), currentHashCode, theType, this.isSetType());
        }
        {
            CharacterStringPropertyType theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription, this.isSetDescription());
        }
        {
            MIPlatformPropertyType theMountedOn;
            theMountedOn = this.getMountedOn();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mountedOn", theMountedOn), currentHashCode, theMountedOn, this.isSetMountedOn());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MIInstrumentType) {
            final MIInstrumentType copy = ((MIInstrumentType) draftCopy);
            {
                Boolean citationShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetCitation());
                if (citationShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<CICitationPropertyType> sourceCitation;
                    sourceCitation = (this.isSetCitation()?this.getCitation():null);
                    @SuppressWarnings("unchecked")
                    List<CICitationPropertyType> copyCitation = ((List<CICitationPropertyType> ) strategy.copy(LocatorUtils.property(locator, "citation", sourceCitation), sourceCitation, this.isSetCitation()));
                    copy.unsetCitation();
                    if (copyCitation!= null) {
                        List<CICitationPropertyType> uniqueCitationl = copy.getCitation();
                        uniqueCitationl.addAll(copyCitation);
                    }
                } else {
                    if (citationShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetCitation();
                    }
                }
            }
            {
                Boolean identifierShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetIdentifier());
                if (identifierShouldBeCopiedAndSet == Boolean.TRUE) {
                    MDIdentifierPropertyType sourceIdentifier;
                    sourceIdentifier = this.getIdentifier();
                    MDIdentifierPropertyType copyIdentifier = ((MDIdentifierPropertyType) strategy.copy(LocatorUtils.property(locator, "identifier", sourceIdentifier), sourceIdentifier, this.isSetIdentifier()));
                    copy.setIdentifier(copyIdentifier);
                } else {
                    if (identifierShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.identifier = null;
                    }
                }
            }
            {
                Boolean typeShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetType());
                if (typeShouldBeCopiedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType sourceType;
                    sourceType = this.getType();
                    CharacterStringPropertyType copyType = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "type", sourceType), sourceType, this.isSetType()));
                    copy.setType(copyType);
                } else {
                    if (typeShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.type = null;
                    }
                }
            }
            {
                Boolean descriptionShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetDescription());
                if (descriptionShouldBeCopiedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType sourceDescription;
                    sourceDescription = this.getDescription();
                    CharacterStringPropertyType copyDescription = ((CharacterStringPropertyType) strategy.copy(LocatorUtils.property(locator, "description", sourceDescription), sourceDescription, this.isSetDescription()));
                    copy.setDescription(copyDescription);
                } else {
                    if (descriptionShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.description = null;
                    }
                }
            }
            {
                Boolean mountedOnShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetMountedOn());
                if (mountedOnShouldBeCopiedAndSet == Boolean.TRUE) {
                    MIPlatformPropertyType sourceMountedOn;
                    sourceMountedOn = this.getMountedOn();
                    MIPlatformPropertyType copyMountedOn = ((MIPlatformPropertyType) strategy.copy(LocatorUtils.property(locator, "mountedOn", sourceMountedOn), sourceMountedOn, this.isSetMountedOn()));
                    copy.setMountedOn(copyMountedOn);
                } else {
                    if (mountedOnShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.mountedOn = null;
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MIInstrumentType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof MIInstrumentType) {
            final MIInstrumentType target = this;
            final MIInstrumentType leftObject = ((MIInstrumentType) left);
            final MIInstrumentType rightObject = ((MIInstrumentType) right);
            {
                Boolean citationShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetCitation(), rightObject.isSetCitation());
                if (citationShouldBeMergedAndSet == Boolean.TRUE) {
                    List<CICitationPropertyType> lhsCitation;
                    lhsCitation = (leftObject.isSetCitation()?leftObject.getCitation():null);
                    List<CICitationPropertyType> rhsCitation;
                    rhsCitation = (rightObject.isSetCitation()?rightObject.getCitation():null);
                    List<CICitationPropertyType> mergedCitation = ((List<CICitationPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "citation", lhsCitation), LocatorUtils.property(rightLocator, "citation", rhsCitation), lhsCitation, rhsCitation, leftObject.isSetCitation(), rightObject.isSetCitation()));
                    target.unsetCitation();
                    if (mergedCitation!= null) {
                        List<CICitationPropertyType> uniqueCitationl = target.getCitation();
                        uniqueCitationl.addAll(mergedCitation);
                    }
                } else {
                    if (citationShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetCitation();
                    }
                }
            }
            {
                Boolean identifierShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetIdentifier(), rightObject.isSetIdentifier());
                if (identifierShouldBeMergedAndSet == Boolean.TRUE) {
                    MDIdentifierPropertyType lhsIdentifier;
                    lhsIdentifier = leftObject.getIdentifier();
                    MDIdentifierPropertyType rhsIdentifier;
                    rhsIdentifier = rightObject.getIdentifier();
                    MDIdentifierPropertyType mergedIdentifier = ((MDIdentifierPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "identifier", lhsIdentifier), LocatorUtils.property(rightLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier, leftObject.isSetIdentifier(), rightObject.isSetIdentifier()));
                    target.setIdentifier(mergedIdentifier);
                } else {
                    if (identifierShouldBeMergedAndSet == Boolean.FALSE) {
                        target.identifier = null;
                    }
                }
            }
            {
                Boolean typeShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetType(), rightObject.isSetType());
                if (typeShouldBeMergedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType lhsType;
                    lhsType = leftObject.getType();
                    CharacterStringPropertyType rhsType;
                    rhsType = rightObject.getType();
                    CharacterStringPropertyType mergedType = ((CharacterStringPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "type", lhsType), LocatorUtils.property(rightLocator, "type", rhsType), lhsType, rhsType, leftObject.isSetType(), rightObject.isSetType()));
                    target.setType(mergedType);
                } else {
                    if (typeShouldBeMergedAndSet == Boolean.FALSE) {
                        target.type = null;
                    }
                }
            }
            {
                Boolean descriptionShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetDescription(), rightObject.isSetDescription());
                if (descriptionShouldBeMergedAndSet == Boolean.TRUE) {
                    CharacterStringPropertyType lhsDescription;
                    lhsDescription = leftObject.getDescription();
                    CharacterStringPropertyType rhsDescription;
                    rhsDescription = rightObject.getDescription();
                    CharacterStringPropertyType mergedDescription = ((CharacterStringPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "description", lhsDescription), LocatorUtils.property(rightLocator, "description", rhsDescription), lhsDescription, rhsDescription, leftObject.isSetDescription(), rightObject.isSetDescription()));
                    target.setDescription(mergedDescription);
                } else {
                    if (descriptionShouldBeMergedAndSet == Boolean.FALSE) {
                        target.description = null;
                    }
                }
            }
            {
                Boolean mountedOnShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetMountedOn(), rightObject.isSetMountedOn());
                if (mountedOnShouldBeMergedAndSet == Boolean.TRUE) {
                    MIPlatformPropertyType lhsMountedOn;
                    lhsMountedOn = leftObject.getMountedOn();
                    MIPlatformPropertyType rhsMountedOn;
                    rhsMountedOn = rightObject.getMountedOn();
                    MIPlatformPropertyType mergedMountedOn = ((MIPlatformPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "mountedOn", lhsMountedOn), LocatorUtils.property(rightLocator, "mountedOn", rhsMountedOn), lhsMountedOn, rhsMountedOn, leftObject.isSetMountedOn(), rightObject.isSetMountedOn()));
                    target.setMountedOn(mergedMountedOn);
                } else {
                    if (mountedOnShouldBeMergedAndSet == Boolean.FALSE) {
                        target.mountedOn = null;
                    }
                }
            }
        }
    }

    public void setCitation(List<CICitationPropertyType> value) {
        this.citation = null;
        if (value!= null) {
            List<CICitationPropertyType> draftl = this.getCitation();
            draftl.addAll(value);
        }
    }

    public MIInstrumentType withCitation(CICitationPropertyType... values) {
        if (values!= null) {
            for (CICitationPropertyType value: values) {
                getCitation().add(value);
            }
        }
        return this;
    }

    public MIInstrumentType withCitation(Collection<CICitationPropertyType> values) {
        if (values!= null) {
            getCitation().addAll(values);
        }
        return this;
    }

    public MIInstrumentType withIdentifier(MDIdentifierPropertyType value) {
        setIdentifier(value);
        return this;
    }

    public MIInstrumentType withType(CharacterStringPropertyType value) {
        setType(value);
        return this;
    }

    public MIInstrumentType withDescription(CharacterStringPropertyType value) {
        setDescription(value);
        return this;
    }

    public MIInstrumentType withMountedOn(MIPlatformPropertyType value) {
        setMountedOn(value);
        return this;
    }

    public MIInstrumentType withCitation(List<CICitationPropertyType> value) {
        setCitation(value);
        return this;
    }

}
