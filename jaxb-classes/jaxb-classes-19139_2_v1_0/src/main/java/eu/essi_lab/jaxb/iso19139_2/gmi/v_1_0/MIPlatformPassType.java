//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.02.26 at 04:55:57 PM AST 
//


package eu.essi_lab.jaxb.iso19139_2.gmi.v_1_0;

/*-
 * #%L
 * Discovery and Access Broker (DAB) Community Edition (CE)
 * %%
 * Copyright (C) 2021 - 2024 National Research Council of Italy (CNR)/Institute of Atmospheric Pollution Research (IIA)/ESSI-Lab
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import org.jvnet.jaxb2_commons.lang.CopyStrategy2;
import org.jvnet.jaxb2_commons.lang.CopyTo2;
import org.jvnet.jaxb2_commons.lang.Equals2;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy2;
import org.jvnet.jaxb2_commons.lang.HashCode2;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy2;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBMergeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.MergeFrom2;
import org.jvnet.jaxb2_commons.lang.MergeStrategy2;
import org.jvnet.jaxb2_commons.lang.ToString2;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy2;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;

import net.opengis.iso19139.gco.v_20060504.AbstractObjectType;
import net.opengis.iso19139.gmd.v_20060504.MDIdentifierPropertyType;
import net.opengis.iso19139.gss.v_20060504.GMObjectPropertyType;


/**
 * Description: identification of collection coverage - shortName: PlatformPass
 * 
 * <p>Java class for MI_PlatformPass_Type complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MI_PlatformPass_Type"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.isotc211.org/2005/gco}AbstractObject_Type"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="identifier" type="{http://www.isotc211.org/2005/gmd}MD_Identifier_PropertyType"/&gt;
 *         &lt;element name="extent" type="{http://www.isotc211.org/2005/gss}GM_Object_PropertyType" minOccurs="0"/&gt;
 *         &lt;element name="relatedEvent" type="{http://www.isotc211.org/2005/gmi}MI_Event_PropertyType" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MI_PlatformPass_Type", propOrder = {
    "identifier",
    "extent",
    "relatedEvent"
})
public class MIPlatformPassType
    extends AbstractObjectType
    implements Cloneable, CopyTo2, Equals2, HashCode2, MergeFrom2, ToString2
{

    @XmlElement(required = true)
    protected MDIdentifierPropertyType identifier;
    protected GMObjectPropertyType extent;
    protected List<MIEventPropertyType> relatedEvent;

    /**
     * Gets the value of the identifier property.
     * 
     * @return
     *     possible object is
     *     {@link MDIdentifierPropertyType }
     *     
     */
    public MDIdentifierPropertyType getIdentifier() {
        return identifier;
    }

    /**
     * Sets the value of the identifier property.
     * 
     * @param value
     *     allowed object is
     *     {@link MDIdentifierPropertyType }
     *     
     */
    public void setIdentifier(MDIdentifierPropertyType value) {
        this.identifier = value;
    }

    public boolean isSetIdentifier() {
        return (this.identifier!= null);
    }

    /**
     * Gets the value of the extent property.
     * 
     * @return
     *     possible object is
     *     {@link GMObjectPropertyType }
     *     
     */
    public GMObjectPropertyType getExtent() {
        return extent;
    }

    /**
     * Sets the value of the extent property.
     * 
     * @param value
     *     allowed object is
     *     {@link GMObjectPropertyType }
     *     
     */
    public void setExtent(GMObjectPropertyType value) {
        this.extent = value;
    }

    public boolean isSetExtent() {
        return (this.extent!= null);
    }

    /**
     * Gets the value of the relatedEvent property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the relatedEvent property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRelatedEvent().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MIEventPropertyType }
     * 
     * 
     */
    public List<MIEventPropertyType> getRelatedEvent() {
        if (relatedEvent == null) {
            relatedEvent = new ArrayList<MIEventPropertyType>();
        }
        return this.relatedEvent;
    }

    public boolean isSetRelatedEvent() {
        return ((this.relatedEvent!= null)&&(!this.relatedEvent.isEmpty()));
    }

    public void unsetRelatedEvent() {
        this.relatedEvent = null;
    }

    public String toString() {
        final ToStringStrategy2 strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy2 strategy) {
        super.appendFields(locator, buffer, strategy);
        {
            MDIdentifierPropertyType theIdentifier;
            theIdentifier = this.getIdentifier();
            strategy.appendField(locator, this, "identifier", buffer, theIdentifier, this.isSetIdentifier());
        }
        {
            GMObjectPropertyType theExtent;
            theExtent = this.getExtent();
            strategy.appendField(locator, this, "extent", buffer, theExtent, this.isSetExtent());
        }
        {
            List<MIEventPropertyType> theRelatedEvent;
            theRelatedEvent = (this.isSetRelatedEvent()?this.getRelatedEvent():null);
            strategy.appendField(locator, this, "relatedEvent", buffer, theRelatedEvent, this.isSetRelatedEvent());
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy2 strategy) {
        if ((object == null)||(this.getClass()!= object.getClass())) {
            return false;
        }
        if (this == object) {
            return true;
        }
        if (!super.equals(thisLocator, thatLocator, object, strategy)) {
            return false;
        }
        final MIPlatformPassType that = ((MIPlatformPassType) object);
        {
            MDIdentifierPropertyType lhsIdentifier;
            lhsIdentifier = this.getIdentifier();
            MDIdentifierPropertyType rhsIdentifier;
            rhsIdentifier = that.getIdentifier();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "identifier", lhsIdentifier), LocatorUtils.property(thatLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier, this.isSetIdentifier(), that.isSetIdentifier())) {
                return false;
            }
        }
        {
            GMObjectPropertyType lhsExtent;
            lhsExtent = this.getExtent();
            GMObjectPropertyType rhsExtent;
            rhsExtent = that.getExtent();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "extent", lhsExtent), LocatorUtils.property(thatLocator, "extent", rhsExtent), lhsExtent, rhsExtent, this.isSetExtent(), that.isSetExtent())) {
                return false;
            }
        }
        {
            List<MIEventPropertyType> lhsRelatedEvent;
            lhsRelatedEvent = (this.isSetRelatedEvent()?this.getRelatedEvent():null);
            List<MIEventPropertyType> rhsRelatedEvent;
            rhsRelatedEvent = (that.isSetRelatedEvent()?that.getRelatedEvent():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "relatedEvent", lhsRelatedEvent), LocatorUtils.property(thatLocator, "relatedEvent", rhsRelatedEvent), lhsRelatedEvent, rhsRelatedEvent, this.isSetRelatedEvent(), that.isSetRelatedEvent())) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy2 strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy2 strategy) {
        int currentHashCode = super.hashCode(locator, strategy);
        {
            MDIdentifierPropertyType theIdentifier;
            theIdentifier = this.getIdentifier();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "identifier", theIdentifier), currentHashCode, theIdentifier, this.isSetIdentifier());
        }
        {
            GMObjectPropertyType theExtent;
            theExtent = this.getExtent();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "extent", theExtent), currentHashCode, theExtent, this.isSetExtent());
        }
        {
            List<MIEventPropertyType> theRelatedEvent;
            theRelatedEvent = (this.isSetRelatedEvent()?this.getRelatedEvent():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "relatedEvent", theRelatedEvent), currentHashCode, theRelatedEvent, this.isSetRelatedEvent());
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy2 strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy2 strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy2 strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        super.copyTo(locator, draftCopy, strategy);
        if (draftCopy instanceof MIPlatformPassType) {
            final MIPlatformPassType copy = ((MIPlatformPassType) draftCopy);
            {
                Boolean identifierShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetIdentifier());
                if (identifierShouldBeCopiedAndSet == Boolean.TRUE) {
                    MDIdentifierPropertyType sourceIdentifier;
                    sourceIdentifier = this.getIdentifier();
                    MDIdentifierPropertyType copyIdentifier = ((MDIdentifierPropertyType) strategy.copy(LocatorUtils.property(locator, "identifier", sourceIdentifier), sourceIdentifier, this.isSetIdentifier()));
                    copy.setIdentifier(copyIdentifier);
                } else {
                    if (identifierShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.identifier = null;
                    }
                }
            }
            {
                Boolean extentShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetExtent());
                if (extentShouldBeCopiedAndSet == Boolean.TRUE) {
                    GMObjectPropertyType sourceExtent;
                    sourceExtent = this.getExtent();
                    GMObjectPropertyType copyExtent = ((GMObjectPropertyType) strategy.copy(LocatorUtils.property(locator, "extent", sourceExtent), sourceExtent, this.isSetExtent()));
                    copy.setExtent(copyExtent);
                } else {
                    if (extentShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.extent = null;
                    }
                }
            }
            {
                Boolean relatedEventShouldBeCopiedAndSet = strategy.shouldBeCopiedAndSet(locator, this.isSetRelatedEvent());
                if (relatedEventShouldBeCopiedAndSet == Boolean.TRUE) {
                    List<MIEventPropertyType> sourceRelatedEvent;
                    sourceRelatedEvent = (this.isSetRelatedEvent()?this.getRelatedEvent():null);
                    @SuppressWarnings("unchecked")
                    List<MIEventPropertyType> copyRelatedEvent = ((List<MIEventPropertyType> ) strategy.copy(LocatorUtils.property(locator, "relatedEvent", sourceRelatedEvent), sourceRelatedEvent, this.isSetRelatedEvent()));
                    copy.unsetRelatedEvent();
                    if (copyRelatedEvent!= null) {
                        List<MIEventPropertyType> uniqueRelatedEventl = copy.getRelatedEvent();
                        uniqueRelatedEventl.addAll(copyRelatedEvent);
                    }
                } else {
                    if (relatedEventShouldBeCopiedAndSet == Boolean.FALSE) {
                        copy.unsetRelatedEvent();
                    }
                }
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new MIPlatformPassType();
    }

    public void mergeFrom(Object left, Object right) {
        final MergeStrategy2 strategy = JAXBMergeStrategy.INSTANCE;
        mergeFrom(null, null, left, right, strategy);
    }

    public void mergeFrom(ObjectLocator leftLocator, ObjectLocator rightLocator, Object left, Object right, MergeStrategy2 strategy) {
        super.mergeFrom(leftLocator, rightLocator, left, right, strategy);
        if (right instanceof MIPlatformPassType) {
            final MIPlatformPassType target = this;
            final MIPlatformPassType leftObject = ((MIPlatformPassType) left);
            final MIPlatformPassType rightObject = ((MIPlatformPassType) right);
            {
                Boolean identifierShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetIdentifier(), rightObject.isSetIdentifier());
                if (identifierShouldBeMergedAndSet == Boolean.TRUE) {
                    MDIdentifierPropertyType lhsIdentifier;
                    lhsIdentifier = leftObject.getIdentifier();
                    MDIdentifierPropertyType rhsIdentifier;
                    rhsIdentifier = rightObject.getIdentifier();
                    MDIdentifierPropertyType mergedIdentifier = ((MDIdentifierPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "identifier", lhsIdentifier), LocatorUtils.property(rightLocator, "identifier", rhsIdentifier), lhsIdentifier, rhsIdentifier, leftObject.isSetIdentifier(), rightObject.isSetIdentifier()));
                    target.setIdentifier(mergedIdentifier);
                } else {
                    if (identifierShouldBeMergedAndSet == Boolean.FALSE) {
                        target.identifier = null;
                    }
                }
            }
            {
                Boolean extentShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetExtent(), rightObject.isSetExtent());
                if (extentShouldBeMergedAndSet == Boolean.TRUE) {
                    GMObjectPropertyType lhsExtent;
                    lhsExtent = leftObject.getExtent();
                    GMObjectPropertyType rhsExtent;
                    rhsExtent = rightObject.getExtent();
                    GMObjectPropertyType mergedExtent = ((GMObjectPropertyType) strategy.merge(LocatorUtils.property(leftLocator, "extent", lhsExtent), LocatorUtils.property(rightLocator, "extent", rhsExtent), lhsExtent, rhsExtent, leftObject.isSetExtent(), rightObject.isSetExtent()));
                    target.setExtent(mergedExtent);
                } else {
                    if (extentShouldBeMergedAndSet == Boolean.FALSE) {
                        target.extent = null;
                    }
                }
            }
            {
                Boolean relatedEventShouldBeMergedAndSet = strategy.shouldBeMergedAndSet(leftLocator, rightLocator, leftObject.isSetRelatedEvent(), rightObject.isSetRelatedEvent());
                if (relatedEventShouldBeMergedAndSet == Boolean.TRUE) {
                    List<MIEventPropertyType> lhsRelatedEvent;
                    lhsRelatedEvent = (leftObject.isSetRelatedEvent()?leftObject.getRelatedEvent():null);
                    List<MIEventPropertyType> rhsRelatedEvent;
                    rhsRelatedEvent = (rightObject.isSetRelatedEvent()?rightObject.getRelatedEvent():null);
                    List<MIEventPropertyType> mergedRelatedEvent = ((List<MIEventPropertyType> ) strategy.merge(LocatorUtils.property(leftLocator, "relatedEvent", lhsRelatedEvent), LocatorUtils.property(rightLocator, "relatedEvent", rhsRelatedEvent), lhsRelatedEvent, rhsRelatedEvent, leftObject.isSetRelatedEvent(), rightObject.isSetRelatedEvent()));
                    target.unsetRelatedEvent();
                    if (mergedRelatedEvent!= null) {
                        List<MIEventPropertyType> uniqueRelatedEventl = target.getRelatedEvent();
                        uniqueRelatedEventl.addAll(mergedRelatedEvent);
                    }
                } else {
                    if (relatedEventShouldBeMergedAndSet == Boolean.FALSE) {
                        target.unsetRelatedEvent();
                    }
                }
            }
        }
    }

    public void setRelatedEvent(List<MIEventPropertyType> value) {
        this.relatedEvent = null;
        if (value!= null) {
            List<MIEventPropertyType> draftl = this.getRelatedEvent();
            draftl.addAll(value);
        }
    }

    public MIPlatformPassType withIdentifier(MDIdentifierPropertyType value) {
        setIdentifier(value);
        return this;
    }

    public MIPlatformPassType withExtent(GMObjectPropertyType value) {
        setExtent(value);
        return this;
    }

    public MIPlatformPassType withRelatedEvent(MIEventPropertyType... values) {
        if (values!= null) {
            for (MIEventPropertyType value: values) {
                getRelatedEvent().add(value);
            }
        }
        return this;
    }

    public MIPlatformPassType withRelatedEvent(Collection<MIEventPropertyType> values) {
        if (values!= null) {
            getRelatedEvent().addAll(values);
        }
        return this;
    }

    public MIPlatformPassType withRelatedEvent(List<MIEventPropertyType> value) {
        setRelatedEvent(value);
        return this;
    }

}
