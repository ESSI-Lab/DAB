//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.12.10 at 03:04:33 PM CET 
//


package org.cuahsi.waterml._1;

/*-
 * #%L
 * Discovery and Access Broker (DAB)
 * %%
 * Copyright (C) 2021 - 2025 National Research Council of Italy (CNR)/Institute of Atmospheric Pollution Research (IIA)/ESSI-Lab
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for UnitsTypeEnum.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="UnitsTypeEnum"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="Angle"/&gt;
 *     &lt;enumeration value="Area"/&gt;
 *     &lt;enumeration value="Dimensionless"/&gt;
 *     &lt;enumeration value="Energy"/&gt;
 *     &lt;enumeration value="Energy Flux"/&gt;
 *     &lt;enumeration value="Flow"/&gt;
 *     &lt;enumeration value="Force"/&gt;
 *     &lt;enumeration value="Frequency"/&gt;
 *     &lt;enumeration value="Length"/&gt;
 *     &lt;enumeration value="Light"/&gt;
 *     &lt;enumeration value="Mass"/&gt;
 *     &lt;enumeration value="Permeability"/&gt;
 *     &lt;enumeration value="Power"/&gt;
 *     &lt;enumeration value="Pressure/Stress"/&gt;
 *     &lt;enumeration value="Resolution"/&gt;
 *     &lt;enumeration value="Scale"/&gt;
 *     &lt;enumeration value="Temperature"/&gt;
 *     &lt;enumeration value="Time"/&gt;
 *     &lt;enumeration value="Velocity"/&gt;
 *     &lt;enumeration value="Volume"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "UnitsTypeEnum")
@XmlEnum
public enum UnitsTypeEnum {

    @XmlEnumValue("Angle")
    ANGLE("Angle"),
    @XmlEnumValue("Area")
    AREA("Area"),
    @XmlEnumValue("Dimensionless")
    DIMENSIONLESS("Dimensionless"),
    @XmlEnumValue("Energy")
    ENERGY("Energy"),
    @XmlEnumValue("Energy Flux")
    ENERGY_FLUX("Energy Flux"),
    @XmlEnumValue("Flow")
    FLOW("Flow"),
    @XmlEnumValue("Force")
    FORCE("Force"),
    @XmlEnumValue("Frequency")
    FREQUENCY("Frequency"),
    @XmlEnumValue("Length")
    LENGTH("Length"),
    @XmlEnumValue("Light")
    LIGHT("Light"),
    @XmlEnumValue("Mass")
    MASS("Mass"),
    @XmlEnumValue("Permeability")
    PERMEABILITY("Permeability"),
    @XmlEnumValue("Power")
    POWER("Power"),
    @XmlEnumValue("Pressure/Stress")
    PRESSURE_STRESS("Pressure/Stress"),
    @XmlEnumValue("Resolution")
    RESOLUTION("Resolution"),
    @XmlEnumValue("Scale")
    SCALE("Scale"),
    @XmlEnumValue("Temperature")
    TEMPERATURE("Temperature"),
    @XmlEnumValue("Time")
    TIME("Time"),
    @XmlEnumValue("Velocity")
    VELOCITY("Velocity"),
    @XmlEnumValue("Volume")
    VOLUME("Volume");
    private final String value;

    UnitsTypeEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static UnitsTypeEnum fromValue(String v) {
        for (UnitsTypeEnum c: UnitsTypeEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
