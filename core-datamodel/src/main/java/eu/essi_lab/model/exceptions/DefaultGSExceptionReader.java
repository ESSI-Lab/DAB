package eu.essi_lab.model.exceptions;

/*-
 * #%L
 * Discovery and Access Broker (DAB) Community Edition (CE)
 * %%
 * Copyright (C) 2021 National Research Council of Italy (CNR)/Institute of Atmospheric Pollution Research (IIA)/ESSI-Lab
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */

import java.util.ArrayList;
import java.util.List;

public class DefaultGSExceptionReader {

    public static final String DEFAULT_INTERNAL_ERROR_USERMESSAGE = "An internal error occourred, it was logged and administrators were notified.";
    private static final String DEFAULT_INTERNAL_ERROR_DEVMESSAGE = "No Error Description found in this exception error info list";

    private GSException exception;

    public DefaultGSExceptionReader(GSException ex) {

	if (ex == null)
	    ex = new GSException();

	this.exception = ex;
    }
    public int getSeverity() {
	int severity = -1;

	for (ErrorInfo errorInfo : exception.getErrorInfoList()) {

	    if (errorInfo.getSeverity() != -1) {
		severity = errorInfo.getSeverity();
	    }

	}

	return severity;

    }

    /**
     * Reads the last {@link ErrorInfo#getErrorType()} value which was inserted, i.e. the final error type is the one
     * which was inserted most recently (up in the stack).
     *
     * @return the most recent error type inserted
     */
    public int getErrorType() {
	int et = -1;

	for (ErrorInfo errorInfo : exception.getErrorInfoList()) {

	    if (errorInfo.getErrorType() != -1) {
		et = errorInfo.getErrorType();
	    }

	}

	return et;

    }

    /**
     * Reads all the Error identifiers and contexts which were inserted during exception propagation. The returned list
     * is generated by applying a LIFO (Last In First Out) strategy.
     *
     * @return the list of {@link ErrorIdentifier}s associated with this exception (last inserted message is first in the returned list).
     */
    public List<ErrorIdentifier> getErrorIdentifiers() {

	List<ErrorIdentifier> list = new ArrayList<>();

	for (int i = exception.getErrorInfoList().size() - 1; i >= 0; i--) {

	    ErrorInfo errorInfo = exception.getErrorInfoList().get(i);

	    if (errorInfo.getErrorId() != null && errorInfo.getContextId() != null) {
		list.add(new ErrorIdentifier(errorInfo.getContextId(), errorInfo.getErrorId()));
	    }

	}

	return list;
    }

    /**
     * Reads all the Error identifiers and contexts which were inserted during exception propagation. The returned list
     * is generated by applying a LIFO (Last In First Out) strategy.
     *
     * @return the list of Error Messagess associated with this exception (last inserted message is first in the returned list).
     */
    public List<String> getErrorMessages() {

	List<String> list = new ArrayList<>();

	for (int i = exception.getErrorInfoList().size() - 1; i >= 0; i--) {

	    ErrorInfo errorInfo = exception.getErrorInfoList().get(i);

	    if (errorInfo.getErrorDescription() != null && !errorInfo.getErrorDescription().equalsIgnoreCase("")) {

		list.add(errorInfo.getErrorDescription());
	    }

	}

	return list;
    }

    /**
     * Reads the first (least recently inserted) {@link Throwable} error associated with this excpetion. If no error has
     * been inserted during exception propagation, null is returned.
     *
     * @return {@link Throwable} error associated with this excpetion, null if no error has been inserted during exception propagation
     */
    public Throwable getAlienException() {

	for (int i = 0; i < exception.getErrorInfoList().size(); i++) {

	    Throwable cause = exception.getErrorInfoList().get(i).getCause();

	    if (cause != null) {
		return cause;
	    }

	}

	return null;
    }

    /**
     * Reads the last (most recently inserted) User Description associated with this exception. If no User Description
     * has been inserted during exception propagation, a default error message is returned
     * {@link DefaultGSExceptionReader#DEFAULT_INTERNAL_ERROR_USERMESSAGE}
     *
     * @return the error message to be shown to users.
     */
    public String getLastUserDescription() {

	String userDesc = null;

	for (int i = exception.getErrorInfoList().size() - 1; i >= 0; i--) {

	    ErrorInfo errorInfo = exception.getErrorInfoList().get(i);

	    if (errorInfo.getUserErrorDescription() != null) {
		userDesc = errorInfo.getUserErrorDescription();

		if (errorInfo.getErrorCorrection() != null)
		    userDesc += " (" + errorInfo.getErrorCorrection() + ")";
	    }

	}

	return userDesc != null ? userDesc : DEFAULT_INTERNAL_ERROR_USERMESSAGE;
    }

    /**
     * Reads the last (most recently inserted) Error Description associated with this exception. If no Error Description
     * has been inserted during exception propagation, a default error message is returned
     * {@link DefaultGSExceptionReader#DEFAULT_INTERNAL_ERROR_DEVMESSAGE}
     *
     * @return the error message to be shown to users.
     */
    public String getLastErrorDescription() {

	String msg = null;

	for (int i = exception.getErrorInfoList().size() - 1; i >= 0; i--) {

	    ErrorInfo errorInfo = exception.getErrorInfoList().get(i);

	    if (errorInfo.getErrorDescription() != null) {
		msg = errorInfo.getErrorDescription();

		if (errorInfo.getErrorCorrection() != null)
		    msg += " (" + errorInfo.getErrorCorrection() + ")";
	    }

	}

	return msg != null ? msg : DEFAULT_INTERNAL_ERROR_DEVMESSAGE;
    }

    /**
     * Reads the last (most recently inserted) Error Identifier associated with this exception. If no Error Identifier
     * has been inserted during exception propagation, null is returned
     *
     * @return the last (most recently inserted) Error Identifier associated or null
     */
    public String getLastErrorIdentifier() {

	String id = null;

	for (int i = exception.getErrorInfoList().size() - 1; i >= 0; i--) {

	    ErrorInfo errorInfo = exception.getErrorInfoList().get(i);

	    if (errorInfo.getErrorId() != null) {
		id = errorInfo.getErrorId();

	    }

	}

	return id;

    }
}
